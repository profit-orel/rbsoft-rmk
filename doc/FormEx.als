{"Shell",
 {"Folder","AST","FormEx™ - ВК работы с формой и визуальными возможностями","",
  {"Item","AST","От автора","About",
"От автора",
"",
"Все права на компоненту принадлежат Фёдорову Алексею Леонидовичу.

Официальный сайт компоненты: @formex.dorex.ru

Вопросы по компоненте просьба направлять по адресу: @formex@dorex.ru

Благодарности:
Ерохину Андрею aka Vip
Alexey Bazhitov aka avb
Брянцеву Олегу aka ob36
Мореву Андрею aka Z1
Александру Орефкову aka orefkov
Sergey Popov aka asp
Шемякину Павлу aka toypaul
Артуру Аюханову aka artbear
"
  },
  {"Item","AST","Версия 2.0.5.93","Версия: 2.0.5.93",
"",
"",
"Исправления внес: 
Анисков Александр aka vandalsvq (10/11/2007)
"
  },
  {"Item","AST","План раскраски таблиц","План раскраски таблиц",
"План раскраски",
"План раскраски",
"@Описание
Для ускорения и упрощения работы раскраски таблиц в компоненту с версии 2.0.5.85 введен функционал плана раскраски таблицы. Для его активизации необходимо вызвать метод ИспользоватьПланРаскраски() объекта Сервис с параметром 1 (соответсвенно, для отключения и перехода на старый принцип раскраски надо вызвать тот же метод, но с параметром 0). По умолчанию функционал плана раскраски отключен и работает старая методика раскраски.
Для реализации раскраски по новому функционалу плана раскраски, необходимо добавить в раскрашиваемую таблицу колонку с заголовком ""FormEx_ПланРаскраски"" (без кавычек, регистронезависимо). Колонка может располагаться в любом месте таблицы. Содержимое этой колонки задает план раскраски таблицы, основанный на тех же макросах, которые описаны в части ""Раскраска таблиц"". При этом макросы COUNT и INDENT не обрабатываются. В плане раскраски каждая ячейка текущей строки определяется круглыми скобками. В плане учитываются как видимые, так и невидимые колонки. Макросы раскраски надо помещать в места, соответсвующие смене раскраски. Несколько примеров помогу лучше понять этот принцип.
@Пример плана раскраски
""()()()(BRUSH[255])()()(BRUSH[NONE)"" - обозначает, что начиная с четвертой колонки (включительно) цвет фона ячеек устанавливается красным, а с седьмо раскраска фона отключается и все остальные колонки не раскрашиваются;
""(BRUSH_S[255])"" - обозначается, что вся строка, когда она становится текущей, подсвечивается красным фоном.
"
  },
  {"Item","AST","Раскраска таблиц","Раскраска таблиц",
"FONT[<Цвет>] BRUSH[<Цвет>] FONT_S[<Цвет>] BRUSH_S[<Цвет>] FONT_C[<Цвет>] BRUSH_C[<Цвет>] 
COUNT[<КоличествоКолонок>] INDENT[<Отступ>] FONTSET[<КодШрифта>] FONTSET_S[<КодШрифта>] ",
"FONT[<Цвет>] BRUSH[<Цвет>] FONT_S[<Цвет>] BRUSH_S[<Цвет>] FONT_C[<Цвет>] BRUSH_C[<Цвет>] 
COUNT[<КоличествоКолонок>] INDENT[<Отступ>] FONTSET[<КодШрифта>] FONTSET_S[<КодШрифта>] ",
"@ВНИМАНИЕ:
При использовании плана раскраски (см.выше) очень важно использование 
круглых скобок для обозначения строки или колонки таблицы. См. План раскраски таблиц.
@Синтаксис:
FONT[<Цвет>] - задает цвет шрифта строки;
BRUSH[<Цвет>] - задает цвет фона строки;
FONT_S[<Цвет>] - задает цвет шрифта строки, если она является текущей (не влияет на текущую ячейку);
BRUSH_S[<Цвет>] - задает цвет фона строки, если она является текущей (не влияет на текущую ячейку);
FONT_C[<Цвет>] - задает цвет шрифта строки, если она является текущей ячейкой (работает только при использовании плана раскраски);
BRUSH_C[<Цвет>] - задает цвет фона строки, если она является текущей ячейкой (работает только при использовании плана раскраски);
COUNT[<КоличествоКолонок>] - задает количество колонок, на которые распространяется раскраска (игнорируется при использовании плана раскраски);
INDENT[<Отступ>] - задает количество колонок, которое необходимо пропустить перед началом раскраски (игнорируется при использовании плана раскраски);
FONTSET[<КодШрифта>] - задает шрифт строки;
FONTSET_S[<КодШрифта>] - задает шрифт строки, если она является текущей;
@Назначение:
Компонента позволяет устанавливать произвольную раскраску в таблицах 1С (многострочные части документов, формы списков, таблицы значений на форме, дерево+таблица и т.д.).
Разрешить раскраску таблиц можно с помощью метода ВключитьРаскраскуТаблиц / ColourBrowse или с помощью флажка на странице свойств компоненты. Запрет раскраски производится вызовом метода ВыключитьРаскраскуТаблиц / UnColourBrowse или снятием флажка на странице свойств.
Для включения раскраски в таблицу необходимо добавить колонку, формула в которой должна содержать служебную строку. В общем случае колонка должна располагаться левее колонок, которые предполагается раскрасить.
Служебная строка может быть, как напрямую прописана в формуле колонки (или формироваться функцией, вызываемой из формулы), так и быть содержимым реквизита. Для таблиц значений строка раскраски устанавливается в качестве значения ячейки таблицы. Служебная строка состоит из макрокоманд, которые формируют стиль строки. Макрокоманды регистронезависимы и могут располагаться в любой последовательности. Ни одна из макрокоманд не является обязательной, т.е. любая из них может быть опущена при формировании служебной строки.
@Параметры:
<Цвет> - представление необходимого цвета в формате RGB в виде положительного числа. Может быть как десятеричным, так и шестнадцатеричным (в этом случае необходимо добавить ''0x'' перед числом).
<КоличествоКолонок> - положительное число.
<Отступ> - положительное или отрицательное число.
<КодШрифта> - код пользовательского шрифта, возвращенный методом СоздатьШрифт / CreateFont.
Вместо любого из параметров можно написать строку NONE, тогда соответствующая макрокоманда применит текущую системную настройку. Если Отступ задан отрицательным числом, то КоличествоКолонок считает только видимые колонки до текущей колонки со служебной строкой. После текущей строки (или если Отступ >=0) КоличествоКолонок считает как видимые, так и невидимые колонки.
Служебная строка с макрокомандами действует только в пределах одной строки. Макрокоманды FONT, FONT_S, BRUSH, BRUSH_S, FONTSET и FONTSET_S сбрасывают значения макрокоманд COUNT и INDENT, заданные предыдущей служебной строкой, к нулевому состоянию. Макрокоманда COUNT сбрасывает значение макрокоманды INDENT, заданное предыдущей служебной строкой, к нулевому состоянию.
Флаг ''Отрицательное красным'' игнорируется в раскрашиваемых колонках.
"
  },
  {"Item","AST","Раскраска списков значений","Раскраска списков значений",
"FONT[<Цвет>] BRUSH[<Цвет>] FONT_S[<Цвет>] BRUSH_S[<Цвет>] FONTSET[<КодШрифта>] FONTSET_S[<КодШрифта>] IMAGE[<ИмяКартинки>]",
"FONT[<Цвет>] BRUSH[<Цвет>] FONT_S[<Цвет>] BRUSH_S[<Цвет>] FONTSET[<КодШрифта>] FONTSET_S[<КодШрифта>] IMAGE[<ИмяКартинки>]",
"@Синтаксис:
FONT[<Цвет>] - задает цвет шрифта строки;
BRUSH[<Цвет>] - задает цвет фона строки;
FONT_S[<Цвет>] - задает цвет шрифта строки, если она является текущей (не влияет на текущую ячейку);
BRUSH_S[<Цвет>] - задает цвет фона строки, если она является текущей (не влияет на текущую ячейку);
FONTSET[<КодШрифта>] - задает шрифт строки;
FONTSET_S[<КодШрифта>] - задает шрифт строки, если она является текущей;
IMAGE[<ИмяКартинки>] - задает пользовательское начертание флажков в списке с пометками;
@Назначение:
Раскраска списков значений (список значений на форме, поле с выпадающим списком) так же реализована с помощью макрокоманд (подробнее см. Раскраска таблиц).
Разрешить или запретить раскраску списков значений можно с помощью метода ПерехватОтрисовкиСписков / ValueListDraw.
Служебная строка макрокоманд должен размещаться в представлении раскрашиваемой позиции списка значений. Для того чтобы сделать макрокоманды невидимым пользователю, рекомендуется помещать служебную строку в представление второй строкой, т.е. перед списком макрокоманд поставить разделитель строк.
@Параметры:
<Цвет> - представление необходимого цвета в формате RGB в виде положительного числа. Может быть как десятеричным, так и шестнадцатеричным (в этом случае необходимо добавить ''0x'' перед числом).
<ИмяКартинки> - идентификатор картинки в библиотеке картинок, содержащей пользовательское представление флажков для списка с пометками. Картинка должна состоять из двух пиктограмм размером 13х16 (ширина х высота): первая - непомеченная строка списка; вторая - помеченная строка списка.
<КодШрифта> - код пользовательского шрифта, возвращенный методом СоздатьШрифт / CreateFont.
@Пример:
Раскраска = ''FONT['' + ПолучитьЦвет(0,0,0) + '']'' +
                ''BRUSH['' + ПолучитьЦвет(100,255,100) + '']'' +
                ''FONTSET['' + глШрифт2 + '']''+
                ''FONTSET_S['' + глШрифт1 + '']''+
                ''BRUSH_S[''+ПолучитьЦвет(0,100,100)+'']'';
Список.ДобавитьЗначение(зн, ''''+зн+РазделительСтрок+Раскраска);
"
  },
  {"Item","AST","Установка пиктограмм в списки значений","",
"",
"",
"В списке значений (первый параметр) добавляем в начале представления ''[icon:N]'', где N - порядковый номер пиктограммы в катинке. Если пиктограмма отображается, то строка ''[icon:N]'' от представления отрезается при выводе. В режиме выбора из меню (не пометка!) значения списка значений, на которых установлена пометка, считаются недоступными. При выборе из меню пункт списка значений с представлением ''|'' - переход на следующую колонку
"
  },
  {"Folder","AST","Предопределенные события","",
   {"Item","AST","Порядок вызова","Порядок вызова",
"",
"",
"Порядок поиска обработчика события по имени:
Процедура <РусскоеИмяПроцедуры>
Процедура <АнглийскоеИмяПроцедуры>
Функция <РусскоеИмяПроцедуры>
Функция <АнглийскоеИмяПроцедуры>

Порядок вызова
Первоначально обработчик события ищется в модуле активной формы.
Если обработчик присутствует в модуле формы, то она вызывается. В противном случае обработчик ищется во всех загруженных глобальных модулях, в порядке их загрузки, начиная с основного глобального модуля.
Вызов дополнительных предопределенных процедур сквозной. Т.е. не останавливается после первой найденной процедуры, а идет дальше, через локальный контекст, основной глобальный модуль и все дополнительный глобальные модули.
"
   },
   {"Folder","AST","Глобальные","",
    {"Item","AST","ОбработкаБлокировкиОбъекта","",
"Процедура ПриНачалеБлокировкиОбъекта(<?>,,)КонецПроцедуры",
"",
"@Синтаксис:
Процедура ПослеОткрытия(<Объект>,<Повторить>,<ДополнительныйТекст>)КонецПроцедуры
@Назначение:
Предопределенная процедура
@Параметры:
<Объект> - (Объект) объект который блокируется
<Повторить> - (Число) флаг повторения
<ДополнительныйТекст> - (Строка) дополнительный текст при блокировке
"
    },
    {"Item","AST","ПиктограммаМногострочнойЧасти","MultiLinePic",
"Процедура ПиктограммаМногострочнойЧасти(<?>,) КонецПроцедуры",
"Procedure MultiLinePic(<?>,) EndProcedure",
"@Синтаксис:
Процедура ПиктограммаМногострочнойЧасти(<Контекст>,<НомерПиктограммы>) КонецПроцедуры
@Назначение:
Предопределенная процедура вызывается при вычислении номера системной пиктограммы в многострочной части формы списка.
@Параметры:
<Контекст> - Передается по значению.  контекст формы
<НомерПиктограммы> - (Число) Передается по значению.  номер пиктограммы в установленном наборе
@ЗАМЕЧАНИЕ: 
При вызове процедуры в параметр НомерПиктограммы передается значение, вычесленное системой. Если изменить значение этой переменной внутри процедуры, то для соответствующей строки многострочной части будет установлена пиктограмма в соответствии с этим новым значением. Внутри процедуры доступны реквизиты строки многострочной части (в частности ТекущийДокумент, ТекущийЭлемент() и т.д.). Выполнение процедуры замедляет вывод на экран и обновление формы списка, поэтому рекомендуется использовать в этой процедуре минимум вычислений. Эта процедура подразумевается, как дополнение метода УстановитьКартинкуМногострочнойЧасти / SetTablePicture для установки собственных пиктограмм в многострочной части формы списка.
"
    },
    {"Item","AST","ПослеЗакрытия","OnClosed",
"Процедура ПослеЗакрытия(<?>)КонецПроцедуры",
"Procedure OnClosed(<?>)EndProcedure",
"@Синтаксис:
Процедура ПослеЗакрытия(<Контекст>)КонецПроцедуры
@Назначение:
Предопределенная процедура после физического закрытия окна формы в системе.
@Параметры:
<Контекст> - контекст закрытой формы
@ЗАМЕЧАНИЕ: 
Предопределенная процедура вызывается после физического разрушения окна формы. Предотвратить закрытие окна в этой процедуре невозможно.
"
    },
    {"Item","AST","ПослеОбновленияФормы","OnRefresh",
"Процедура ПослеСозданияФормы(<?>)КонецПроцедуры",
"Procedure OnCreateForm(<?>)EndProcedure",
"@Синтаксис:
Процедура ПослеОбновленияФормы(<Контекст>)КонецПроцедуры
@Назначение:
Предопределенная процедура вызывается при обновлении формы, после выполнения форму текстовых реквизитов формы.
@Параметры:
<Контекст> - контекст обновленной формы
"
    },
    {"Item","AST","ПослеОткрытия","OnActivate",
"Процедура ПослеОткрытия(<?>)
КонецПроцедуры",
"Procedure OnActivate(<?>)
EndProcedure",
"@Синтаксис:
Процедура ПослеОткрытия(<Контекст>)
КонецПроцедуры
@Назначение:
Предопределенная процедура вызывается после физического создания окна формы в системе, когда окно формы создано, полностью проинициализировано и отображено на экране.
@Параметры:
<Контекст> - контекст открытой формы
@ПРИМЕР: 
Процедура ПослеОткрытия(Конт)
        ФормаРасш = СоздатьОбъект(""РасширениеФормы""); 
        ФормаРасш.УстановитьФорму(Конт.Форма);
        ФормаРасш.ФиксироватьМногострочнуюЧасть(2);
КонецПроцедуры
"
    },
    {"Item","AST","ПослеСозданияФормы","OnCreateForm",
"Процедура ПослеСозданияФормы(<?>)КонецПроцедуры",
"Procedure OnCreateForm(<?>)EndProcedure",
"@Синтаксис:
Процедура ПослеСозданияФормы(<Контекст>)КонецПроцедуры
@Назначение:
Предопределенная процедура вызывается после физического создания окна формы в системе, когда окно формы создано, но еще не полностью проинициализоровано и не отображено на экране.
@Параметры:
<Контекст> - контекст открытой формы
@ЗАМЕЧАНИЕ: 
В этой процедуре (и во всех процедурах, вызываемых после нее) можно вызывать методы, которые помечены как ""работает только после физического открытия окна формы"".
"
    },
    {"Item","AST","ПриДвиженииМыши","OnMouseMove",
"Процедура ПриДвиженииМыши(<?>,,,,)
КонецПроцедуры",
"Procedure OnMouseMove(<?>,,,,)
EndProcedure",
"@Синтаксис:
Процедура ПриДвиженииМыши(<Контекст>,<Состояние>,<КоординатаПоГоризонтали>,<КоординатаПоВертикали>,<ФСО>)
КонецПроцедуры
@Назначение:
Предопределенная процедура движения мыши поверх формы.
@Параметры:
<Контекст> - контекст формы
<Состояние> - (Число) битовая маска, показывающаяя текущее состояние кнопок мыши
<КоординатаПоГоризонтали> - (Число значение координаты курсора мыши по горизонтальной оси (Х)) 
<КоординатаПоВертикали> - (Число значение координаты курсора мыши по вертикальной оси (Y)) 
<ФСО> - (Число) флаг стандартной обработки. Изначально равен 1. Если в теле процедуры сбросить
значение в 0, то стандартная обработка события не вызывается.
@ПРИМЕР: 
Процедура ПриДвиженииМыши(конт, сост, х, у)
        Состояние( х =  + х +  у =  + у +  сост =  + сост);
КонецПроцедуры
"
    },
    {"Item","AST","ПриДвойномНажатииЛевойКнопки","OnLButtonDblClk",
"Процедура ПриДвойномНажатииЛевойКнопки(<?>,,,,)
КонецПроцедуры",
"Procedure OnLButtonDblClk(<?>,,,,)
EndProcedure",
"@Синтаксис:
Процедура ПриДвойномНажатииЛевойКнопки(<Контекст>,<Состояние>,<КоординатаПоГоризонтали>,<КоординатаПоВертикали>,<ФСО>)
КонецПроцедуры
@Назначение:
Предопределенная процедура при двойном клике левой кнопкой мыши.
@Параметры:
<Контекст> - контекст формы
<Состояние> - (Число) битовая маска, показывающаяя текущее состояние кнопок мыши
<КоординатаПоГоризонтали> - (Число значение координаты курсора мыши по горизонтальной оси (Х)) 
<КоординатаПоВертикали> - (Число значение координаты курсора мыши по вертикальной оси (Y)) 
<ФСО> - (Число) флаг стандартной обработки. Изначально равен 1. Если в теле процедуры сбросить
значение в 0, то стандартная обработка события не вызывается
@ПРИМЕР: 
Процедура ПриДвойномНажатииЛевойКнопки(конт, сост, х, у)
        Предупреждение(Двойной левый клик по форме.);
КонецПроцедуры
"
    },
    {"Item","AST","ПриДвойномНажатииПравойКнопки","OnRButtonDblClk",
"Процедура ПриДвойномНажатииПравойКнопки(<?>,,,,)
КонецПроцедуры",
"Procedure OnRButtonDblClk(<?>,,,,)
EndProcedure",
"@Синтаксис:
Процедура ПриДвойномНажатииПравойКнопки(<Контекст>,<Состояние>,<КоординатаПоГоризонтали>,<КоординатаПоВертикали>,<ФСО>)
КонецПроцедуры
@Назначение:
Предопределенная процедура при двойном клике правой кнопкой мыши.
@Параметры:
<Контекст> - контекст формы
<Состояние> - (Число) битовая маска, показывающаяя текущее состояние кнопок мыши
<КоординатаПоГоризонтали> - (Число значение координаты курсора мыши по горизонтальной оси (Х)) 
<КоординатаПоВертикали> - (Число значение координаты курсора мыши по вертикальной оси (Y)) 
<ФСО> - (Число) флаг стандартной обработки. Изначально равен 1. Если в теле процедуры сбросить
значение в 0, то стандартная обработка события не вызывается
@ПРИМЕР: 
Процедура ПриДвойномНажатииПравойКнопки(конт, сост, х, у)
        Предупреждение(Двойной правый клик по форме.);
КонецПроцедуры
"
    },
    {"Item","AST","ПриЗагрузкеВнешнегоОтчета","OnLoadAsExternalForm",
"Процедура ПриЗагрузкеВнешнегоОтчета(<?>)КонецПроцедуры",
"Procedure OnLoadAsExternalForm(<?>)EndProcedure",
"@Синтаксис:
Процедура ПриЗагрузкеВнешнегоОтчета(<ИмяФайлаОтчета>)КонецПроцедуры
@Назначение:
Предопределенная процедура вызывается при загрузке внешнего отчета.
@Параметры:
<ИмяФайлаОтчета> - (Строка) Передается по значению.  полный путь к файлу отчета (вместе с собственно именем файла)
@ЗАМЕЧАНИЕ: 
Если в процедуре установить статус возврата в ноль, то внешний отчет не будет загружен.
"
    },
    {"Item","AST","ПриЗагрузкеМодуляФормы","",
"Процедура ПриЗагрузкеМодуляФормы(<?>) КонецПроцедуры",
"",
"@Синтаксис:
Процедура ПриЗагрузкеМодуляФормы(<ИмяОбъекта>)КонецПроцедуры
@Назначение:
Предопределенная процедура вызывается при загрузке модуля формы.
@Параметры:
<ИмяОбъекта> - (Строка) Передается по значению.  полный путь к объекту, для которого загружается форма
@ЗАМЕЧАНИЕ: 
В качестве параметра в процедуру передается полный путь к загружаемому объекту внутри md ( список всех форм можно получить с помощью метода СписокВсехФорм / AllFormsList ). Если внутри процедуры изменить значение параметра ИмяОбъекта, то загрузится модуль в соответствии с этим новым путем. Если новый путь задан неверно, то будет загружен тот модуль, который предполагался изначально.
"
    },
    {"Item","AST","ПриЗагрузкеФормы","",
"Процедура ПриЗагрузкеФормы(<?>) КонецПроцедуры",
"",
"@Синтаксис:
Процедура ПриЗагрузкеФормы(<ИмяОбъекта>)КонецПроцедуры
@Назначение:
Предопределенная процедура вызывается при загрузке диалога формы.
@Параметры:
<ИмяОбъекта> - (Строка) полный путь к объекту, для которого загружается форма
@ЗАМЕЧАНИЕ: 
В качестве параметра в процедуру передается полный путь к загружаемому объекту внутри md ( список всех форм можно получить с помощью метода СписокВсехФорм / AllFormsList ). Если внутри процедуры изменить значение параметра ИмяОбъекта, то загрузится диалог в соответствии с этим новым путем. Если новый путь задан неверно, то будет загружен тот диалог, который предполагался изначально
"
    },
    {"Item","AST","ПриИзмененииРазмераОкна","OnSize",
"Процедура ПриИзмененииРазмераОкна(<?>,,,)
КонецПроцедуры",
"Procedure OnSize(<?>,,,)
EndProcedure",
"@Синтаксис:
Процедура ПриИзмененииРазмераОкна(<Контекст>,<ТипСобытия>,<Ширина>,<Высота>)
КонецПроцедуры
@Назначение:
Предопределенная процедура при изменении размеров окна формы.
@Параметры:
<Контекст> - контекст формы
<ТипСобытия> - определяет тип запрошенного изменения размеров.
Этот параметр может принимать одно из следующих значений:
0 - Окно было изменено, но без минимизации или максимизации.
1 - Окно было свернуто (минимизировано).
2 - Окно было развернуто (максимизировано).
<Ширина> - новая ширина формы
<Высота> - новая высота формы
@ПРИМЕР: 
Процедура ПриИзмененииРазмераОкна(Конт, ТипСобытия,Ширина,Высота)
  Если ТипСобытия = 1 Тогда
    Сообщить(Окно формы свернуто.);
  ИначеЕсли ТипСОбытия = 2 Тогда
    Сообщить(Окно формы развернуто.);
  Иначе
    Сообщить(Новый размер формы:+Ширина+х+Высота);
  КонецЕсли;
КонецПроцедуры
"
    },
    {"Item","AST","ПриНажатииКнопкиКлавиатуры","OnChar",
"Процедура ПриНажатииКнопкиКлавиатуры(<?>,,,,,,)
КонецПроцедуры",
"Procedure OnChar(<?>,,,,,,)
EndProcedure",
"@Синтаксис:
Процедура ПриНажатииКнопкиКлавиатуры(<Контекст>,<КодКлавиши>,<Alt>,<Shift>,<Ctrl>,<Символ>,<ФСО>)
КонецПроцедуры
@Назначение:
Предопределенная процедура при нажатии кнопки клавиатуры.
@Параметры:
<Контекст> - контекст формы
<КодКлавиши> - код нажатой кнопки клавиатуры.
<Alt> - флаг нажатия кнопки
<Shift> - флаг нажатия кнопки
<Ctrl> - флаг нажатия кнопки
<Символ> - символ нажатой кнопки в формате ASCII.
<ФСО> - флаг стандартной обработки. Изначально равен 1. Если в теле процедуры сбросить
значение в 0, то стандартная обработка события не вызывается.
<> - 
@ПРИМЕР: 
Процедура ПриНажатииКнопкиКлавиатуры(конт, код, _а, _ш, _к)
        Предупреждение(Нажата кнопка клавиатуры.);
КонецПроцедуры
"
    },
    {"Item","AST","ПриНажатииЛевойКнопки","OnLButtonDown",
"Процедура ПриНажатииЛевойКнопки(<?>,,,,)
КонецПроцедуры",
"Procedure OnLButtonDown(<?>,,,,)
EndProcedure",
"@Синтаксис:
Процедура ПриНажатииЛевойКнопки(<Контекст>,<Состояние>,<КоординатаПоГоризонтали>,<КоординатаПоВертикали>,<ФСО>)
КонецПроцедуры
@Назначение:
Предопределенная процедура при нажатии левой кнопки мыши.
@Параметры:
<Контекст> - контекст формы
<Состояние> - (Число) битовая маска, показывающаяя текущее состояние кнопок мыши
<КоординатаПоГоризонтали> - (Число значение координаты курсора мыши по горизонтальной оси (Х)) 
<КоординатаПоВертикали> - (Число значение координаты курсора мыши по вертикальной оси (Y)) 
<ФСО> - (Число) флаг стандартной обработки. Изначально равен 1. Если в теле процедуры сбросить
значение в 0, то стандартная обработка события не вызывается
@ПРИМЕР: 
Процедура ПриНажатииЛевойКнопки(конт, сост, х, у)
        Сообщить(Нажата левая кнопка мыши.);
КонецПроцедуры
"
    },
    {"Item","AST","ПриНажатииПравойКнопки","OnRButtonDown",
"Процедура ПриНажатииПравойКнопки(<?>,,,,)
КонецПроцедуры",
"Procedure OnRButtonDown(<?>,,,,)
EndProcedure",
"@Синтаксис:
Процедура ПриНажатииПравойКнопки(<Контекст>,<Состояние>,<КоординатаПоГоризонтали>,<КоординатаПоВертикали>,<ФСО>)
КонецПроцедуры
@Назначение:
Предопределенная процедура при нажатии правой кнопки мыши.
@Параметры:
<Контекст> - контекст формы
<Состояние> - (Число) битовая маска, показывающаяя текущее состояние кнопок мыши
<КоординатаПоГоризонтали> - (Число значение координаты курсора мыши по горизонтальной оси (Х)) 
<КоординатаПоВертикали> - (Число значение координаты курсора мыши по вертикальной оси (Y)) 
<ФСО> - (Число) флаг стандартной обработки. Изначально равен 1. Если в теле процедуры сбросить
значение в 0, то стандартная обработка события не вызывается
@ПРИМЕР: 
Процедура ПриНажатииПравойКнопки(конт, сост, х, у)
        Сообщить(Нажата правая кнопка мыши.);
КонецПроцедуры
"
    },
    {"Item","AST","ПриНачалеБлокировкиОбъекта","",
"Процедура ПриНачалеБлокировкиОбъекта(<?>)КонецПроцедуры",
"",
"@Синтаксис:
Процедура ПриНачалеБлокировкиОбъекта(<Объект>)КонецПроцедуры
@Назначение:
Предопределенная процедура
@Параметры:
<Объект> - (Объект) объект который блокируется
"
    },
    {"Item","AST","ПриОтжатииЛевойКнопки","OnLButtonUp",
"Процедура ПриОтжатииЛевойКнопки(<?>,,,,)
КонецПроцедуры",
"Procedure OnLButtonUp(<?>,,,,)
EndProcedure",
"@Синтаксис:
Процедура ПриОтжатииЛевойКнопки(<Контекст>,<Состояние>,<КоординатаПоГоризонтали>,<КоординатаПоВертикали>,<ФСО>)
КонецПроцедуры
@Назначение:
Предопределенная процедура вызывается когда отпущена левая кнопка мыши.
@Параметры:
<Контекст> - контекст формы
<Состояние> - (Число) битовая маска, показывающаяя текущее состояние кнопок мыши
<КоординатаПоГоризонтали> - (Число значение координаты курсора мыши по горизонтальной оси (Х)) 
<КоординатаПоВертикали> - (Число значение координаты курсора мыши по вертикальной оси (Y)) 
<ФСО> - (Число) флаг стандартной обработки. Изначально равен 1. Если в теле процедуры сбросить
значение в 0, то стандартная обработка события не вызывается
@ПРИМЕР: 
Процедура ПриОтжатииЛевойКнопки(конт, сост, х, у)
        Сообщить(Отпущена левая кнопка мыши.);
КонецПроцедуры
"
    },
    {"Item","AST","ПриОтжатииПравойКнопки","OnRButtonUp",
"Процедура ПриОтжатииПравойКнопки(<?>,,,,)
КонецПроцедуры",
"Procedure OnRButtonUp(<?>,,,,)
EndProcedure",
"@Синтаксис:
Процедура ПриОтжатииПравойКнопки(<Контекст>,<Состояние>,<КоординатаПоГоризонтали>,<КоординатаПоВертикали>,<ФСО>)
КонецПроцедуры
@Назначение:
Предопределенная процедура вызывается когда отпущена правая кнопка мыши.
@Параметры:
<Контекст> - контекст формы
<Состояние> - (Число) битовая маска, показывающаяя текущее состояние кнопок мыши
<КоординатаПоГоризонтали> - (Число значение координаты курсора мыши по горизонтальной оси (Х)) 
<КоординатаПоВертикали> - (Число значение координаты курсора мыши по вертикальной оси (Y)) 
<ФСО> - (Число) флаг стандартной обработки. Изначально равен 1. Если в теле процедуры сбросить
значение в 0, то стандартная обработка события не вызывается
@ПРИМЕР: 
Процедура ПриОтжатииПравойКнопки(конт, сост, х, у)
        Сообщить(Отпущена правая кнопка мыши.);
КонецПроцедуры
"
    },
    {"Item","AST","ПриПечатиТаблицы","",
"Процедура ПриНачалеБлокировкиОбъекта(<?>,,)КонецПроцедуры",
"",
"@Синтаксис:
Процедура ПриНачалеБлокировкиОбъекта(<Таблица>,<ФлагПредпросмотра>,<Заголовок>)КонецПроцедуры
@Назначение:
Предопределенная процедура
@Параметры:
<Таблица> - (Таблица) объект ""Таблица""
<ФлагПредпросмотра> - (Число) флаг предпросмотра
<Заголовок> - (Строка) заголовок таблицы
"
    },
    {"Item","AST","Событие_OnDrop","",
"Процедура Событие_OnDrop(СписокИменФайлов)
	<?> 
КонецПроцедуры",
"",
"@Синтаксис:
Процедура Событие_OnDrop(СписокИменФайлов) КонецПроцедуры
@Назначение:
Событие, возникающее при переносе файлов (Drag-n-Drop), например, из проводника в окно 1С
@Параметры:
<СписокИменФайлов> - (СписокЗначений) объект ""СписокЗначений"" с именами переданных файлов
"
    },
    {"Item","AST","Событие_OnURLDrop","",
"Процедура Событие_OnURLDrop(СтрокаURL) 
	<?> 
КонецПроцедуры",
"",
"@Синтаксис:
Процедура Событие_OnURLDrop(СтрокаURL) КонецПроцедуры
@Назначение:
Событие, возникающее при переносе ссылок (Drag-n-Drop) из InternetExplorer, например, из проводника в окно 1С
@Параметры:
<СтрокаURL> - (Строка) Переданная ссылка
"
    },
   },
   {"Folder","AST","Локальные","",
    {"Item","AST","ПиктограммаМногострочнойЧасти","MultiLinePic",
"Процедура ПиктограммаМногострочнойЧасти(<?>)КонецПроцедуры",
"Procedure MultiLinePic()EndProcedure",
"@Синтаксис:
Процедура ПиктограммаМногострочнойЧасти(НомерПиктограммы)КонецПроцедуры
@Назначение:
Предопределенная процедура вызывается при вычислении номера системной пиктограммы в многострочной части формы списка.
@Параметры:
<> - 
@ОПИСАНИЕ: 
Пример:

Процедура ПиктограммаМногострочнойЧасти(НомерПиктограммы)
        Если ЭтоГруппа() = 1 Тогда
                НомерПиктограммы = 1;
        Иначе
                НомерПиктограммы = 2;
        КонецЕсли;
КонецПроцедуры
@ЗАМЕЧАНИЕ: 
При вызове процедуры в параметр НомерПиктограммы передается значение, вычесленное системой. Если изменить значение этой переменной внутри процедуры, то для соответствующей строки многострочной части будет установлена пиктограмма в соответствии с этим новым значением. Внутри процедуры доступны реквизиты строки многострочной части (в частности ТекущийДокумент, ТекущийЭлемент() и т.д.). Выполнение процедуры замедляет вывод на экран и обновление формы списка, поэтому рекомендуется использовать в этой процедуре минимум вычислений. Эта процедура подразумевается, как дополнение метода УстановитьКартинкуМногострочнойЧасти / SetTablePicture для установки собственных пиктограмм в многострочной части формы списка.
"
    },
    {"Item","AST","ПослеЗакрытия","OnClosed",
"Процедура ПослеЗакрытия()КонецПроцедуры",
"Procedure OnClosed()EndProcedure",
"@Синтаксис:
Процедура ПослеОткрытия()КонецПроцедуры
@Назначение:
Предопределенная процедура вызывается после физического разрушения окна формы. Предотвратить закрытие окна в этой процедуре невозможно.
"
    },
    {"Item","AST","ПослеОбновленияФормы","OnRefresh",
"Процедура ПослеОбновленияФормы()КонецПроцедуры",
"Procedure OnRefresh()EndProcedure",
"@Синтаксис:
Процедура ПослеОбновленияФормы()КонецПроцедуры
@Назначение:
Предопределенная процедура вызывается при обновлении формы, после выполнения форму текстовых реквизитов формы.
"
    },
    {"Item","AST","ПослеОткрытия","OnActivate",
"Процедура ПослеОткрытия()
КонецПроцедуры",
"Procedure OnActivate()
EndProcedure",
"@Синтаксис:
Процедура ПослеОткрытия()
КонецПроцедуры
@Назначение:
Предопределенная процедура после физического создания окна формы в системе.
@ЗАМЕЧАНИЕ: 
В этой процедуре можно вызывать методы, которые помечены как работает только
после физического открытия окна формы.
@ПРИМЕР: 
Процедура ПослеОткрытия()
        ФормаРасш = СоздатьОбъект(""РасширениеФормы""); 
        ФормаРасш.УстановитьФорму(Форма);
        ФормаРасш.ФиксироватьМногострочнуюЧасть(2);
КонецПроцедуры
"
    },
    {"Item","AST","ПослеСозданияФормы","OnCreateForm",
"Процедура ПослеСозданияФормы()КонецПроцедуры",
"Procedure OnCreateForm()EndProcedure",
"@Синтаксис:
Процедура ПослеСозданияФормы()КонецПроцедуры
@Назначение:
Предопределенная процедура вызывается после физического создания окна формы в системе, когда окно формы создано, но еще не полностью проинициализоровано и не отображено на экране.
@ЗАМЕЧАНИЕ: 
В этой процедуре (и во всех процедурах, вызываемых после нее) можно вызывать методы, которые помечены как ""работает только после физического открытия окна формы"".
"
    },
    {"Item","AST","ПриАктивацииОкна","",
"Процедура ПриАктивацииОкна()КонецПроцедуры",
"",
"@Назначение:
Предопределенная процедура при активации окна
"
    },
    {"Item","AST","ПриДвиженииМыши","OnMouseMove",
"Процедура ПриДвиженииМыши(<?>,,,)
КонецПроцедуры",
"Procedure OnMouseMove(<?>,,,)
EndProcedure",
"@Синтаксис:
Процедура ПриДвиженииМыши(<Состояние>,<КоординатаПоГоризонтали>,<КоординатаПоВертикали>,<ФСО>)
КонецПроцедуры
@Назначение:
Предопределенная процедура движения мыши поверх формы.
@Параметры:
<Состояние> - битовая маска, показывающаяя текущее состояние кнопок мыши
<КоординатаПоГоризонтали> - значение координаты курсора мыши по горизонтальной оси (Х)
<КоординатаПоВертикали> - значение координаты курсора мыши по вертикальной оси (Y)
<ФСО> - флаг стандартной обработки. Изначально равен 1. Если в теле процедуры сбросить
значение в 0, то стандартная обработка события не вызывается
@ПРИМЕР: 
Процедура ПриДвиженииМыши(сост, х, у)
        Состояние( х =  + х +  у =  + у +  сост =  + сост);
КонецПроцедуры
"
    },
    {"Item","AST","ПриДвойномНажатииЛевойКнопки","OnLButtonDblClk",
"Процедура ПриДвойномНажатииЛевойКнопки(<?>,,,)
КонецПроцедуры",
"Procedure OnLButtonDblClk(<?>,,,)
EndProcedure",
"@Синтаксис:
Процедура ПриДвойномНажатииЛевойКнопки(<Состояние>,<КоординатаПоГоризонтали>,<КоординатаПоВертикали>,<ФСО>)
КонецПроцедуры
@Назначение:
Предопределенная процедура при двойном клике левой кнопкой мыши.
@Параметры:
<Состояние> - битовая маска, показывающаяя текущее состояние кнопок мыши.
<КоординатаПоГоризонтали> - значение координаты курсора мыши по горизонтальной оси (Х).
<КоординатаПоВертикали> - значение координаты курсора мыши по вертикальной оси (Y).
<ФСО> - Передается по значению.  флаг стандартной обработки. Изначально равен 1. Если в теле процедуры сбросить
значение в 0, то стандартная обработка события не вызывается.
@ПРИМЕР: 
Процедура ПриДвойномНажатииЛевойКнопки(сост, х, у)
        Предупреждение(Двойной левый клик по форме.);
КонецПроцедуры
"
    },
    {"Item","AST","ПриДвойномНажатииПравойКнопки","OnRButtonDblClk",
"Процедура ПриДвойномНажатииПравойКнопки(<?>,,,)
КонецПроцедуры",
"Procedure OnRButtonDblClk(<?>,,,)
EndProcedure",
"@Синтаксис:
Процедура ПриДвойномНажатииПравойКнопки(<Состояние>,<КоординатаПоГоризонтали>,<КоординатаПоВертикали>,<ФСО>)
КонецПроцедуры
@Назначение:
Предопределенная процедура при двойном клике правой кнопкой мыши.
@Параметры:
<Состояние> - битовая маска, показывающаяя текущее состояние кнопок мыши
<КоординатаПоГоризонтали> - значение координаты курсора мыши по горизонтальной оси (Х)
<КоординатаПоВертикали> - значение координаты курсора мыши по вертикальной оси (Y)
<ФСО> - флаг стандартной обработки. Изначально равен 1. Если в теле процедуры сбросить
значение в 0, то стандартная обработка события не вызывается
@ПРИМЕР: 
Процедура ПриДвойномНажатииПравойКнопки(сост, х, у)
        Предупреждение(Двойной правый клик по форме.);
КонецПроцедуры
"
    },
    {"Item","AST","ПриДеактивацииОкна","",
"Процедура ПриДеактивацииОкна()КонецПроцедуры",
"",
"@Назначение:
Предопределенная процедура при деактивации окна
"
    },
    {"Item","AST","ПриЗаписиНастройки","",
"Процедура ПриЗаписиНастройки(<?>,)КонецПроцедуры",
"",
"@Назначение:
Предопределенная процедура при записи настройки формы
@Параметры:
<Имя> - 
<> - 
"
    },
    {"Item","AST","ПриИзмененииРазмераОкна","OnSize",
"Процедура ПриИзмененииРазмераОкна(<?>,,)
КонецПроцедуры",
"Procedure OnSize(<?>,,)
EndProcedure",
"@Синтаксис:
Процедура ПриИзмененииРазмераОкна(<ТипСобытия>,<Ширина>,<Высота>)
КонецПроцедуры
@Назначение:
Предопределенная процедура при изменении размеров окна формы.
@Параметры:
<ТипСобытия> - определяет тип запрошенного изменения размеров.
Этот параметр может принимать одно из следующих значений:
0 - Окно было изменено, но не без минимизации или максимизации.
1 - Окно было свернуто(минимизировано).
2 - Окно было развернуто(максимизировано).
<Ширина> - новая ширина ОКНА (!!!). Ширина формы полученная методом ""Расширение формы"" отличается от данной ширины.
<Высота> - новая высота ОКНА (!!!). Ширина формы полученная методом ""Расширение формы"" отличается от данной ширины.
@ПРИМЕР: 
Процедура ПриИзмененииРазмераОкна(ТипСобытия,Ширина,Высота)
  Если ТипСобытия = 1 Тогда
    Сообщить(Окно формы свернуто.);
  ИначеЕсли ТипСОбытия = 2 Тогда
    Сообщить(Окно формы развернуто.);
  Иначе
    Сообщить(Новый размер формы:+Ширина+х+Высота);
  КонецЕсли;
КонецПроцедуры
"
    },
    {"Item","AST","ПриНажатииКнопкиКлавиатуры","OnChar",
"Процедура ПриНажатииКнопкиКлавиатуры(<?>,,,,,)
КонецПроцедуры",
"Procedure OnChar(<?>,,,,,)
EndProcedure",
"@Синтаксис:
Процедура ПриНажатииКнопкиКлавиатуры(<КодКлавиши>,<Alt>,<Shift>,<Ctrl>,<Символ>,<ФСО>)
КонецПроцедуры
@Назначение:
Предопределенная процедура при нажатии кнопки клавиатуры.
@Параметры:
<КодКлавиши> - код нажатой кнопки клавиатуры.
<Alt> - флаг нажатия кнопки
<Shift> - флаг нажатия кнопки
<Ctrl> - флаг нажатия кнопки
<Символ> - символ нажатой кнопки в формате ASCII.
<ФСО> - флаг стандартной обработки. Изначально равен 1. Если в теле процедуры сбросить
значение в 0, то стандартная обработка события не вызывается.
<> - 
@ПРИМЕР: 
Процедура ПриНажатииКнопкиКлавиатуры(код, _а, _ш, _к)
        Предупреждение(Нажата кнопка клавиатуры.);
КонецПроцедуры
"
    },
    {"Item","AST","ПриНажатииЛевойКнопки","OnLButtonDown",
"Процедура ПриНажатииЛевойКнопки(<?>,,,)
КонецПроцедуры",
"Procedure OnLButtonDown(<?>,,,)
EndProcedure",
"@Синтаксис:
Процедура ПриНажатииЛевойКнопки(<Состояние>,<КоординатаПоГоризонтали>,<КоординатаПоВертикали>,<ФСО>)
КонецПроцедуры
@Назначение:
Предопределенная процедура при нажатии левой кнопки мыши.
@Параметры:
<Состояние> - битовая маска, показывающаяя текущее состояние кнопок мыши
<КоординатаПоГоризонтали> - значение координаты курсора мыши по горизонтальной оси (Х)
<КоординатаПоВертикали> - значение координаты курсора мыши по вертикальной оси (Y)
<ФСО> - флаг стандартной обработки. Изначально равен 1. Если в теле процедуры сбросить
значение в 0, то стандартная обработка события не вызывается.
@ПРИМЕР: 
Процедура ПриНажатииЛевойКнопки(сост, х, у)
        Сообщить(Нажата левая кнопка мыши.);
КонецПроцедуры
"
    },
    {"Item","AST","ПриНажатииПравойКнопки","OnRButtonDown",
"Процедура ПриНажатииПравойКнопки(<?>,,,)
КонецПроцедуры",
"Procedure OnRButtonDown(<?>,,,)
EndProcedure",
"@Синтаксис:
Процедура ПриНажатииПравойКнопки(<Состояние>,<КоординатаПоГоризонтали>,<КоординатаПоВертикали>,<ФСО>)
КонецПроцедуры
@Назначение:
Предопределенная процедура при нажатии правой кнопки мыши.
@Параметры:
<Состояние> - битовая маска, показывающаяя текущее состояние кнопок мыши
<КоординатаПоГоризонтали> - значение координаты курсора мыши по горизонтальной оси (Х)
<КоординатаПоВертикали> - значение координаты курсора мыши по вертикальной оси (Y)
<ФСО> - флаг стандартной обработки. Изначально равен 1. Если в теле процедуры сбросить
значение в 0, то стандартная обработка события не вызывается.
@ПРИМЕР: 
Процедура ПриНажатииПравойКнопки(сост, х, у)
        Сообщить(Нажата правая кнопка мыши.);
КонецПроцедуры
"
    },
    {"Item","AST","ПриОтжатииКнопкиКлавиатуры","",
"Процедура ПриОтжатииКнопкиКлавиатуры() КонецПроцедуры",
"",
"@Параметры:
<КодКлавиши> - код нажатой кнопки клавиатуры.
<Alt> - флаг нажатия кнопки
<Shift> - флаг нажатия кнопки
<Ctrl> - флаг нажатия кнопки
<Символ> - символ нажатой кнопки в формате ASCII.
<ФСО> - флаг стандартной обработки. Изначально равен 1. Если в теле процедуры сбросить
значение в 0, то стандартная обработка события не вызывается.
"
    },
    {"Item","AST","ПриОтжатииЛевойКнопки","OnLButtonUp",
"Процедура ПриОтжатииЛевойКнопки(<?>,,,) КонецПроцедуры",
"Procedure OnLButtonUp(<?>,,,) EndProcedure",
"@Синтаксис:
Процедура ПриОтжатииЛевойКнопки(<Состояние>,<КоординатаПоГоризонтали>,<КоординатаПоВертикали>,<ФСО>)
КонецПроцедуры
@Назначение:
Предопределенная процедура вызывается когда отпущена левая кнопка мыши.
@Параметры:
<Состояние> - битовая маска, показывающаяя текущее состояние кнопок мыши.
<КоординатаПоГоризонтали> - значение координаты курсора мыши по горизонтальной оси (Х).
<КоординатаПоВертикали> - значение координаты курсора мыши по вертикальной оси (Y).
<ФСО> - флаг стандартной обработки. Изначально равен 1. Если в теле процедуры сбросить
значение в 0, то стандартная обработка события не вызывается.
@ПРИМЕР: 
Процедура ПриОтжатииЛевойКнопки(сост, х, у)
        Сообщить(Отпущена левая кнопка мыши.);
КонецПроцедуры
"
    },
    {"Item","AST","ПриОтжатииПравойКнопки","OnRButtonUp",
"Процедура ПриОтжатииПравойКнопки(<?>,,,) КонецПроцедуры",
"Procedure OnRButtonUp(<?>,,,) EndProcedure",
"@Синтаксис:
Процедура ПриОтжатииПравойКнопки(<Состояние>,<КоординатаПоГоризонтали>,<КоординатаПоВертикали>,<ФСО>)
КонецПроцедуры
@Назначение:
Предопределенная процедура вызывается когда отпущена правая кнопка мыши.
@Параметры:
<Состояние> - битовая маска, показывающаяя текущее состояние кнопок мыши
<КоординатаПоГоризонтали> - значение координаты курсора мыши по горизонтальной оси (Х)
<КоординатаПоВертикали> - Передается по значению.  значение координаты курсора мыши по вертикальной оси (Y)
<ФСО> - Передается по значению.  флаг стандартной обработки. Изначально равен 1. Если в теле процедуры сбросить
значение в 0, то стандартная обработка события не вызывается.
@ПРИМЕР: 
Процедура ПриОтжатииПравойКнопки(сост, х, у)
        Сообщить(Отпущена правая кнопка мыши.);
КонецПроцедуры
"
    },
    {"Item","AST","ПриЧтенииНастройки","",
"Процедура ПриЧтенииНастройки(<?>,) КонецПроцедуры",
"",
"@Назначение:
Предопределенная процедура при чтении настройки формы
@Параметры:
<Имя> - 
<> - 
"
    },
   },
   {"Folder","AST","Локальные ''''Дерево+Таблица'''''',","",
    {"Item","AST","ПослеРазворачиванияУзла","",
"Процедура ПослеРазворачиванияУзла(<НомерСтроки>) КонецПроцедуры",
"",
"@Синтаксис:
ПослеРазворачиванияУзла(<НомерСтроки>)
@Назначение:
Процедура вызывается после разворачивания ветви дерева, но до отображения этого действия на форме.
@Параметры:
НомерСтроки - строка с полным путем ветви дерева, которая раскрылась.
"
    },
    {"Item","AST","ПослеСворачиванияУзла","OnItemCollapsed",
"Процедура ПослеСворачиванияУзла(<?>)
КонецПроцедуры",
"Procedure OnItemCollapsed(<?>)
EndProcedure",
"@Синтаксис:
Процедура ПослеСворачиванияУзла(<НомерСтроки>)
КонецПроцедуры
@Назначение:
Процедура вызывается после сворачивания ветви дерева, но до отображения этого действия на форме.
@Параметры:
<НомерСтроки> - строка с полным путем ветви дерева, которая свернулась
"
    },
    {"Item","AST","ПриНажатииЛевойКнопкиНадДеревом","OnLButtonOverTree",
"Процедура ПриНажатииЛевойКнопкиНадДеревом(<?>,)КонецПроцедуры",
"Procedure OnLButtonOverTree(<?>,)EndProcedure",
"@Синтаксис:
Процедура ПриНажатииЛевойКнопкиНадДеревом(<НомерСтроки>,<НомерКолонки>)
КонецПроцедуры
@Назначение:
Процедура вызывается при одиночном клике левой кнопкой мыши над объектом.
@Параметры:
<НомерСтроки> - строка с полным путем ветви дерева, над которой произошел клик
<НомерКолонки> - число - номер колонки, над которой произошел клик
@ЗАМЕЧАНИЕ: 
При двойном клике над объектом срабатывает функция, которая прописана в формуле перехватываемой таблицы значений.
"
    },
    {"Item","AST","ПриНажатииПравойКнопкиНадДеревом","OnRButtonOverTree",
"Процедура ПриНажатииПравойКнопкиНадДеревом(<?>,)КонецПроцедуры",
"Procedure OnRButtonOverTree(<?>,)EndProcedure",
"@Синтаксис:
Процедура ПриНажатииПравойКнопкиНадДеревом(<НомерСтроки>,<НомерКолонки>)КонецПроцедуры
@Назначение:
вызывается при одиночном клике правой кнопкой мыши над объектом.
@Параметры:
<НомерСтроки> - строка с полным путем ветви дерева, над которой произошел клик
<НомерКолонки> - число - номер колонки, над которой произошел клик
@ЗАМЕЧАНИЕ: 
При двойном клике над объектом срабатывает функция, которая прописана в формуле перехватываемой таблицы значений.
"
    },
    {"Item","AST","ПриРазворачиванииУзла","OnItemExpanding",
"Процедура ПриРазворачиванииУзла(<?>,<>)
КонецПроцедуры",
"Procedure OnItemExpanding(<?>,<>)
EndProcedure",
"@Синтаксис:
Процедура ПриРазворачиванииУзла(<НомерСтроки>,<ФСО>)
КонецПроцедуры
@Назначение:
Процедура вызывается при начале разворачивания ветви дерева.
@Параметры:
<НомерСтроки> - строка с полным путем ветви дерева, которая готовится к раскрытию
<ФСО> - флаг стандартной обработки. При установке его в 0 ветвь не будет раскрыта
"
    },
    {"Item","AST","ПриСворачиванииУзла","OnItemCollapsing",
"Процедура ПриСворачиванииУзла(<?>,<>)
КонецПроцедуры",
"Procedure OnItemCollapsing(<?>,<>)
EndProcedure",
"@Синтаксис:
Процедура ПриСворачиванииУзла(<НомерСтроки>,<ФСО>)
КонецПроцедуры
@Назначение:
Процедура вызывается при начале сворачивания ветви дерева.
@Параметры:
<НомерСтроки> - строка с полным путем ветви дерева, которая готовится к сворачиванию
<ФСО> - флаг стандартной обработки. При установке его в 0 ветвь не будет свернута
"
    },
   },
  },
  {"Folder","AST","Объект Таблица","доработка стандартного объекта",
   {"Folder","AST","Методы","",
    {"Item","AST","ИсходнаяТаблица","SourceTable",
"ИсходнаяТаблица(Имя, [Путь])",
"SourceTable(Имя, [Путь])",
"@Параметры:
Имя - строка, которая задает имя таблицы формы или имя файла содержащего таблицу;
Путь - строка с путем к форме, внутри которой необходимо произвести поиск таблицы. Внутренние формы задаются в виде ''MD.<ПолныйПутьВнутриMD>'' (например, ''MD.Документ.ПриходнаяНакладная.Форма''). Полный список внутренних форм можно получить вызвав метод СписокВсехФорм / AllFormsList. Строка вида ''<ИмяОбработки>
@MD'' преобразуется к виду ''MD.Обработка.<ИмяОбработки>.Форма''. Если строка пути начинается не с ''MD.'', то она воспринимается как путь к файлу внешнего отчета и исходная таблица ищется в этом файле. Необязательный параметр. По умолчанию - пустая строка.
Возвращает: 
число с результатом выполнения:
0 - при поиске исходной таблицы произошла ошибка,
1 - исходная таблица нормально установлена,
2 - произошел вызов штатной установки исходной таблицы с неизвестным результатом.
"
    },
    {"Item","AST","Опции","Options",
"Опции",
"Options",
"@Назначение:
Исправлена работа метода для таблиц на форме. В штатном варианте возможно фиксировать строки и колонки в таблице только до физического создания окна таблицы. Данная доработка позволяет менять фиксацию строк и колонок в уже выведенной таблице. Исправление происходит в автоматическом режиме и никаких дополнительных усилий со стороны программиста не требуется.
"
    },
   },
  },
  {"Folder","AST","Объект Сервис","Service",
   {"Folder","AST","Методы","",
    {"Item","AST","АктивныйКонтекст","ActiveContext",
"АктивныйКонтекст(<?>)",
"ActiveContext(<?>)",
"@Синтаксис:
АктивныйКонтекст(<Контекст>)
@Назначение:
Возвращает контекст активного в данный момент окна.
Возвращает 1 в случае успеха, 0 в противном случае.
@Параметры:
<Контекст> - Переменная, в которую записывается активный контекст.
@ПРИМЕР: 
Процедура ЗакрытьАктивноеОкно()
        Перем Конт;
        Сервис = СоздатьОбъект(""Сервис"");
        Если Сервис.АктивныйКонтекст(Конт) = 1 Тогда
                Конт.Форма.Закрыть(0);
        Иначе
                Сообщить(Активное окно не является контекстным или нет активного окна.);
        КонецЕсли;
КонецПроцедуры
"
    },
    {"Item","AST","Версия","Version",
"Версия(<?>)",
"Version(<?>)",
"@Синтаксис:
Версия(<ВерсияСтрокой>)
@Назначение:
Возвращает текущую версию компоненты в виде числа. Номер версии представляется в виде шестнадцатиричного числа, каждое слово которого - разряд номера версии.
@ПРИМЕР: 
Сервис = СоздатьОбъект(""Сервис"");
стрВерсия = ""
"
    },
    {"Item","AST","ВерсияОС","OSVersion",
"ВерсияОС()",
"OSVersion()",
"@Синтаксис:
ВерсияОС()
@Назначение:
Возвращает строку с описанием версии операционной системы.
@ПРИМЕР: 
Сервис = СоздатьОбъект(""Сервис"");
Сообщить(Сервис.ВерсияОС());
"
    },
    {"Item","AST","ВключитьРаскраскуТаблиц","ColourBrowse",
"ВключитьРаскраскуТаблиц(<?>)",
"ColourBrowse(<?>)",
"@Синтаксис:
ВключитьРаскраскуТаблиц(<ВыборочнаяРаскраска>)
@Назначение:
Разрешает раскраску таблиц.
@Параметры:
<ВыборочнаяРаскраска> - необязательный флаг, показывающий, что раскрашиваться будут
только таблицы явно указанных контекстов : 1 - включить выборочную раскраску.
По умолчанию - 0. Этот флаг может быть изменен путем установки/сброса флажка на странице
свойств компоненты (в главном меню: Сервис - Параметры).
@ЗАМЕЧАНИЕ: 
Если необходим функционал раскраски таблиц, то рекомендуется вызвать этот метод
при начале работы системы, т.к. раскрытые на момент выполнения метода таблицы не
перерисовываются сразу.
@ПРИМЕР: 
Сервис = СоздатьОбъект(""Сервис"");
Сервис.ВключитьРаскраскуТаблиц();
"
    },
    {"Item","AST","ИспользоватьПланРаскраски","UseColorPlan",
"ИспользоватьПланРаскраски(<?>)",
"UseColorPlan(<?>)",
"@Синтаксис:
ИспользоватьПланРаскраски(<ВклВыкл>)
@Назначение:
Включает/выключает функционал плана раскраски таблиц. Имеет смысл только после вызова метода ВключитьРаскраскуТаблиц().
@Параметры:
<ВклВыкл> - необязательный флаг, включения/выключения плана раскраски : 1 - включить, 0 - выключить.
По умолчанию - только вернуть текущее состояние.
@Возвращаемое значение:
Текущее состояние использования плана раскраски таблиц.
@ПРИМЕР: 
Сервис = СоздатьОбъект(""Сервис"");
Сервис.ИспользоватьПланРаскраски(1);
"
    },
    {"Item","AST","ВнешнееСобытие","AsyncEvent",
"ВнешнееСобытие(<?>,<>,<>)",
"AsyncEvent(<?>,<>,<>)",
"@Синтаксис:
ВнешнееСобытие(<Источник>,<Событие>,<Данные>)
@Назначение:
Вызов внешнего события компоненты. Событие обрабатывается в предопределенной процедуре ОбработкаВнешнегоСобытия() текущей активной формы.
@Параметры:
<Источник>,<Событие>,<Данные> - строки для передачи в процедуру ОбработкаВнешнегоСобытия().
<Событие> - 
<> - 
"
    },
    {"Item","AST","Воспроизвести","Play",
"Воспроизвести(<?>)",
"Play(<?>)",
"@Синтаксис:
Воспроизвести(<ИмяФайла>)
@Назначение:
Проигрывает wav-файл, переданный в качестве параметра.
@Параметры:
<ИмяФайла> - имя wav-файла, который тербуется проиграть.
"
    },
    {"Item","AST","ВыбратьЗначение","ChooseValue",
"ВыбратьЗначение(<?>,,,,,)",
"ChooseValue(<?>,,,,,)",
"@Синтаксис:
ВыбратьЗначение(СписокЗначений, Значение, Заголовок, СпособВыбора, Флаг, Картинка,ПараметрыЦвета)
@Назначение:
Метод предназначен для интерактивного выбора значения из многоуровневого списка. Многоуровневость обеспечивается вложенностью списков значений (см. Пример). Количество уровней не ограничено. Если выбор производится в меню, то значения с представлением ''-'' воспринимаются как разделители.
@Параметры:
Установка пиктограмм в списке значений
Добавляем в начале представления ''[icon:N]'', где N - порядковый номер пиктограммы в картинке. Если пиктограмма отображается, то строка ''[icon:N]'' от представления отрезается при выводе. В режиме выбора из меню (не пометка!) значения списка значений, на которых установлена пометка, считаются недоступными. При выборе из меню пункт списка значений с представлением ''|'' - переход на следующую колонку
- СписокЗначений - тип: СписокЗначений. Список значений, из которого необходимо произвести выбор;
- Значение - тип: Любой. Переменная, куда помещается результат выбора;
- Заголовок - тип: Строка. Заголовок диалогового окна выбора;
- СпособВыбора - тип: Число. Необязательный. Значение по умолчанию - 0. Способ выбора значения:
0 - выбор в виде многоуровневого меню;
1 - выбор в виде дерева.
- Флаг - тип: Число. Необязательный. Значение по умолчанию - 0. 
Для выбора в дереве: 1 - разрешить выбор групп; 0 - запретить.
Для выбора в меню: 0 - простой выбор; 1 - пометка значений; 2 - простой выбор (без привязки к активному реквизиту); 3 - пометка значений (без привязки к активному реквизиту). Если указано значение из разряда без привязки к активному реквизиту, то меню показывается в текущей позиции курсора мыши.
- Картинка - объект ''Картинка'' с нужными пиктограммами, в формате как для ТЗ.
- ПараметрыЦвета - список значений с параметрами цвета: значение - число цвета, представление - имя параметра. Имя параметра может быть одним из следующих: ЦветФонаВыделения, ЦветШрифтаВыделения, ЦветРамкиВыделения, ЦветФона, ЦветШрифта
@ЗАМЕЧАНИЕ: 
Многоуровневость обеспечивается списками значений, вложенными в основной (см. пример).
Если выбор производится в меню, то значения с представлением - воспринимаются как
разделители.
@ПРИМЕР: 
Сервис = СоздатьОбъект(''Сервис'');
Список = СоздатьОбъект(''СписокЗначений'');
Список.ДобавитьЗначение(1,''[icon:1]Пункт 1'');
Список.ДобавитьЗначение(2,''[icon:2]Пункт 2'');
Список.ДобавитьЗначение(3,''[icon:3]Пункт 3'');
Список.ДобавитьЗначение(4,''[icon:4]Пункт 4'');
Список.ДобавитьЗначение(0,''-'');
// создаем вложенный список
СписокДоп = СоздатьОбъект(''СписокЗначений'');
СписокДоп.ДобавитьЗначение(551,''Пункт 51'');
СписокДоп.ДобавитьЗначение(552,''Пункт 52'');
СписокДоп.ДобавитьЗначение(553,''Пункт 53'');
СписокДоп.ДобавитьЗначение(554,''Пункт 54'');
// добавляем вложенный список
Список.ДобавитьЗначение(СписокДоп,''Пункт 5'');
Список.ДобавитьЗначение(6,''Пункт 6'');
Список.ДобавитьЗначение(7,''Пункт 7'');
Выб = '''';
Картинка = СоздатьОбъект(''Картинка'');
Картинка.Загрузить(''МояКартинка4Пиктограммы'');
ПараметрыЦвета = СоздатьОбъект(''СписокЗначений'');
ПараметрыЦвета.Установить(''ЦветФонаВыделения''255);
ПараметрыЦвета.Установить(''ЦветРамкиВыделения''0);
Если Сервис.ВыбратьЗначение(Список,Выб,''Тестовый выбор значения'',0,0,Картинка,ПараметрыЦвета) = 1 Тогда
        Сообщить(Выб);
КонецЕсли;
"
    },
    {"Item","AST","ВыбратьЦвет","",
"ВыбратьЦвет(<?>,)",
"",
"@Синтаксис:
ВыбратьЦвет(ПолноеОткрытие, НачальныйЦвет)
@Назначение:
выводит диалог выбора цвета и возвращает результат выбора (-1, если цвет не выбран
@Параметры:
<ПолноеОткрытие> - если 1, то диалог выбора открывается с полем точного выбора цвета
<НачальныйЦвет> - задает начальный цвет выбора
"
    },
    {"Item","AST","ВыключитьРаскраскуТаблиц","UnColourBrowse",
"ВыключитьРаскраскуТаблиц()",
"UnColourBrowse()",
"@Синтаксис:
ВыключитьРаскраскуТаблиц()
@Назначение:
Запрещает раскраску таблиц.
@ЗАМЕЧАНИЕ: 
Метод обратный методу
@ПРИМЕР: 
Сервис = СоздатьОбъект(""Сервис"");
Сервис.ВыключитьРаскраскуТаблиц();
"
    },
    {"Item","AST","ВыполнитьПроцедуру","CallAsProcedure",
"ВыполнитьПроцедуру(<?>,,)",
"CallAsProcedure(<?>,,)",
"@Синтаксис:
ВыполнитьПроцедуру(<Контекст>,<ИмяПроцедуры>,<СписокАргументов>)
@Назначение:
Метод предназначен для выполнения процедуры в заданном контексте.
Возвращает 1 в случае успеха, 0 - в противном случае.
@ПРИМЕР: 
Перем Конт;
Сервис = СоздатьОбъект(""Сервис"");
ОткрытьФорму(Обработка.Демо, Конт);
Список = СоздатьОбъект(""СписокЗначений"");
Список.ДобавитьЗначение(""Первый параметр"");
Список.ДобавитьЗначение(""Второй параметр"");
Список.ДобавитьЗначение(""Третий параметр"");
Сервис.ВыполнитьПроцедуру(Конт, ""Выполнить2
"
    },
    {"Item","AST","ВыполнитьФункцию","CallAsFunction",
"ВыполнитьФункцию(<?>,,,)",
"CallAsFunction(<?>,,,)",
"@Синтаксис:
ВыполнитьФункцию(<Контекст>,<ИмяФункции>,<СписокАргументов>,<Результат>)
@Назначение:
Метод предназначен для выполнения функции в заданном контексте.
Возвращает 1 в случае успеха, 0 - в противном случае.
@ПРИМЕР: 
Перем Конт, Рез;
Сервис = СоздатьОбъект(""Сервис"");
ОткрытьФорму(Обработка.Демо, Конт);
Список = СоздатьОбъект(""СписокЗначений"");
Список.ДобавитьЗначение(""Первый параметр"");
Список.ДобавитьЗначение(""Второй параметр"");
Список.ДобавитьЗначение(""Третий параметр"");
Сервис.ВыполнитьФункцию(Конт, ""Выполнить3
"
    },
    {"Item","AST","ВысотаСтрокиТаблицы","HeightTableString",
"ВысотаСтрокиТаблицы(<?>,,)",
"HeightTableString(<?>,,)",
"@Синтаксис:
ВысотаСтрокиТаблицы(<Таблица>,<НомерСтроки>,<ТипВозврата>)
@Назначение:
Возвращает высоту строки объекта Таблица в заданных единицах
@Параметры:
<Таблица> - объект Таблица;
<НомерСтроки> - номер строки, высоту которой необходимо вычислить.
<ТипВозврата> - тип возвращаемого значения. Может принимать следующие значения:
1 - возвращается значение в миллиметрах, 2 - возвращается значение в экранных пикселах,
3 - возвращается значение во внутренних юнитах 1С.
@ЗАМЕЧАНИЕ: 
Метод работает только для таблиц, которые уже выведены на экран методом Показать().
@ПРИМЕР: 
Сервис = СоздатьОбъект(''Сервис'');
Таб.Показать(''Тест'');
Сервис.ПрятатьТаблицу(Таб,1);
Для инд = 1 по Таб.ВысотаТаблицы() Цикл
Сообщить(+инд+ :: +Сервис.ВысотаСтрокиТаблицы(Таб, инд, 1)+мм. :: +Сервис.ВысотаСтрокиТаблицы(Таб, инд, 2)+ :: +Сервис.ВысотаСтрокиТаблицы(Таб, инд, 3));
КонецЦикла;
Сервис.ПрятатьТаблицу(Таб,0);
"
    },
    {"Item","AST","ГотовностьПринтера","IsPrinterReady",
"ГотовностьПринтера(<?>)",
"IsPrinterReady(<?>)",
"@Синтаксис:
ГотовностьПринтера(<ИмяПринтера>)
@Назначение:
Возвращает показатель готовности принтера.
Возможные значения:
число 0: принтер готов к печати;
список значений с ошибками состояния принтера;
число -2: невозможно создать объект 'СписокЗначений' для списка ошибок.
@Параметры:
<ИмяПринтера> - имя принтера в виде строки.
"
    },
    {"Item","AST","ДобавитьГлобальныйМодуль","AddGlobalModule",
"ДобавитьГлобальныйМодуль(<?>)",
"AddGlobalModule(<?>)",
"@Синтаксис:
ДобавитьГлобальныйМодуль(<ТекстМодуля>)
@Назначение:
Загружает, компилирует и запускает дополнительный глобальный модуль. В случае удачной
загрузки возвращает номер загруженного глобального модуля, иначе - 0.
@Параметры:
<ТекстМодуля> - (Строка) Передается по значению.  строка с текстом добавляемого глобального модуля.
@ЗАМЕЧАНИЕ: 
С версии 1.8.1.3 в дополнительных модулях работает теперь директива ЗагрузитьИзФайла.
@ПРИМЕР: 
Сервис = СоздатьОбъект(""Сервис"");
глДопМодуль = Сервис.ДобавитьГлобальныйМодуль(""#ЗагрузитьИзФайла ГлобМодуль1.txt"");
"
    },
    {"Item","AST","ЗаголовокПредупреждения","",
"ЗаголовокПредупреждения(<?>,,)",
"",
"@Синтаксис:
ЗаголовокПредупреждения(ФлагУстановки, Значение, ФлагСброса)
@Назначение:
Установка заголовка окна предупреждения взамен стандартного.
@Параметры:
<ФлагУстановки> - (Число) если 0 или не указано, то только чтение текущего значения, иначе следующие параметры устанавливают новое значение;
<Значение> - (Строка) значение заголовка сообщения
<ФлагСброса> - (Число) если 1, то после показа окна значение заголовка сбрасывается к значению по умолчанию

"
    },
    {"Item","AST","ЗакрытьВсеОкна","",
"ЗакрытьВсеОкна(<?>)",
"",
"@Синтаксис:
ЗакрытьВсеОкна(Таймаут)
@Назначение:
закрывает все открытые окна внутри текущей сесии 1С:Предприятия.
@Параметры:
<Таймаут> - Необязательный параметр.  значение таймаута (в секундах) для всех окон предупреждений, которые возникают в процессе закрытия окон (вопросы о сохранении, предупреждения и т.д.).
"
    },
    {"Item","AST","ИконкаПредупреждения","",
"ИконкаПредупреждения(<?>,,)",
"",
"@Синтаксис:
ИконкаПредупреждения(ФлагУстановки, Значение, ФлагСброса)
@Назначение:
Подмена стандартной иконки окна предупреждений
@Параметры:
<ФлагУстановки> - (Число) если 0 или не указано, то только чтение текущего значения, иначе следующие параметры устанавливают новое значение;
<Значение> - (Число) 1 - ""стоп""; 2 - ""вопрос""; 3 - ""предупреждение""; 4 - ""информация""; любое другое значение - не менять;

<ФлагСброса> - (Число) если 1, то после показа окна значение заголовка сбрасывается к значению по умолчанию
"
    },
    {"Item","AST","КоманднаяСтрока","CommandLine",
"КоманднаяСтрока()",
"CommandLine()",
"@Синтаксис:
КоманднаяСтрока()
@Назначение:
Возвращает коммандную строку, с который было запущено 1С:Предприятие.
@ПРИМЕР: 
Сервис = СоздатьОбъект(""Сервис"");
Сообщить(Сервис.КоманднаяСтрока());
"
    },
    {"Item","AST","ОбновитьДанныеМетодовГлобальногоМодуля","RefreshMethodsOfGlobalModule",
"ОбновитьДанныеМетодовГлобальногоМодуля",
"RefreshMethodsOfGlobalModule",
"@Назначение:
Для динамического обновления данных глобального модуля у Оптимизатора ФормЕкс - например, для Перехватчика в 1С++
"
    },
    {"Item","AST","ОбработкаОжидания","IdleProcessing",
"ОбработкаОжидания(<?>,)",
"IdleProcessing(<?>,)",
"@Синтаксис:
ОбработкаОжидания(<Имя>,<Интервал>)
@Назначение:
Вызывает глобальную процедуру с заданным интервалом в милисекундах.
@ПРИМЕР: 
Сервис = СоздатьОбъект(""Сервис"");
Сервис.ОбработкаОжидания(""глПолучитьНовыеЗаявки
"
    },
    {"Item","AST","ОсновнаяКнопкаПредупреждения","",
"ОсновнаяКнопкаПредупреждения(<?>,,)",
"",
"@Синтаксис:
ОсновнаяКнопкаПредупреждения(ФлагУстановки, Значение, ФлагСброса)
@Назначение:
Установка кнопки ""по умолчанию"".
@Параметры:
<ФлагУстановки> - (Число) 
<Значение> - (Число) 
<ФлагСброса> - (Число) 
"
    },
    {"Item","AST","ОстановитьВыполнение","",
"ОстановитьВыполнение()",
"",
"@Синтаксис:
ОстановитьВыполнение()
@Назначение:
прекращает дальнейшее выполнение кода
"
    },
    {"Item","AST","ОткрытьПлавающуюФорму","OpenToolsForm",
"ОткрытьПлавающуюФорму()",
"OpenToolsForm()",
"@Назначение:
Метод позволяет открыть форму в виде ""плавающего"" окна. Форма подобна модальной форме, но при ее открытии работа в главном окне не блокируется.
@ОПИСАНИЕ: 
Параметры метода аналогичны параметрам штатного метода ОткрытьФорму()
"
    },
    {"Item","AST","ПерехватКлавиатуры","KeyHook",
"ПерехватКлавиатуры(<?>)",
"KeyHook(<?>)",
"@Синтаксис:
ПерехватКлавиатуры(НовоеЗначение)
@Назначение:
Флаг разрешения перехвата на момент до выполнения метода
@Параметры:
<НовоеЗначение> - (Число) Флаг разрешения перехвата событий клавиатуры: 1 - разрешить перехват; 0 - запретить перехват. Необязательный. По умолчанию значение разрешения перехвата событий не изменяется.
@ЗАМЕЧАНИЕ: 
Метод разрешает или запрещает перехват и обработку событий клавиатуры (см. Предопределенные процедуры).
"
    },
    {"Item","AST","ПерехватМыши","MouseHook",
"ПерехватМыши(<?>)",
"MouseHook(<?>)",
"@Синтаксис:
ПерехватМыши(НовоеЗначение)
@Назначение:
Флаг разрешения перехвата на момент до выполнения метода
@Параметры:
<НовоеЗначение> - (Число) Флаг разрешения перехвата событий клавиатуры: 1 - разрешить перехват; 0 - запретить перехват. Необязательный. По умолчанию значение разрешения перехвата событий не изменяется.
@ЗАМЕЧАНИЕ: 
Метод разрешает или запрещает перехват и обработку событий клавиатуры (см. Предопределенные процедуры).
"
    },
    {"Item","AST","ПерехватОтрисовкиСписков","ValueListDraw",
"ПерехватОтрисовкиСписков(<?>)",
"ValueListDraw(<?>)",
"@Синтаксис:
ПерехватОтрисовкиСписков(НовоеЗначение)
@Назначение:
Флаг разрешения перехвата на момент до выполнения метода
@Параметры:
<НовоеЗначение> - (Число) Флаг разрешения перехвата отрисовки списков значений на формах: 1 - разрешить перехват; 0 - запретить перехват. Необязательный. По умолчанию значение разрешения перехвата отрисовки не изменяется.
@ЗАМЕЧАНИЕ: 
Метод разрешает или запрещает перехват отрисовки списков значения для включения или выключения раскраски списков значений (см. Раскраска списков значений).
"
    },
    {"Item","AST","ПоказыватьИндикаторКлавиатуры","ShowKeyboardIndicator",
"ПоказыватьИндикаторКлавиатуры(<?>)",
"ShowKeyboardIndicator(<?>)",
"@Синтаксис:
ПоказыватьИндикаторКлавиатуры(<Флаг>)
@Назначение:
Включает/отключиет показ ракладки клавиатуры и времени в статусной панели 1С:Предприятия.
@Параметры:
<Флаг> - 0 - отключить показ; 1 - включить показ. Этот флаг может быть изменен путем
установки/сброса флажка на странице свойств компоненты (в главном меню: Сервис - Параметры).
@ПРИМЕР: 
Сервис = СоздатьОбъект(""Сервис"");
Сервис.ПоказыватьИндикаторКлавиатуры(1);
"
    },
    {"Item","AST","ПолучитьGUID","GetGUID",
"ПолучитьGUID()",
"GetGUID()",
"@Синтаксис:
ПолучитьGUID()
@Назначение:
Генерирует и возвращает GUID в виде строки.
@ПРИМЕР: 
Сервис = СоздатьОбъект(""Сервис"");
Сообщить(Сервис.ПолучитьGUID());
"
    },
    {"Item","AST","ПолучитьИменаТаблицы","GetTableNames",
"ПолучитьИменаТаблицы(<?>)",
"GetTableNames(<?>)",
"@Синтаксис:
ПолучитьИменаТаблицы(<Таблица>)
@Назначение:
Возвращает таблицу значений с адресами и идентификаторами поименованных областей 
(колонки ТЗ: 'Адрес', 'Идентификатор', 'Лево', 'Верх', 'Право', 'Низ').
@Параметры:
<Таблица> - объект ""Таблица"";
"
    },
    {"Item","AST","ПолучитьПеременнуюКонтекста","GetContextVar",
"ПолучитьПеременнуюКонтекста(<?>,,)",
"GetContextVar(<?>,,)",
"@Синтаксис:
ПолучитьПеременнуюКонтекста(<Контекст>,<ИмяПеременной>,<Результат>)
@Назначение:
Метод предназначен для вычисления значения переменной в заданном контексте.
Возвращает 1 в случае успеха, 0 - в противном случае.
@ПРИМЕР: 
Перем Конт, Рез;
Сервис = СоздатьОбъект(""Сервис"");
ОткрытьФорму(""Обработка.Демо
"
    },
    {"Item","AST","ПолучитьСистемныйЦвет","",
"ПолучитьСистемныйЦвет(<?>)",
"",
"@Синтаксис:
ПолучитьСистемныйЦвет(ИндексЦвета)
@Параметры:
<ИндексЦвета> - возвращает системный цвет по индексу (является оберткой над методом ::GetSysColor() из WinAPI)
"
    },
    {"Item","AST","ПолучитьСписокПринтеров","GetPrintersList",
"ПолучитьСписокПринтеров()",
"GetPrintersList()",
"@Синтаксис:
ПолучитьСписокПринтеров()
@Назначение:
Возвращает список значений, где значения - имена принтеров.
"
    },
    {"Item","AST","ПолучитьХэшМД2","",
"ПолучитьХэшМД2(<?>,)",
"",
"@Синтаксис:
ПолучитьХэшМД2(Строка, Флаг)
@Назначение:
возвращает хэш по алгоритму MD2 по переданным параметрам
@Параметры:
<Строка> - строка для расчета хэша или полное имя файла
<Флаг> - 1 - передано имя файла, 0 - (по умолчанию) передана строка
"
    },
    {"Item","AST","ПолучитьХэшМД5","",
"ПолучитьХэшМД5(<?>,)",
"",
"@Синтаксис:
ПолучитьХэшМД5(Строка, Флаг)
@Назначение:
возвращает хэш по алгоритму MD5 по переданным параметрам
@Параметры:
<Строка> - строка для расчета хэша или полное имя файла
<Флаг> - 1 - передано имя файла, 0 - (по умолчанию) передана строка
"
    },
    {"Item","AST","ПолучитьХэшПароляПользователя","",
"ПолучитьХэшПароляПользователя(<?>,)",
"",
"@Синтаксис:
ПолучитьХэшПароляПользователя(ИмяПользователя, ПутьКБазе)
@Параметры:
<ИмяПользователя> - 
<ПутьКБазе> - Необязательный параметр. 
"
    },
    {"Item","AST","ПрятатьТаблицу","HideTable",
"ПрятатьТаблицу(<?>,)",
"HideTable(<?>,)",
"@Синтаксис:
ПрятатьТаблицу(<Таблица>,<Флаг>)
@Назначение:
Прячет/показывает выведенное окно таблицы.
@Параметры:
<Таблица> - объект Таблица;
<Флаг> - при 1 скрывает окно таблицы, при 0 - показывает скрытое ранее окно.
@ЗАМЕЧАНИЕ: 
Окно таблицы делаеться невидимым, но не уничтожается. Программисту необходимо следить
самостоятельно, чтобы скрытые окна после обработки вновь делались видимыми.
@ПРИМЕР: 
Сервис = СоздатьОбъект(""Сервис"");
Таб.Показать(""Тест"");
Сервис.ПрятатьТаблицу(Таб,1);
Для инд = 1 по Таб.ВысотаТаблицы() Цикл
  Сообщить(+инд+ :: 
    +Сервис.ВысотаСтрокиТаблицы(Таб, инд, 1)+мм. :: 
    +Сервис.ВысотаСтрокиТаблицы(Таб, инд, 2)+ :: 
    +Сервис.ВысотаСтрокиТаблицы(Таб, инд, 3));
КонецЦикла;
Сервис.ПрятатьТаблицу(Таб,0);
"
    },
    {"Item","AST","РазрешитьОткрытиеОкон","",
"РазрешитьОткрытиеОкон(<?>)",
"",
"@Синтаксис:
РазрешитьОткрытиеОкон(Флаг)
@Назначение:
для обхода запрета открытия форм из формулы реквизита диалога
@Параметры:
<Флаг> - 1 - разрешить открытие форм, 0 - запретить открытие форм.
@ЗАМЕЧАНИЕ: 
Метод надо вызывать непосредственно в месте, где открытие запрещено.
"
    },
    {"Item","AST","РаскладкаКлавиатуры","",
"РаскладкаКлавиатуры(<?>,)",
"",
"@Синтаксис:
РаскладкаКлавиатуры(<Раскладка>,<ТекущаяРаскладка>)
@Назначение:
Получение/установки текущей раскладки клавиатуры.
@Параметры:
<ИмяКнопки> - (Строка строка с именем кнопки (""CapsLock
"
    },
    {"Item","AST","СоздатьШрифт","CreateFont",
"СоздатьШрифт(<?>,,,,,,)",
"CreateFont(<?>,,,,,,)",
"@Синтаксис:
СоздатьШрифт(<Имя>,<Высота>,<Жирность>,<Курсив>,<Подчеркивание>,<Зачеркивание>,<Наклон>)
@Назначение:
Создает шривт по указанным параметрам. За основу берется шрифт, установленный в профиле пользователя (настройка интерфейса).
@Параметры:
<Имя> - системное имя шрифта;
<Высота> - высота создаваемого шрифта;
<Жирность> - жирность создаваемого шрифта. Может принимать следующие значения:
 1 - THIN;
 2 - EXTRALIGHT;
      3 - LIGHT;
        4 - NORMAL;
        5 - MEDIUM;
        6 - SEMIBOLD;
        7 - BOLD;
        8 - EXTRABOLD;
        9 - HEAVY;
        другое - DONTCARE;
<Курсив> - флаг использования курсива;
<Подчеркивание> - флаг использования подчеркивания;
<Зачеркивание> - флаг использования зачеркивания;
<Наклон> - значение наклона создаваемого шрифта в десятых долях градуса (только положительное значение).
Все параметры являются необязательными. По умолчанию используются настройки шрифта - основания.
Возвращает код созданного шрифта.
@Обязательно удаляйте ненужные уже шрифты методом УдалитьШрифт(...).
"
    },
    {"Item","AST","СоздатьШрифтНаОсновании","CreateFontCausedBy",
"СоздатьШрифтНаОсновании(<?>,,,,,,)",
"CreateFontCausedBy(<?>,,,,,,)",
"@Синтаксис:
СоздатьШрифтНаОсновании(<Имя>,<Высота>,<Жирность>,<Курсив>,<Подчеркивание>,<Зачеркивание>,<Наклон>)
@Назначение:
Создает шрифт по указанным параметрам на основе указанного первым параметром шрифта. После окончания работы со шрифтом, его необходимо уничтожить.
@Параметры:
<Имя> - системное имя шрифта;
<Высота> - 
<Жирность> - жирность создаваемого шрифта. Может принимать следующие значения:
 1 - THIN;
 2 - EXTRALIGHT;
      3 - LIGHT;
        4 - NORMAL;
        5 - MEDIUM;
        6 - SEMIBOLD;
        7 - BOLD;
        8 - EXTRABOLD;
        9 - HEAVY;
        другое - DONTCARE
<Курсив> - 
<Подчеркивание> - 
<Зачеркивание> - 
<Наклон> - значение наклона создаваемого шрифта в десятых долях градуса (только положительное значение).
Все параметры являются необязательными. По умолчанию используются настройки шрифта - основания.
Возвращает код созданного шрифта.
"
    },
    {"Item","AST","СостояниеКлавиатуры","",
"",
"",
"@Параметры:
<ИмяКнопки> - (Строка строка с именем кнопки (""CapsLock
"
    },
    {"Item","AST","СписокВсехОткрытыхОкон","",
"СписокВсехОткрытыхОкон()",
"",
"@Синтаксис:
СписокВсехОткрытыхОкон()
@Назначение:
возвращает список значений со всеми открытыми формами
"
    },
    {"Item","AST","СписокВсехФорм","AllFormsList",
"СписокВсехФорм()",
"AllFormsList()",
"@Синтаксис:
СписокВсехФорм()
@Назначение:
Метод позволяет получить список всех форм конфигурации.
@ЗАМЕЧАНИЕ: 
штатный объект Текст, в котором строки содержат полные пути ко всем формам внутри текущего md.
"
    },
    {"Item","AST","СписокТаблиц","ListMoxel",
"СписокТаблиц()",
"ListMoxel()",
"@Синтаксис:
СписокТаблиц()
@ЗАМЕЧАНИЕ: 
У объектов типа ""TableEx/РасширениеТаблицы"" есть только один метод: ""Write/Записать
"
    },
    {"Item","AST","УдалитьГлобальныйМодуль","DeleteGlobalModule",
"УдалитьГлобальныйМодуль(<?>)",
"DeleteGlobalModule(<?>)",
"@Синтаксис:
УдалитьГлобальныйМодуль(<НомерМодуля>)
@Назначение:
Выгружает дополнительный глобальный модуль. В случае успеха возвращает 1, иначе - 0.
@Параметры:
<НомерМодуля> - номер дополнительного глобального модуля.
@ПРИМЕР: 
Если глДопМодуль > 0 Тогда
        Сервис = СоздатьОбъект(""Сервис"");
        Сервис.УдалитьГлобальныйМодуль(глДопМодуль);
КонецЕсли;
"
    },
    {"Item","AST","УдалитьШрифт","DeleteFont",
"УдалитьШрифт(<?>)",
"DeleteFont(<?>)",
"@Синтаксис:
УдалитьШрифт(<КодШрифта>)
@Назначение:
Уничтожает созданный пользователем шрифт.
@Параметры:
<КодШрифта> - код шрифта, полученный из метода СоздатьШрифт(...).
"
    },
    {"Item","AST","УстановитьКурсор","SetCurcor",
"УстановитьКурсор(<?>)",
"SetCurcor(<?>)",
"@Синтаксис:
УстановитьКурсор(<ИмяКурсора>)
@Назначение:
Перехват курсора для главного окна 1С.
@Параметры:
<ИмяКурсора> - Если в качестве параметра передается строковое значение, то оно воспринимается
как путь к файлу с курсором. Если ни чего не передавать, то для текущего объекта перехват курсора
отключается. Если передается числовое значение, то устанавливается курсор из системы. 
Возможные значения:
(значение) - (виндовая константа, которой соответсвует это значение)
1 - IDC_ARROW;
2 - IDC_IBEAM;
3 - IDC_WAIT;
4 - IDC_CROSS;
5 - IDC_UPARROW;
6 - IDC_SIZENWSE;
7 - IDC_SIZENESW;
8 - IDC_SIZEWE;
9 - IDC_SIZENS;
10 - IDC_SIZEALL;
11 - IDC_NO;
12 - IDC_APPSTARTING;
13 - IDC_HELP.
@ЗАМЕЧАНИЕ: 
Любое другое числовое значение сбрасывает курсор.
@ПРИМЕР: 
Процедура ПриДвиженииМыши(сост, х, у)
   Сервис = СоздатьОбъект(""Сервис"");
   ФормаРасш = СоздатьОбъект(""РасширениеФормы"");
   Атр = ФормаРасш.ПолучитьАтрибутПоКоординатам(х,у);
   Если ТипЗначенияСтр(Атр) = ""АтрибутФормы"" Тогда
      Сервис.УстановитьКурсор(Число(Атр.Заголовок));
   Иначе
      Сервис.УстановитьКурсор(0);
   КонецЕсли;
КонецПроцедуры
"
    },
    {"Item","AST","УстановитьОбои","SetWallpaper",
"УстановитьОбои(<?>,,,)",
"SetWallpaper(<?>,,,)",
"@Синтаксис:
УстановитьОбои(<Имя>,<Положение>,<Серый>,<ЦветФона>)
@Назначение:
Метод позволяет загрузить свою картику на задний план главного окна 1С:Предприятия.
@ЗАМЕЧАНИЕ: 
Если в библиотеке картинок есть картинка с идентификатором Wallpaper, то при загрузке
компоненты она автоматически загружается в качестве обоев в левый верхний угол, в режиме
оригинального отображения.
@ПРИМЕР: 
Сервис = СоздатьОбъект(""Сервис"");
Сервис.УстановитьОбои(""Лого
"
    },
    {"Item","AST","УстановитьПеременнуюКонтекста","SetContextVar",
"УстановитьПеременнуюКонтекста(<?>,,)",
"SetContextVar(<?>,,)",
"@Синтаксис:
УстановитьПеременнуюКонтекста(<Контекст>,<ИмяПеременной>,<НовоеЗначение>)
@Назначение:
Метод предназначен для установки значения переменной в заданном контексте.
Возвращает 1 в случае успеха, 0 - в противном случае.
@ПРИМЕР: 
Перем Конт, Рез;
Сервис = СоздатьОбъект(""Сервис"");
ОткрытьФорму(""Обработка.Демо
"
    },
    {"Item","AST","УстановитьХэшПароляПользователя","",
"УстановитьХэшПароляПользователя(<?>,,)",
"",
"@Синтаксис:
УстановитьХэшПароляПользователя(ИмяПользователя, НовыйХэшПароля, ПутьКБазе)
@Параметры:
<ИмяПользователя> - 
<НовыйХэшПароля> - 
<ПутьКБазе> - Необязательный параметр.  по умолчанию - текущая база
"
    },
    {"Item","AST","ЭмулироватьКлавиатуру","SendKeys",
"ЭмулироватьКлавиатуру(<?>,,)",
"SendKeys(<?>,,)",
"@Синтаксис:
ЭмулироватьКлавиатуру(<Строка>,<Ждать>,<Раскладка>)
@Назначение:
Метод предназначен для программной эмуляции нажатий кнопок на клавиатуре.
@Параметры:
<Строка> - строка для отсылки в буфер клавиатуры (подробнее см. документацию по методу SendKeys из WSH);
<Ждать> - необязательный флаг: 1 - продолжать программу только после обработки сообщения клавиатуры Windows; 0 - продолжить выполнение, не дожидаясь обработки сообщения (по умолчанию).
<Раскладка> - Необязательный параметр.  Строка с наименованием раскладки или число, соответствующее следующим раскладкам:
	1 - ""English (United States)"" (по умолчанию);
	2 - ""Russian"";
	3 - ""Ukrainian"";
	4 - ""Belarusian"";
	5 - ""German (Germany)"";
	6 - ""French (France)"".
@ПРИМЕР: 
Процедура МаксимизироватьОкно()
   Сервис = СоздатьОбъект(""Сервис"");
   Сервис.SendKeys(""%"");
   Сервис.SendKeys(""{LEFT}{DOWN}{DOWN}{DOWN}{DOWN}{DOWN}{ENTER}"");
КонецПроцедуры
"
    },
   },
  },
  {"Folder","AST","Объект РасширениеФормы","FormEx",
   {"Folder","AST","Атрибуты","",
    {"Item","AST","<АтрибутФормы>","<Attribute>",
"",
"",
"@Назначение:
Доступ к объекту АтрибутФормы, где <АтрибутФормы> - идентификатор элемента диалога,
как он задан в конфигураторе.
@ПРИМЕР: 
ФормаРасш = СоздатьОбъект(""РасширениеФормы""); 
Сообщить(ФормаРасш.кнОК.Заголовок);
"
    },
    {"Item","AST","Верх","Top",
"Верх",
"Top",
"@Синтаксис:
Верх
@Назначение:
Доступ к положению формы. Атрибут для чтения/записи. 
Возвращает/устанавливает координату верхнего края формы относительно главного окна 
программы (для немодальных окон).
"
    },
    {"Item","AST","Высота","Height",
"Высота",
"Height",
"@Синтаксис:
Высота
@Назначение:
Доступ к значению высоты формы. Атрибут для чтения/записи.
@ПРИМЕР: 
ФормаРасш = СоздатьОбъект(""РасширениеФормы""); 
ФормаРасш.УстановитьФорму(Форма);
ФормаРасш.Высота = 250;
"
    },
    {"Item","AST","Дескриптор","",
"Дескриптор",
"",
"@Синтаксис:
Дескриптор
@Назначение:
получение HWND окна формы
"
    },
    {"Item","AST","Иконка","",
"Иконка",
"",
"@Синтаксис:
Иконка
@Назначение:
Установка иконки окна формы. Этому свойству назначается значение типа ""Картинка"".
@ЗАМЕЧАНИЕ: 
Прозрачный фон возможен только для кортинки с изначальным форматом ico
"
    },
    {"Item","AST","Лево","Left",
"Лево",
"Left",
"@Синтаксис:
Лево
@Назначение:
Доступ к положению формы. Атрибут для чтения/записи. 
Возвращает/устанавливает координату верхнего края формы относительно главного окна 
программы (для немодальных окон).
"
    },
    {"Item","AST","Максимизирована","Maximize",
"Максимизирована",
"Maximize",
"@Синтаксис:
Максимизирована
@Назначение:
Доступ к состоянию окна формы. Атрибут для чтения/записи. 
Возвращает/устанавливает признак развернутости окна формы (для немодальных окон).
@ЗАМЕЧАНИЕ: 
Работает только после физического открытия окна. В момент первого обновления формы 
(до вывода окна на экран) все формы в 1С имеют значение этого атрибута равным 0.
"
    },
    {"Item","AST","Метка","Label",
"Метка",
"Label",
"@Синтаксис:
Метка
@Назначение:
Доступ к значению метки формы. Атрибут для чтения/записи. 
Возвращает/устанавливет метку формы, которая задается при вызове метода ОткрытьФорму() 
после знака '#' в названии объекта.
"
    },
    {"Item","AST","Минимизирована","Minimize",
"Минимизирована",
"Minimize",
"@Синтаксис:
Минимизирована
@Назначение:
Доступ к состоянию окна формы. Атрибут для чтения/записи. 
Возвращает/устанавливает признак свернутости окна формы (для немодальных окон).
@ЗАМЕЧАНИЕ: 
Работает только после физического открытия окна.
"
    },
    {"Item","AST","Описание","Description",
"Описание",
"Description",
"@Синтаксис:
Описание
@Назначение:
Доступ к описанию формы. Атрибут только для чтения.
Возвращает в виде строки описание формы, заданное в конфигураторе.
"
    },
    {"Item","AST","Прозрачность","Transparency",
"Прозрачность",
"Transparency",
"@Синтаксис:
Прозрачность
@Назначение:
Устанавливает коэффициент прозрачности для модальных форм (если она поддерживается операционной системой).
@ЗАМЕЧАНИЕ: 
Корректное чтения возможно только на системах WinXP и старше. 0 - полностью прозрачное окно; 255 - полностью непрозрачное окно
"
    },
    {"Item","AST","РасширенныйСтиль","",
"РасширенныйСтиль",
"",
"@Синтаксис:
РасширенныйСтиль
@Назначение:
чтение и запись расширенного стиля окна формы
"
    },
    {"Item","AST","Стиль","",
"Стиль ",
"",
"@Синтаксис:
Стиль
@Назначение:
чтение и запись стиля окна формы
"
    },
    {"Item","AST","ТекстМодуля","ModuleText",
"ТекстМодуля",
"ModuleText",
"@Синтаксис:
ТекстМодуля
@Назначение:
Возвращает текст модуля формы
"
    },
    {"Item","AST","ЦветФона","BkColor",
"ЦветФона",
"BkColor",
"@Синтаксис:
ЦветФона
@Назначение:
Доступ к цвету фона формы. Атрибут для чтения/записи. 
Возвращает/устанавливает цвет фона формы.
Если задано -1, то устанавливается цвет по умолчанию.
"
    },
    {"Item","AST","Ширина","Width",
"Ширина",
"Width",
"@Синтаксис:
Высота
@Назначение:
Доступ к значению ширины формы. Атрибут для чтения/записи.
@ПРИМЕР: 
ФормаРасш = СоздатьОбъект(""РасширениеФормы""); 
ФормаРасш.УстановитьФорму(Форма);
ФормаРасш.Ширина = 250;
"
    },
   },
   {"Folder","AST","Методы","",
    {"Item","AST","ВысотаЗаголовкаТаблицы","",
"ВысотаЗаголовкаТаблицы(<?>,)",
"",
"@Синтаксис:
ВысотаЗаголовкаТаблицы(ТЗ,Высота)
@Назначение:
служит для установки высоты заголовка в таблице значений.
@Параметры:
<ТЗ> - строка с идентификатором ТЗ
<Высота> - высота заголовка в строках (отрицательное число - автоустановка).
"
    },
    {"Item","AST","ДобавитьАтрибут","AddAttrib",
"ДобавитьАтрибут(<?>,,)",
"AddAttrib(<?>,,)",
"@Синтаксис:
ДобавитьАтрибут(<ИД>,<Тип>,<Вид>,<НомерКолонки>)
@Назначение:
Добавляет на форму новый реквизит. Возвращает объект вида АтрибутФормы.
@Параметры:
<ИД> - (Строка) идентификатор
<Тип> - (Число) тип создаваемого реквизита.
Возможные значения:
1 - STATIC (Текст)
2 - 1CEDIT (Поле ввода)
3 - BUTTON (Кнопка)
4 - 1CGROUPBOX (Рамка группы)
5 - 1CEDIT (Поле ввода без рамки)
11 - LISTBOX (Список)
12 - CHECKBOX (Флажок)
13 - RADIO (Переключатель)
14 - COMBOBOX (Поле со списком)
15 - TABLE (Таблица)
<ТипВид> - (Строка) например ''''Справочник.ФизическиеЛица''''
<НомерКолонки> - положение колонки в таблице для атрибутов ТЧ, если это 0, т.е. добавление колонки как последней колонки если он от 1-КоличествоКолонок, то вставка новой колонки в указанную позицию и сдвиг других колонок.  Параметр может быть пропущен - тогда используется значение 0.
"
    },
    {"Item","AST","ДобавитьКартинкиЗакладок","AddTabImages",
"ДобавитьКартинкиЗакладок()",
"AddTabImages(<?>)",
"@Синтаксис:
ДобавитьКартинкиЗакладок(<ИмяКартинки>)
@Назначение:
Добавляет на закладки пиктограммы из библиотеки картинок. В библиотеке картинок должна
присутствовать картинка в формате bmp с пикторгаммами размером 16х16 пикселей.
Пикторгаммы назначаются закладкам по их порядковому номеру. Прозрачным считается
цвет RGB(0, 128, 128). При повторных вызовах пикторгаммы из указанной картинки
добавляются к тем, которые загружены ранее в закладки. Т.е. библитека пикторгамм на
закладках будет увеличиваться.
В случае успеха возвращает 1, иначе - 0.
@Параметры:
<ИмяКартинки> - идентификатор картинки с пиктограммами в библиотеке картинок конфигурации.
@ЗАМЕЧАНИЕ: 
Метод работает только после физического открытия окна формы.
@ПРИМЕР: 
ФормаРасш = СоздатьОбъект(""РасширениеФормы"");
Форма.ИспользоватьЗакладки(1);
Форма.Закладки.ДобавитьЗначение(""Основная"");
Форма.Закладки.ДобавитьЗначение(""Дополнительная"");
ФормаРасш.ДобавитьКартинкиЗакладок(""ДляЗакладок""); // в картинке две пиктограммы
Форма.Закладки.ДобавитьЗначение(""Второстепенная""); // закладка появится без пиктограммы
ФормаРасш.ДобавитьКартинкиЗакладок(""ДляДопЗакладок""); // добавляется пикторгамма для последней закладки
"
    },
    {"Item","AST","Закрыть","",
"Закрыть()",
"",
"@Синтаксис:
Закрыть()
@Назначение:
закрывает форму (в отличие от стандартного метода Форма.Закрыть() который ожидает завершения выполнения текущего кода)
"
    },
    {"Item","AST","ЗапретЗакрытияФормыКнопкой","DisableCloseFormByButton",
"ЗапретЗакрытияФормыКнопкой(<?>)",
"DisableCloseFormByButton(<?>)",
"@Синтаксис:
ЗапретЗакрытияФормыКнопкой(<ФлагЗапрета>)
@Назначение:
Метод предназначен для получения/установки доступности системной кнопки закрытия окна
формы.
@Параметры:
<ФлагЗапрета> - Необязательный параметр.  1 - сделать недоступной системную кнопку
закрытия окна формы; 0 - разрешить закрытие формы по кнопке.
@ЗАМЕЧАНИЕ: 
Метод работает только после физического открытия окна формы.
@ПРИМЕР: 
Если Проведен() = 0 Тогда
        ФормаРасш = СоздатьОбъект(""РасширениеФормы"");
        ФормаРасш.ЗапретЗакрытияФормыКнопкой(1);
КонецЕсли;
@ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: 
Значение доступности ситемной кнопки закрытия окна формы до выполнения метода.
"
    },
    {"Item","AST","ЗапретитьОбновлениеОкна","",
"ЗапретитьОбновлениеОкна(<?>)",
"",
"@Синтаксис:
ЗапретитьОбновлениеОкна(Флаг)
@Назначение:
включение/отключение блокировки обновления окна формы
@Параметры:
<Флаг> - (Число) 1 - запретить обновление окна, 0 - разрешить обновление окна
"
    },
    {"Item","AST","ИзменитьРасширенныйСтиль","",
"ИзменитьРасширенныйСтиль(<?>,)",
"",
"@Синтаксис:
ИзменитьРасширенныйСтиль(УдаляемыйСтиль, ДобавляемыйСтиль)
@Назначение:
модификация расширенного стиля окна формы
@Параметры:
<УдаляемыйСтиль> - 
<> - 
"
    },
    {"Item","AST","ИзменитьСтиль","",
"ИзменитьСтиль(<?>,)",
"",
"@Синтаксис:
ИзменитьСтиль(УдаляемыйСтиль, ДобавляемыйСтиль)
@Назначение:
модификация стиля окна формы
@Параметры:
<УдаляемыйСтиль> - 
<> - 
"
    },
    {"Item","AST","КоличествоАтрибутов","GetNumAttrib",
"КоличествоАтрибутов()",
"GetNumAttrib()",
"@Синтаксис:
КоличествоАтрибутов()
@Назначение:
Возвращает количество атрибутов расширяемой формы.
@ПРИМЕР: 
ФормаРасш = СоздатьОбъект(""РасширениеФормы""); 
ФормаРасш.УстановитьФорму(Форма);
СписокИд = СоздатьОбъект(""СписокЗначений""); 
Для Х = 0 По ФормаРасш.КоличествоАтрибутов() - 1 Цикл
  СписокИд.ДобавитьЗначение(ФормаРасш.ПолучитьАтрибут(Х).Идентификатор());
КонецЦикла;
"
    },
    {"Item","AST","НайтиАтрибут","FindAttrib",
"НайтиАтрибут(<?>,)",
"FindAttrib(<?>,)",
"@Синтаксис:
НайтиАтрибут(<ТипФильтра>, <ЗначениеФильтра>)
@Назначение:
Осуществляет поиск атрибута в соответствии с заданным условием. В случае успеха возвращает 1, иначе - 0.
@Параметры:
<ТипФильтра> - задает тип фильтра поиска.
Возможны следующие значения: 1 - по типу атрибута; 2 - по заголовку атрибута;
3 - по значению видимости атрибута; 4 - по значению доступности атрибута;
5 - по принадлежности к слою.
<ЗначениеФильтра> - значение фильтра, соответствующее установленному типу.
@ПРИМЕР: 
ФормаРасш = СоздатьОбъект(""РасширениеФормы"");
р = ФормаРасш.НайтиАтрибут(1,3);
Пока р = 1 Цикл
        Сообщить(ФормаРасш.ТекущийАтрибут().Заголовок);
        р = ФормаРасш.ПолучитьСледующийАтрибут();
КонецЦикла;
"
    },
    {"Item","AST","Обновить","Refresh",
"Обновить()",
"Refresh(<?>)",
"@Синтаксис:
Обновить()
@Назначение:
Вызывает перерисовку формы. В отличии от штатного метода объекта Форма не вызывает
пересчет формул в форме, а просто обновляет окно.
@ЗАМЕЧАНИЕ: 
Метод работает только после физического открытия окна формы.
@ПРИМЕР: 
ФормаРасш = СоздатьОбъект(""РасширениеФормы"");
ФормаРасш.Обновить();
"
    },
    {"Item","AST","ОбновитьКартинкиЗакладок","RefreshTabImages",
"ОбновитьКартинкиЗакладок()",
"RefreshTabImages()",
"@Синтаксис:
ОбновитьКартинкиЗакладок()
@Назначение:
Метод предназначен для обновления сопоставления пиктограмм и закладок.
Необходимо его вызвать, например, при добавлении новой закладки, для которой уже есть
пикторгамма.
@ЗАМЕЧАНИЕ: 
Метод работает только после физического открытия окна формы.
@ПРИМЕР: 
ФормаРасш = СоздатьОбъект(""РасширениеФормы"");
Форма.ИспользоватьЗакладки(1);
Форма.Закладки.ДобавитьЗначение(""Основная"");
Форма.Закладки.ДобавитьЗначение(""Дополнительная"");
ФормаРасш.ДобавитьКартинкиЗакладок(""ДляЗакладок""); // в картинке три пиктограммы
Форма.Закладки.ДобавитьЗначение(""Второстепенная""); // закладка появится без пиктограммы
ФормаРасш.ОбновитьКартинкиЗакладок(); // в результате все закладки с соответсвующими пиктограммами
"
    },
    {"Item","AST","ОбработкаОжидания","IdleProcessing",
"ОбработкаОжидания(<?>,)",
"IdleProcessing(<?>,)",
"@Синтаксис:
ОбработкаОжидания(Имя, Интервал)
@Назначение:
Вызывает процедуру модуля формы с заданным интервалом в милисекундах. В отличии от штатной обработки ожидания, вызывается при открытых модальных формах. Для одной формы может быть установлено сколько угодно обработок ожидания путем создания нужного количества объектов РасширениеФормы. При уничтожении объекта, для которого вызывался данный метод, соответствующая процедура обработки ожидания останавливается. Метод работает только после физического открытия окна формы.
@Параметры:
<Имя> - (Строка Имя процедуры модуля текущей формы для периодического вызова (если в качестве параметра передается пустая строка, то ранее запущенный процесс прекращается)) 
<Интервал> - (Число Интервал вызова процедуры в миллисекундах (если в качестве параметра передается 0 (ноль)) , то ранее запущенный процесс прекращается)
@ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: 
(Строка) Имя процедуры, которая была установлена ранее в качестве процедуры обработки ожидания.
"
    },
    {"Item","AST","ОтсоединитьФорму","DetachForm",
"ОтсоединитьФорму()",
"DetachForm()",
"@Синтаксис:
ОтсоединитьФорму()
@Назначение:
Отсоединяет ранее присоединенную форму и закрывает ее.
@ЗАМЕЧАНИЕ: 
Метод работает только после физического открытия окна формы.
Рекомендуется всегда явно отсоединять присоединенные формы при закрытии основной формы.
@ПРИМЕР: 
Процедура ПриЗакрытии()
        РФорма = СоздатьОбъект(""РасширениеФормы"");
        РФорма.ОтсоединитьФорму();
КонецПроцедуры
"
    },
    {"Item","AST","ПодсветкаЗакладки","HighlightTabItem",
"ПодсветкаЗакладки(<?>,)",
"HighlightTabItem(<?>,)",
"@Синтаксис:
ПодсветкаЗакладки(<НомерЗакладки>,<ВключитьПодсветку>)
@Назначение:
Метод предназначен для включения/выключения подсветки заданной закладки.
@Параметры:
<НомерЗакладки> - номер закладки, для которой необходимо изменить состояние подсветки;
<ВключитьПодсветку> - флаг состояния подсветки: 1 - включить; 0 - выключить;
@ЗАМЕЧАНИЕ: 
Метод работает только после физического открытия окна формы.
@ПРИМЕР: 
ФормаРасш = СоздатьОбъект(""РасширениеФормы"");
Форма.ИспользоватьЗакладки(1);
Форма.Закладки.ДобавитьЗначение(""Основная"");
Форма.Закладки.ДобавитьЗначение(""Дополнительная"");
ФормаРасш.ПодсветкаЗакладки(2, 1); // включаем подсветку дополнительной закладки
"
    },
    {"Item","AST","ПолныйПуть","FullPath",
"ПолныйПуть()",
"FullPath()",
"@Синтаксис:
ПолныйПуть()
@Назначение:
Возвращает полный путь к метаданным объекта, которому принадлежит расширяемая форма.
@ПРИМЕР: 
ФормаРасш = СоздатьОбъект(""РасширениеФормы""); 
ФормаРасш.УстановитьФорму(Форма);
Сообщить(ФормаРасш.ПолныйПуть());
// выводит строку вида: C:\myBASE\1Cv7.MD\CalcVar\CalcVar_Number41
@ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: 
(Строка) полный путь к метаданным объекта, которому принадлежит расширяемая форма.
"
    },
    {"Item","AST","ПолныйТипОбъекта","FullObjectType",
"ПолныйТипОбъекта()",
"FullObjectType()",
"@Синтаксис:
ПолныйТипОбъекта()
@Назначение:
Возвращает полный тип объекта, которому принадлежит расширяемая форма.
@ПРИМЕР: 
ФормаРасш = СоздатьОбъект(""РасширениеФормы""); 
ФормаРасш.УстановитьФорму(Форма);
Сообщить(ФормаРасш.ПолныйТипОбъекта());
// выводит строку вида: Справочник.Тестовый.ФормаСписка.ДляВыбора
@ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: 
(Строка) полный тип объекта, которому принадлежит расширяемая форма.
"
    },
    {"Item","AST","ПоложениеКолонкиТаблицы","TableColumnPosition",
"ПоложениеКолонкиТаблицы(<?>,,)",
"TableColumnPosition(<?>,,)",
"@Синтаксис:
ПоложениеКолонкиТаблицы(<Имя>,<Колонка>,<Положение>)
@Назначение:
Метод служит для изменения положения колонки таблицы значений на форме.
@ЗАМЕЧАНИЕ: 
Метод работает только после физического открытия окна формы.
@ПРИМЕР: 
Процедура Выполнить()
        РФорма = СоздатьОбъект(""РасширениеФормы"");
        РФорма.ПоложениеКолонкиТаблицы(""Табл
"
    },
    {"Item","AST","ПолучитьАтрибут","GetAttrib",
"ПолучитьАтрибут(<?>)",
"GetAttrib(<?>)",
"@Синтаксис:
ПолучитьАтрибут(<Номер>)
@Назначение:
Возвращает объект АтрибутФормы.
@Параметры:
<Номер> - номер или строка с идентификатором атрибута формы, проинициализированной
методом УстановитьФорму(). Для получение доступа к многострочной части формы необходимо
в этот метод передать строку МногострочнаяЧасть.
@ПРИМЕР: 
ФормаРасш = СоздатьОбъект(""РасширениеФормы""); 
ФормаРасш.УстановитьФорму(Форма);
ФормаРасш.ПолучитьАтрибут(5).Слой = ""Основной"";
@ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: 
Возвращает объект АтрибутФормы
"
    },
    {"Item","AST","ПолучитьАтрибутПоКоординатам","GetAttribAtPos",
"ПолучитьАтрибутПоКоординатам(<?>,)",
"GetAttribAtPos(<?>,)",
"@Синтаксис:
ПолучитьАтрибутПоКоординатам(<X>, <Y>)
@Назначение:
Метод предназначен для получения атрибута формы по заданным координатам. При удачном
завершении возвращает объект АтрибутФормы, иначе пустое значение.
@Параметры:
<X> - координата по горизонтальной оси
<Y> - координата по вертикальной оси
@ЗАМЕЧАНИЕ: 
Метод определяет элементы диалога при помощи стандартных функций операционной системы.
Отсюда некоторые ограничения, связанные с порядком обхода элементов диалога.
Советую внимательно относиться к настройке порядка обхода и не пользоваться режимом
автоматический порядок обхода.
@ПРИМЕР: 
Процедура ПриДвиженииМыши(сост, х, у)
        ФормаРасш = СоздатьОбъект(""РасширениеФормы"");
        Атр = ФормаРасш.ПолучитьАтрибутПоКоординатам(х,у);
        Если ТипЗначенияСтр(Атр) = АтрибутФормы Тогда
                Состояние("" х = ""+х+"" у = ""+у+"" сост = ""+сост+"" :: ""+Атр.Заголовок);
        Иначе
                Состояние("" х = ""+х+"" у = ""+у+"" сост = ""+сост);
        КонецЕсли;
КонецПроцедуры
@ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: 
При удачном завершении возвращает объект АтрибутФормы, иначе пустое значение
"
    },
    {"Item","AST","ПолучитьИменаТаблиц","GetTablesName",
"ПолучитьИменаТаблиц()",
"GetTablesName()",
"@Синтаксис:
ПолучитьИменаТаблиц()
@Назначение:
Получить имена всех таблиц-шаблонов, заданных для текущей формы.
"
    },
    {"Item","AST","ПолучитьКартинку","GetPicture",
"ПолучитьКартинку(<?>,,,)",
"GetPicture(<?>,,,)",
"@Синтаксис:
ПолучитьКартинку(<Лево>,<Верх>,<Ширина>,<Высота>)
@Назначение:
Метод предназначен для получения части формы в виде объекта Картинка
(см. документацию 1С:Предприятия).
@Параметры:
<Лево> - координата начала вырезаемой области по горизонтальной оси
<Верх> - координата начала вырезаемой области по вертикальной оси
<Ширина> - ширина вырезаемой области
<Высота> - высота вырезаемой области
@ЗАМЕЧАНИЕ: 
Метод работает только после физического открытия и отображения окна формы.
@ПРИМЕР: 
Процедура ПолучитьКартинку(Карт)
// процедура вызывается из объекта Картинка, расположенного на печатной форме
        Перем Лево,Верх,Ширина,Высота;
        ФормаРасш = СоздатьОбъект(""РасширениеФормы"");
        АтрТекст = СоздатьОбъект(""АтрибутФормы"");
        АтрТекст.УстановитьАтрибут(Форма,""Табл"");
        АтрТекст.ПолучитьКоординаты(Лево,Верх,Ширина,Высота);
        Карт.УстановитьКартинку(ФормаРасш.ПолучитьКартинку(Лево,Верх,Ширина,Высота));
КонецПроцедуры
"
    },
    {"Item","AST","ПолучитьКоординатыТекущейЯчейки","GetCurrentCellCoordinates",
"ПолучитьКоординатыТекущейЯчейки(<?>,,,,)",
"GetCurrentCellCoordinates(<?>,,,,)",
"@Синтаксис:
ПолучитьКоординатыТекущейЯчейки(Имя,Верх,Лево,Низ,Право,Позиция)
@Назначение:
Метод предназначен для получения экранных координа текущей ячейки заданной таблицы (работает и для таблицы, перехваченной объектом ""Дерево+Таблица"").
@Параметры:
<Имя> - (Строка) Идентификатор таблицы значений на форме или ""МногострочнаяЧасть"" для доступа к многострочной части формы.
<Верх> - Переменная для приема координаты текущей ячейки.
<Лево> - Переменная для приема координаты текущей ячейки.
<Низ> - Переменная для приема координаты текущей ячейки.
<Право> - Переменная для приема координаты текущей ячейки
<Позиция> - (Число) 0 - относительно родительского окна
1 - относительно экрана
@ЗАМЕЧАНИЕ: 
Метод работает только после физического открытия окна формы.
"
    },
    {"Item","AST","ПолучитьКоординатыЯчейки","GetCellCoordinates",
"ПолучитьКоординатыЯчейки(<?>,,,,,,)",
"GetCellCoordinates(<?>,,,,,,)",
"@Синтаксис:
ПолучитьКоординатыЯчейки(Имя, НомерСтроки, НомерКолонки, Верх, Лево, Низ, ПравоПозиция)
@Назначение:
Метод предназначен для получения экранных координа заданной ячейки заданной таблицы (работает и для таблицы, перехваченной объектом ""Дерево+Таблица"").
@Параметры:
<Имя> - (Строка) Идентификатор таблицы значений на форме или ""МногострочнаяЧасть"" для доступа к многострочной части формы.
<НомерСтроки> - (Число Номер строки таблицы, начиная с нуля, для которой необходимо получить координаты. Для многострочной части формы - это номер среди видимых в данный момент на экране строк. Для объекта ""Дерево+Таблица"" необходимо передавать полный путь к строке (в этом случае тип параметра будет Строка)) .
<НомерКолонки> - (Число) Номер колонки таблицы, начиная с нуля, для которой необходимо получить координаты.
<Верх> - Переменная для приема координаты текущей ячейки.
<Лево> - Переменная для приема координаты текущей ячейки.
<Низ> - Переменная для приема координаты текущей ячейки.
<Право> - Переменная для приема координаты текущей ячейки
<Позиция> - (Число) 0 - относительно родительского окна
1 - относительно экрана
@ЗАМЕЧАНИЕ: 
Метод работает только после физического открытия окна формы.
"
    },
    {"Item","AST","ПолучитьСледующийАтрибут","GetNextAttrib",
"ПолучитьСледующийАтрибут()",
"GetNextAttrib()",
"@Синтаксис:
ПолучитьСледующийАтрибут()
@Назначение:
Переход на следующий атрибут, удовлетворяющий условиям, заданным при вызове метода
НайтиАтрибут(). В случае успеха возвращает 1, иначе - 0.
@ПРИМЕР: 
ФормаРасш = СоздатьОбъект(""РасширениеФормы"");
р = ФормаРасш.НайтиАтрибут(5,""Основной"");
Пока р = 1 Цикл
        Сообщить(ФормаРасш.ТекущийАтрибут().Заголовок);
        р = ФормаРасш.ПолучитьСледующийАтрибут();
КонецЦикла;
"
    },
    {"Item","AST","ПолучитьФорму","GetForm",
"ПолучитьФорму()",
"GetForm()",
"@Синтаксис:
ПолучитьФорму()
@Назначение:
Возвращает форму, которая указывалась при инициализации объекта в методе УстановитьФорму()
@ПРИМЕР: 
Фрм = ФормаРасш.ПолучитьФорму();
Фрм.Заголовок(Новый заголовок формы);
"
    },
    {"Item","AST","ПолучитьШиринуКолонки","GetColumnWidth",
"ПолучитьШиринуКолонки(<?>,)",
"GetColumnWidth(<?>,)",
"@Синтаксис:
ПолучитьШиринуКолонки(Имя, НомерКолонки)
@Назначение:
Метод предназначен для получения ширины колонки таблицы в соответствии с заданными параметрами. Метод работает только после физического открытия окна формы.
@Параметры:
<Имя> - (Строка) Идентификатор таблицы значений на форме или ""МногострочнаяЧасть"" для доступа к многострочной части формы.
<НомерКолонки> - (Число) Номер колонки, начиная с нуля, для которой необходимо получить ширину.
@ЗАМЕЧАНИЕ: 
Возвращает: тип: Число. Текущая ширина колонки.
"
    },
    {"Item","AST","ПрисоединитьФорму","AttachForm",
"ПрисоединитьФорму(<?>,)",
"AttachForm(<?>)",
"Пример (вариант 1):
Перем Конт;

Процедура ПослеОткрытия()
        Конт = ;
        Если Форма.РежимВыбора() = 0 Тогда
                РФорма = СоздатьОбъект(""РасширениеФормы"");
                Если ОткрытьФорму(""Справочник.ЕдиницыИзмерения#
"
    },
    {"Item","AST","РаскрашиватьТаблицу","ColourTable",
"РаскрашиватьТаблицу(<?>)",
"ColourTable(<?>)",
"@Синтаксис:
РаскрашиватьТаблицу(<Имя>)
@Назначение:
Разрешает раскраску указанной таблицы при включенной частичной раскраске.
@Параметры:
<Имя> - строка с идентификатором таблицы на форме. Для многострочной части формы
идентификатор - ""МногострочнаяЧасть"".
@ЗАМЕЧАНИЕ: 
Метод работает только после физического открытия окна формы.
@ПРИМЕР: 
ФормаРасш = СоздатьОбъект(""РасширениеФормы"");
ФормаРасш.РаскрашиватьТаблицу(""Табл"");
"
    },
    {"Item","AST","СбросМодифицированности","ResetModify",
"СбросМодифицированности()",
"ResetModify()",
"@Синтаксис:
СбросМодифицированности()
@Назначение:
Сбрасывает флаг модифицированности для текущей формы.
"
    },
    {"Item","AST","ТекущийАтрибут","CurrentAttrib",
"ТекущийАтрибут()",
"CurrentAttrib()",
"@Синтаксис:
ТекущийАтрибут()
@Назначение:
Метод предназначен для получение текущего атрибута. Позиционирование на атрибуте
осуществляется методами НайтиАтрибут() и ПолучитьСледующийАтрибут().
@ПРИМЕР: 
ФормаРасш = СоздатьОбъект(""РасширениеФормы"");
р = ФормаРасш.НайтиАтрибут(2,""Выбор"");
Пока р = 1 Цикл
        Сообщить(ФормаРасш.ТекущийАтрибут().Идентификатор);
        р = ФормаРасш.ПолучитьСледующийАтрибут();
КонецЦикла;
"
    },
    {"Item","AST","ТипОбъекта","ObjectType",
"ТипОбъекта()",
"ObjectType()",
"@Синтаксис:
ТипОбъекта()
@Назначение:
Возвращает тип объекта, которому принадлежит расширяемая форма.
@ПРИМЕР: 
ФормаРасш = СоздатьОбъект(""РасширениеФормы""); 
ФормаРасш.УстановитьФорму(Форма);
Сообщить(ФормаРасш.ТипОбъекта());
// выводит строку вида: Обработка
"
    },
    {"Item","AST","УстановитьАвтоширинуВТаблице","SetAutoAdjustTable",
"УстановитьАвтоширинуВТаблице(<?>,)",
"SetAutoAdjustTable(<?>,)",
"@Синтаксис:
УстановитьАвтоширинуВТаблице(<Имя>,<Флаг>)
@Назначение:
Снимает/устанавливает флаг автоширины колонок в таблице.
@Параметры:
<Имя> - строка с идентификатором таблицы значений на форме или МногострочнаяЧасть для
доступа к многострочной части формы.
<Флаг> - новое значение флага автоширины колонок.
@ЗАМЕЧАНИЕ: 
Метод работает только после физического открытия окна формы.
@ПРИМЕР: 
РФорма = СоздатьОбъект(""РасширениеФормы"");
РФорма.УстановитьАвтоширинуВТаблице(Табл,0);
"
    },
    {"Item","AST","УстановитьКартинкуМногострочнойЧасти","SetTablePicture",
"УстановитьКартинкуМногострочнойЧасти(<?>)",
"SetTablePicture(<?>)",
"@Синтаксис:
УстановитьКартинкуМногострочнойЧасти(ИмяКартинки)
@Назначение:
Метод предназначен для подмены системных пиктограмм многострочной части формы списка на пользовательский набор пиктограмм из библиотеки картинок. Установка пиктограмм осуществляется только для первой колонки многострочной части, в которой штатно отображаются системные пиктограммы.
@Параметры:
<ИмяКартинки> - (Строка) Идентификатор картинки в библиотеке картинок для установки
"
    },
    {"Item","AST","УстановитьКурсор","SetCurcor",
"УстановитьКурсор(<?>)",
"SetCurcor(<?>)",
"@Синтаксис:
УстановитьКурсор(<ИмяКурсора>)
@Назначение:
Перехват курсора для текущего объекта.
@Параметры:
<ИмяКурсора> - Если в качестве параметра передается строковое значение, то оно воспринимается
как путь к файлу с курсором. Если ни чего не передавать, то для текущего объекта перехват курсора
отключается. Если передается числовое значение, то устанавливается курсор из системы. 
Возможные значения:
(значение) - (виндовая константа, которой соответсвует это значение)
1 - IDC_ARROW;
2 - IDC_IBEAM;
3 - IDC_WAIT;
4 - IDC_CROSS;
5 - IDC_UPARROW;
6 - IDC_SIZENWSE;
7 - IDC_SIZENESW;
8 - IDC_SIZEWE;
9 - IDC_SIZENS;
10 - IDC_SIZEALL;
11 - IDC_NO;
12 - IDC_APPSTARTING;
13 - IDC_HELP.
@ЗАМЕЧАНИЕ: 
Любое другое числовое значение сбрасывает курсор.
@ПРИМЕР: 
Процедура ПриДвиженииМыши(сост, х, у)
   ФормаРасш = СоздатьОбъект(""РасширениеФормы"");
   Атр = ФормаРасш.ПолучитьАтрибутПоКоординатам(х,у);
   Если ТипЗначенияСтр(Атр) = ""АтрибутФормы"" Тогда
      ФормаРасш.УстановитьКурсор(Число(Атр.Заголовок));
   Иначе
      ФормаРасш.УстановитьКурсор(0);
   КонецЕсли;
КонецПроцедуры
"
    },
    {"Item","AST","УстановитьТекущуюЯчейку","",
"УстановитьТекущуюЯчейку(<?>,,)",
"",
"@Синтаксис:
УстановитьТекущуюЯчейку(Имя, Х, У)
@Назначение:
Устанавливает текущей ячейку в таблице (таблице значений или многострочной части), заданной параметром Имя, по указанным координатам.
@Параметры:
<Имя> - 
<Х> - координата по горизонтали
<У> - координата по вертикали.
"
    },
    {"Item","AST","УстановитьФорму","AssignForm",
"УстановитьФорму(<?>)",
"AssignForm(<?>)",
"@Синтаксис:
УстановитьФорму(Форма)
@Назначение:
Привязавает указанную форму к объекту. Вся дальнейшая работа будет вестись именно
с этой формой. При создании объекта РасширениеФормы, он сразу привязывается к
текущей форме, если таковая присутствует, т.е. объект создается не в процедуре глобального
модуля.
@ПРИМЕР: 
ФормаРасш = СоздатьОбъект(""РасширениеФормы""); 
ФормаРасш.УстановитьФорму(Форма);
"
    },
    {"Item","AST","УстановитьШиринуКолонки","SetColumnWidth",
"УстановитьШиринуКолонки(<?>,,)",
"SetColumnWidth(<?>,,)",
"@Синтаксис:
УстановитьШиринуКолонки(Имя, НомерКолонки, Ширина)
@Назначение:
Метод предназначен для установки ширины колонки таблицы в соответствии с заданными параметрами.
@Параметры:
<Имя> - (Строка) Идентификатор таблицы значений на форме или ""МногострочнаяЧасть"" для доступа к многострочной части формы.
<НомерКолонки> - (Число) Номер колонки, начиная с нуля, для которой изменяется ширина.
<Ширина> - (Число) Положительное число - новое значение ширины колонки таблицы.
@ЗАМЕЧАНИЕ: 
Метод работает только после физического открытия окна формы.
"
    },
    {"Item","AST","ФиксироватьМногострочнуюЧасть","FixMultiLine",
"ФиксироватьМногострочнуюЧасть(<?>)",
"FixMultiLine(<?>)",
"@Синтаксис:
ФиксироватьМногострочнуюЧасть(<Кол>)
@Назначение:
Фиксирует заданное количество колонок в многострочной части формы.
@Параметры:
<Кол> - количество фиксируемых колонок
@ЗАМЕЧАНИЕ: 
Метод работает только после физического открытия окна формы.
@ПРИМЕР: 
ФормаРасш = СоздатьОбъект(""РасширениеФормы""); 
ФормаРасш.УстановитьФорму(Форма);
ФормаРасш.ФиксироватьМногострочнуюЧасть(2);
"
    },
   },
  },
  {"Folder","AST","Объект АтрибутФормы","AttribEx",
   {"Folder","AST","Атрибуты","",
    {"Item","AST","Автовыбор","",
"Автовыбор",
"",
"@Синтаксис:
Автовыбор
@Назначение:
чтение/установка соответсвующего флага атрибута формы
"
    },
    {"Item","AST","Видимость","Visible",
"Видимость",
"Visible",
"@Синтаксис:
Видимость
@Назначение:
Доступ к значению видимости атрибута формы. Атрибут для чтения/записи.
@ПРИМЕР: 
ФормаРасш = СоздатьОбъект(""РасширениеФормы""); 
ФормаРасш.УстановитьФорму(Форма);
Для Х = 0 По ФормаРасш.КоличествоАтрибутов() - 1 Цикл
  ФормаРасш.ПолучитьАтрибут(Х).Видимость = 1;
КонецЦикла;
"
    },
    {"Item","AST","Выравнивание","Align",
"Выравнивание",
"Align",
"@Синтаксис:
АтрФормы.Выравнивание = ''Лево'';
@Параметры:
Возможные значение - ''Лево'', ''Центр'', ''Право''
Чтение/запись
"
    },
    {"Item","AST","Доступность","ReadOnly",
"Доступность",
"ReadOnly",
"@Синтаксис:
Доступность
@Назначение:
Доступ к значению доступности атрибута формы. Атрибут для чтения/записи.
@ПРИМЕР: 
ФормаРасш = СоздатьОбъект(""РасширениеФормы""); 
ФормаРасш.УстановитьФорму(Форма);
Для Х = 0 По ФормаРасш.КоличествоАтрибутов() - 1 Цикл
  ФормаРасш.ПолучитьАтрибут(Х).Доступность = 0;
КонецЦикла;
"
    },
    {"Item","AST","Заголовок","Caption",
"Заголовок",
"Caption",
"@Синтаксис:
Заголовок
@Назначение:
Доступ к значению заголовка атрибута формы. Атрибут для чтения/записи.
Свойство ''Заголовок'' для многострочной части возвращает строку ''МногострочнаяЧасть''

@ПРИМЕР: 
ФормаРасш = СоздатьОбъект(''РасширениеФормы''); 
ФормаРасш.УстановитьФорму(Форма);
ФормаРасш.ПолучитьАтрибут(5).Заголовок = ''С&формировать'';
"
    },
    {"Item","AST","Значение","Value",
"Значение",
"Value",
"@Синтаксис:
Значение
@Назначение:
Доступ к значению, хранимому в атрибуте. Атрибут для чтения/записи.
@ПРИМЕР: 
АтрФормы = СоздатьОбъект(""АтрибутФормы""); 
АтрФормы.УстановитьАтрибут(Форма,3);
ЗначениеАтр = АтрФормы.Значение;
АтрФормы.Значение = ТекущаяДата();
"
    },
    {"Item","AST","Идентификатор","AttribID",
"Идентификатор",
"AttribID",
"@Синтаксис:
Идентификатор
@Назначение:
Доступ к значению идентификатора атрибута, если он задан. Атрибут только для чтения.
@ПРИМЕР: 
АтрФормы = СоздатьОбъект(""АтрибутФормы""); 
АтрФормы.УстановитьАтрибут(Форма,3);
ИдАтр = АтрФормы.Идентификатор;
"
    },
    {"Item","AST","ИмеетКнопкуВыбора","",
"ИмеетКнопкуВыбора",
"",
"@Синтаксис:
ИмеетКнопкуВыбора
@Назначение:
чтение соответсвующего флага атрибута формы
"
    },
    {"Item","AST","Картинка","Picture",
"Картинка",
"Picture",
"@Синтаксис:
АтрФормы.Картинка = ИдентификаторКартинкиВБиблиотеке
@Назначение:
Установка картинки в атрибут.
"
    },
    {"Item","AST","Класс","Class",
"Класс",
"Class",
"@Синтаксис:
Класс
@Назначение:
Windows-класс окна атрибута формы. Это свойство в основном предназначено для служебных нужд разработчиков компоненты
"
    },
    {"Item","AST","Маска","Mask",
"Маска",
"Mask",
"@Синтаксис:
Маска
@Назначение:
Доступ к маске реквизита. Атрибут для чтения/записи.
@ПРИМЕР: 
АтрФормы = СоздатьОбъект(""АтрибутФормы""); 
АтрФормы.УстановитьАтрибут(Форма,3);
АтрФормы.Маска = ""999-99-99"";
"
    },
    {"Item","AST","Описание","Description",
"Описание",
"Description",
"@Синтаксис:
Описание
@Назначение:
Доступ к значению описания атрибута формы. Атрибут для чтения/записи.
@ЗАМЕЧАНИЕ: 
Атрибут становится атрибутом только для чтения после физического открытия формы.
@ПРИМЕР: 
АтрФормы = СоздатьОбъект(""АтрибутФормы""); 
АтрФормы.УстановитьАтрибут(Форма,10);
Сообщить(АтрФормы.Описание);
"
    },
    {"Item","AST","Подсказка","Hint",
"Подсказка",
"Hint",
"@Синтаксис:
Подсказка
@Назначение:
Доступ к значению подсказки атрибута формы. Атрибут для чтения/записи.
@ПРИМЕР: 
АтрФормы = СоздатьОбъект(""АтрибутФормы""); 
АтрФормы.УстановитьАтрибут(Форма,10);
АтрФормы.Подсказка = ""Печать документа"";
"
    },
    {"Item","AST","Рамка","Border",
"Рамка",
"Border",
"@Синтаксис:
Рамка
@Назначение:
Доступ к флагу наличия рамки у окна атрибута формы
"
    },
    {"Item","AST","РасширенныйСтиль","",
"РасширенныйСтиль",
"",
"@Синтаксис:
РасширенныйСтиль
@Назначение:
чтение и запись расширенного стиля окна атрибута формы
"
    },
    {"Item","AST","РодительскоеОкно","ParentWindow",
"РодительскоеОкно",
"ParentWindow",
"@Синтаксис:
РодительскоеОкно
@ЗАМЕЧАНИЕ: 
Процедура ПриРедактированииСвойства()
        тс = ТаблСвойства.ТекущаяСтрока();
        Если тс = 0 Тогда
                Возврат;
        КонецЕсли;
        _тк = ТаблСвойства.ТекущаяКолонка();
        тк = ТаблСвойства.ПолучитьПараметрыКолонки(_тк);

        в = ""
"
    },
    {"Item","AST","СвязанС","Related",
"СвязанС",
"Related",
"@Синтаксис:
СвязанС
@Назначение:
Доступ к атрибуту связи реквизита с другим реквизитом на форме. Атрибут для чтения/записи.
@ПРИМЕР: 
АтрФормы = СоздатьОбъект(""АтрибутФормы""); 
АтрФормы.УстановитьАтрибут(Форма,""Договор"");
АтрФормы.СвязанС = ""Контрагент"";
"
    },
    {"Item","AST","Слой","Layer",
"Слой",
"Layer",
"@Синтаксис:
Слой
@Назначение:
Доступ к значению принадлежности к слою атрибута формы. Атрибут для чтения/записи.
@ПРИМЕР: 
ФормаРасш = СоздатьОбъект(""РасширениеФормы""); 
ФормаРасш.УстановитьФорму(Форма);
Для Х = 0 По ФормаРасш.КоличествоАтрибутов() - 1 Цикл
    Если ФормаРасш.ПолучитьАтрибут(Х).Слой = ""Слой1"" Тогда
        ФормаРасш.ПолучитьАтрибут(Х).Видимость = 0; 
    КонецЕсли;
КонецЦикла;
"
    },
    {"Item","AST","Стиль","",
"Стиль",
"",
"@Синтаксис:
Стиль
@Назначение:
чтение и запись стиля окна атрибута формы
"
    },
    {"Item","AST","Тип","Type",
"Тип",
"Type",
"@Синтаксис:
Тип
@Назначение:
Доступ к значению типу контрола атрибута. Атрибут только для чтения.
@ПРИМЕР: 
ФормаРасш = СоздатьОбъект(""РасширениеФормы""); 
ФормаРасш.УстановитьФорму(Форма);
Для Х = 0 По ФормаРасш.КоличествоАтрибутов() - 1 Цикл
    Если ФормаРасш.ПолучитьАтрибут(Х).Тип = 1 Тогда
        ФормаРасш.ПолучитьАтрибут(Х).Доступность = 0; 
    КонецЕсли;
КонецЦикла;
"
    },
    {"Item","AST","Формула","Formula",
"Формула",
"Formula",
"@Синтаксис:
Формула
@Назначение:
Доступ к значению формулы атрибута формы. Атрибут для чтения/записи.
@ПРИМЕР: 
АтрФормы = СоздатьОбъект(""АтрибутФормы""); 
АтрФормы.УстановитьАтрибут(Форма,10);
Если ПустоеЗначение(АтрФормы.Формула)=1 Тогда
    АтрФормы.Формула = ""#Закрыть"";
КонецЕсли;
"
    },
    {"Item","AST","ЦветФона","BkColor",
"ЦветФона",
"BkColor",
"@Синтаксис:
ЦветФона
@Назначение:
Доступ к цвету фона реквизита. Атрибут для чтения/записи.
@ЗАМЕЧАНИЕ: 
Применимо только к объеткам на форме ""Текст"" и ""РеквизитДиалога"".
@ПРИМЕР: 
АтрФормы = СоздатьОбъект(""АтрибутФормы""); 
АтрФормы.УстановитьАтрибут(Форма,3);
АтрФормы.ЦветФона = 255;
"
    },
    {"Item","AST","ЦветШрифта","FontColor",
"ЦветШрифта",
"FontColor",
"@Синтаксис:
ЦветШрифта
@Назначение:
Доступ к цвету шрифта реквизита. Атрибут для чтения/записи.
@ЗАМЕЧАНИЕ: 
Применимо только к объектам на форме ""Текст"" и ""РеквизитДиалога"".
@ПРИМЕР: 
АтрФормы = СоздатьОбъект(""АтрибутФормы""); 
АтрФормы.УстановитьАтрибут(Форма,3);
АтрФормы.ЦветШрифта= 255;
"
    },
    {"Item","AST","Шрифт","Font",
"Шрифт",
"Font",
"@Синтаксис:
Шрифт
@Назначение:
Доступ к шрифту атрибута. Содержит код шрифта. Новый шрифт можно создать методом СоздатьШрифт / CreateFont или СоздатьШрифтНаОсновании / CreateFontCausedBy.
"
    },
   },
   {"Folder","AST","Методы","",
    {"Item","AST","ИзменитьРасширенныйСтиль","",
"ИзменитьРасширенныйСтиль(<?>,)",
"",
"@Синтаксис:
ИзменитьРасширенныйСтиль(УдаляемыйСтиль, ДобавляемыйСтиль)
@Параметры:
<УдаляемыйСтиль> - 
<> - 
"
    },
    {"Item","AST","ИзменитьСтиль","",
"ИзменитьСтиль(<?>,)",
"",
"@Синтаксис:
ИзменитьСтиль(УдаляемыйСтиль, ДобавляемыйСтиль)
@Параметры:
<УдаляемыйСтиль> - 
<> - 
"
    },
    {"Item","AST","ПерехватитьСписокЗначений","WrapValueList",
"ПерехватитьСписокЗначений()",
"WrapValueList()",
"@Синтаксис:
ПерехватитьСписокЗначений()
@Назначение:
Добавляет в список значений на форме (поле со списком) возможность ручного набора.
@ЗАМЕЧАНИЕ: 
Метод работает только после физического открытия окна формы.
@ПРИМЕР: 
Процедура ПослеОткрытия()
   АтрФормы = СоздатьОбъект(""АтрибутФормы""); 
   АтрФормы.УстановитьАтрибут(Форма,""VL"");
   АтрФормы.ПерехватитьСписокЗначений();
КонецПроцедуры
"
    },
    {"Item","AST","ПолучитьКоординаты","GetCoordinates",
"ПолучитьКоординаты(<?>,,,)",
"GetCoordinates(<?>,,,)",
"@Синтаксис:
ПолучитьКоординаты(<Лево>,<Верх>,<Ширина>,<Высота>)
@Назначение:
Получить значения для положения и размеров атрибута. Метод возвращает в переданные
переменные соответствующие значения.
@Параметры:
<Лево> - Необязательный параметр.  Расстояние от левой границы формы до левой границы атрибута.
<Верх> - Необязательный параметр.  Расстояние от верхней границы формы до верхней границы атрибута.
<Ширина> - Необязательный параметр.  Ширина атрибута.
<Высота> - Необязательный параметр.  Высота атрибута.
@ПРИМЕР: 
АтрФормы = СоздатьОбъект(""АтрибутФормы""); 
АтрФормы.УстановитьАтрибут(Форма,3);
Лево=0; Верх=0; Ширина=0; Высота=0;
АтрФормы.ПолучитьКоординаты(Лево, Верх, Ширина, Высота);
"
    },
    {"Item","AST","ПолучитьФорму","GetForm",
"ПолучитьФорму()",
"GetForm()",
"@Синтаксис:
ПолучитьФорму()
@Назначение:
Возвращает форму, которая указывалась при инициализации объекта в методе УстановитьАтрибут().
@ПРИМЕР: 
Фрм = АтрФормы.ПолучитьФорму();
"
    },
    {"Item","AST","ТипЗначенияСтр","ValueTypeStr",
"ТипЗначенияСтр()",
"ValueTypeStr()",
"@Синтаксис:
ТипЗначенияСтр()
@Назначение:
Возвращает тип значения атрибута в виде строки.
@ПРИМЕР: 
АтрФормы = СоздатьОбъект(""АтрибутФормы""); 
АтрФормы.УстановитьАтрибут(Форма,3);
Сообщить(Тип:  + АтрФормы.ТипЗначенияСтр());
"
    },
    {"Item","AST","УстановитьАтрибут","AssignAttrib",
"УстановитьАтрибут(<?>,)",
"AssignAttrib(<?>,)",
"@Синтаксис:
УстановитьАтрибут(<Форма>,<Номер>)
@Назначение:
Привязывает объект к реквизиту формы.
@Параметры:
<Форма> - объект Форма.
<Номер> - номер или строка с идентификатором атрибута формы. Для получение доступа к
многострочной части формы необходимо в этот метод передать строку МногострочнаяЧасть.
@ЗАМЕЧАНИЕ: 
Перед использованием объекта обязательно надо привязать его к форме и реквизиту.
Единственное исключение, когда объект получен методом ПолучитьАтрибут() объекта
РасширениеФормы.
@ПРИМЕР: 
АтрФормы = СоздатьОбъект(""АтрибутФормы""); 
АтрФормы.УстановитьАтрибут(Форма,3);
"
    },
    {"Item","AST","УстановитьКоординаты","SetCoordinates",
"УстановитьКоординаты(<?>,,,)",
"SetCoordinates(<?>,,,)",
"@Синтаксис:
УстановитьКоординаты(<Лево>,<Верх>,<Ширина>,<Высота>)
@Назначение:
Устанавливает новые значения для положения и размеров атрибута. Если какой-либо параметр
при вызове метода не задан, то данный параметр не изменяется.
@Параметры:
<Лево> - Необязательный параметр.  Расстояние от левой границы формы до левой границы атрибута.
<Верх> - Необязательный параметр.  Расстояние от верхней границы формы до верхней границы атрибута.
<Ширина> - Необязательный параметр.  Ширина атрибута.
<Высота> - Необязательный параметр.  Высота атрибута.
@ПРИМЕР: 
АтрФормы = СоздатьОбъект(""АтрибутФормы""); 
АтрФормы.УстановитьАтрибут(Форма,3);
Высота=0;
АтрФормы.ПолучитьКоординаты(,,,Высота);
АтрФормы.УстановитьКоординаты(,,,Высота+40);
"
    },
    {"Item","AST","УстановитьКурсор","SetCurcor",
"УстановитьКурсор(<?>)",
"SetCurcor(<?>)",
"@Синтаксис:
УстановитьКурсор(<ИмяКурсора>)
@Назначение:
Перехват курсора для текущего объекта.
@Параметры:
<ИмяКурсора> - Если в качестве параметра передается строковое значение, то оно воспринимается
как путь к файлу с курсором. Если ни чего не передавать, то для текущего объекта перехват курсора
отключается. Если передается числовое значение, то устанавливается курсор из системы. 
Возможные значения:
(значение) - (виндовая константа, которой соответсвует это значение)
1 - IDC_ARROW;
2 - IDC_IBEAM;
3 - IDC_WAIT;
4 - IDC_CROSS;
5 - IDC_UPARROW;
6 - IDC_SIZENWSE;
7 - IDC_SIZENESW;
8 - IDC_SIZEWE;
9 - IDC_SIZENS;
10 - IDC_SIZEALL;
11 - IDC_NO;
12 - IDC_APPSTARTING;
13 - IDC_HELP.
@ЗАМЕЧАНИЕ: 
Любое другое числовое значение сбрасывает курсор.
@ПРИМЕР: 
Процедура ПриДвиженииМыши(сост, х, у)
   ФормаРасш = СоздатьОбъект(""РасширениеФормы"");
   Атр = ФормаРасш.ПолучитьАтрибутПоКоординатам(х,у);
   Если ТипЗначенияСтр(Атр) = ""АтрибутФормы"" Тогда
      Атр.УстановитьКурсор(Число(Атр.Заголовок));
   КонецЕсли;
КонецПроцедуры
"
    },
   },
   {"Folder","AST","Методы (для работы с объектом ""Дерево+Таблица"")","",
    {"Item","AST","ЗначениеВДерево","ValueToTree",
"ЗначениеВДерево(<?>,,)",
"ValueToTree(<?>,,)",
"@Синтаксис:
ЗначениеВДерево(<Строка>, <Колонка>, <Значение>)
@Назначение:
Устанавливает в ячейку объекта ""Дерево+таблица"" по указанным координатам заданное значение.
Возвращает:
0: значение не удалось установить;
1: значение установлено.
@Параметры:
<Строка> - строка с полным путем к строке дерева (если пустая строка, то значение в текущую строку);
<Колонка> - число, которое задает колонку;
<Значение> - значение, которое надо установить в указанную ячейку.
"
    },
    {"Item","AST","ЗначениеИзДерева","ValueFromTree",
"ЗначениеИзДерева(<?>,)",
"ValueFromTree(<?>,)",
"@Синтаксис:
ЗначениеИзДерева(<Строка>, <Колонка>)
@Назначение:
Возвращает значение, хранящееся в объекте ""Дерево+таблица"" по указанным в параметрах координатам.
@Параметры:
<Строка> - строка с полным путем к строке дерева (если пустая строка, то значение из текущей строки);
<Колонка> - число (идентификатор), которое задает колонку.
"
    },
    {"Item","AST","ИдентификаторКолонкиДерева","TreeColumnName",
"ИдентификаторКолонкиДерева(<?>)",
"TreeColumnName(<?>)",
"@Синтаксис:
ИдентификаторКолонкиДерева(НомерКолонки)
@Назначение:
Метод предназначен для получения идентификатора колонки терехваченной таблицы значений по ее номеру
@Параметры:
<НомерКолонки> - (Число) Номер колонки перехватываемой таблицы значений (начиная с 1)
"
    },
    {"Item","AST","ОбновитьДерево","UpdateTree",
"ОбновитьДерево()",
"UpdateTree()",
"@Синтаксис:
ОбновитьДерево()
@ЗАМЕЧАНИЕ: 
Метод работает только после выполнения метода ""ПерехватитьТаблицуЗначений()
"
    },
    {"Item","AST","ОпцииДерева","TreeOptions",
"ОпцииДерева(<?>,,,,)",
"TreeOptions(<?>,,,,)",
"@Синтаксис:
ОпцииДерева(ГоризонтальныеЛинии, ВертикальныеЛинии, ЛинииСвязки,СтильЗаголовка,СтильЛиний)
@Назначение:
Метод предназначен для установки опций отображения объекта ""Дерево+Таблица"".
@Параметры:
<ГоризонтальныеЛинии> - (Число) Флаг отображения горизонтальных линий таблицы. Если 0, то не отображать. Если отрицательно число или не указано, то опция не меняется. Необязательный.
<ВертикальныеЛинии> - (Число) Флаг отображения вертикальных линий таблицы. Если 0, то не отображать. Если отрицательно число или не указано, то опция не меняется. Необязательный.
<ЛинииСвязки> - (Число) Флаг отображения связующих линий дерева. Если 0, то не отображать. Если отрицательно число или не указано, то опция не меняется. Необязательный.
<СтильЗаголовка> - (Число) Флаг отображения заголовка. 0 - без заголовка, 1 - плоский заголовок, 2 - обычный заголовок
<СтильЛиний> - (Число) 0 – сплошная, 1 - пунктир /* ------- */, 2 - точки /* ....... */, 3 - пунктир-точка /* _._._._ */, 4 - пунктир-точка-точка /* _.._.._ */, 5 - нет линии, 7 - мелкая точка
"
    },
    {"Item","AST","ПерехватитьТаблицуЗначений","WrapValueTable",
"ПерехватитьТаблицуЗначений()",
"WrapValueTable()",
"@Синтаксис:
ПерехватитьТаблицуЗначений()
@Назначение:
Преобразует таблицу значений на форме в объект 'дерево+таблица'.
@ЗАМЕЧАНИЕ: 
Преобразуемая ТЗ должна иметь строго определенную структуру: первые три колонки служебные, 
остальные произвольные. Служебные колонки:
1: содержит ТЗ той же структуры со следующим уровнем дерева,
2: содержит номер пиктограммы, из установленной на перехватываемой ТЗ картинки, для отображения в дереве (если нулевое значение, то используются системные пиктограммы),
3: содержит наименование ветви дерева.
Метод работает только после физического открытия окна формы.
"
    },
    {"Item","AST","ПолучитьНомерКолонкиТаблицыЗначений","GetValueTableColumnNum",
"ПолучитьНомерКолонкиТаблицыЗначений(<?>)",
"GetValueTableColumnNum(<?>)",
"@Синтаксис:
ПолучитьНомерКолонкиТаблицыЗначений(НомерКолонки)
@Назначение:
Метод предназначен для преобразования номера колонки объекта ""Дерево+Таблица"" в номер колонки перехватываемой этим объектом таблицы значений. Необходимость этого метода вызвана тем, что объект ""Дерево+Таблица"" содержит только видимы колонки. Соответственно и нумерация колонок перехватываемой таблицы значения и самого объекта не совпадают.
@Параметры:
<НомерКолонки> - (Число) Номер колонки объекта
@ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: 
(Число) Номер колонки перехватываемой таблицы значений
"
    },
    {"Item","AST","РазвернутьУзел","ExpandNode",
"РазвернутьУзел(<?>)",
"ExpandNode(<?>)",
"@Синтаксис:
РазвернутьУзел(<Строка>)
@Назначение:
Разворачивает заданную строку объекта ""Дерево+таблица"".
@Параметры:
<Строка> - строка с полным путем к строке дерева (если пустая строка, то текущая строка);
"
    },
    {"Item","AST","СвернутьУзел","CollapseNode",
"СвернутьУзел(<?>)",
"CollapseNode(<?>)",
"@Синтаксис:
СвернутьУзел(<Строка>)
@Назначение:
Сворачивает заданную строку объекта ""Дерево+таблица"".
@Параметры:
<Строка> - строка с полным путем к строке дерева (если пустая строка, то текущая строка);
"
    },
    {"Item","AST","ТекущаяКолонкаДерева","CurrentTreeColumn",
"ТекущаяКолонкаДерева()",
"CurrentTreeColumn()",
"@Синтаксис:
ТекущаяКолонкаДерева()
@Назначение:
Возвращает номер текущей колонки дерева.
"
    },
    {"Item","AST","ТекущаяСтрокаДерева","CurrentTreeItem",
"ТекущаяСтрокаДерева()",
"CurrentTreeItem()",
"@Синтаксис:
ТекущаяСтрокаДерева()
@Назначение:
Возвращает полный путь к текущей строке в дереве.
"
    },
    {"Item","AST","УзелРазвернут","",
"УзелРазвернут(<?>)",
"",
"@Синтаксис:
УзелРазвернут(<Строка>)
@Назначение:
Предназначен для получения информации о состоянии развернутости дерева
@Параметры:
<Строка> - (Строка) Полный путь к строке. Если пустая, то выполняется для текущей строки
@ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: 
(Число) 1 - узел развернут, 0 - узел свернут
"
    },
    {"Item","AST","УстановитьТекущийУзел","SetCurrentNode",
"УстановитьТекущийУзел(<?>)",
"SetCurrentNode(<?>)",
"@Синтаксис:
УстановитьТекущийУзел(<Строка>)
@Назначение:
Делает заданную строку объекта ""Дерево+таблица"" текущей.
@Параметры:
<Строка> - строка с полным путем к строке дерева (если пустая строка, то текущая строка);
"
    },
    {"Item","AST","ЭтоГруппа","IsGroupNode",
"ЭтоГруппа(<?>)",
"IsGroupNode(<?>)",
"@Синтаксис:
ЭтоГруппа(<Строка>)
@Назначение:
Проверяет является ли группой заданная строка объекта ""Дерево+таблица"".
@Параметры:
<Строка> - строка с полным путем к строке дерева (если пустая строка, то текущая строка);
@ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: 
1 - если заданный узел имеет вложенные элементы; 0 - иначе.
"
    },
   },
  },
  {"Folder","AST","Объект Окна","Windows",
   {"Folder","AST","Методы","",
    {"Item","AST","ВидимостьМеню","VisibleMenu",
"ВидимостьМеню(<?>,)",
"VisibleMenu(<?>,)",
"@Синтаксис:
ВидимостьМеню(<ИмяПунктаМеню>,<ФлагВидимости>)
@Назначение:
Устанавливает видимость пункта меню или подменю по имени.
@Параметры:
<ИмяПунктаМеню> - имя пункта меню или подменю в том виде, в котором оно попадает в представление в список
значений, возвращаемый методом ""ПолучитьМеню"";
<ФлагВидимости> - флаг видимости: 1 - пункт меню становится видимым; 0 - пункту меню скрывается.
"
    },
    {"Item","AST","ВключитьМодальныйРежим","BeginModalState",
"ВключитьМодальныйРежим()",
"BeginModalState()",
"@Синтаксис:
ВключитьМодальныйРежим()
@Назначение:
Делает главное окно 1С модальным для системы.
"
    },
    {"Item","AST","Восстановить","Restore",
"Восстановить(<?>)",
"Restore(<?>)",
"@Синтаксис:
Восстановить(<Форма>)
@Назначение:
Восстановление окна.
@Параметры:
<Форма> - Необязательный параметр.  Объект Форма окна, которое необходимо восстановить.
По умолчанию - главное окно программы.
"
    },
    {"Item","AST","ВыключитьМодальныйРежим","EndModalState",
"ВыключитьМодальныйРежим()",
"EndModalState()",
"@Синтаксис:
ВыключитьМодальныйРежим()
@Назначение:
Отменяет модальный режим главного окна 1С.
"
    },
    {"Item","AST","ДоступностьМеню","EnableMenu",
"ДоступностьМеню(<?>,)",
"EnableMenu(<?>,)",
"@Синтаксис:
ДоступностьМеню(<ИмяПунктаМеню>,<ФлагДоступности>)
@Назначение:
Устанавливает доступность пункта меню или подменю по имени.
@Параметры:
<ИмяПунктаМеню> - имя пункта меню или подменю в том виде, в котором оно попадает в представление в список
значений, возвращаемый методом ""ПолучитьМеню"";
<ФлагДоступности> - флаг доступности: 1 - пункт меню становится доступным; 0 - запрещается доступ к
пункту меню.
"
    },
    {"Item","AST","ЗакрытьВсеОкна","CloseAllWindows",
"ЗакрытьВсеОкна(<?>)",
"CloseAllWindows(<?>)",
"@Синтаксис:
ЗакрытьВсеОкна(Таймаут)
@Назначение:
закрывает все открытые окна внутри текущей сесии 1С:Предприятия.
@Параметры:
<Таймаут> - Необязательный параметр.  значение таймаута (в секундах) для всех окон предупреждений, которые возникают в процессе закрытия окон (вопросы о сохранении, предупреждения и т.д.)
"
    },
    {"Item","AST","ЗакрытьОкно","CloseWindow",
"ЗакрытьОкно(<?>)",
"CloseWindow(<?>)",
"@Синтаксис:
ЗакрытьОкно(Конт)
@Назначение:
закрывает окно 1С:Предприятия.
@Параметры:
Конт - контекст формы которую необходимо закрыть
"
    },
    {"Item","AST","Максимизировать","Maximize",
"Максимизировать(<?>)",
"Maximize(<?>)",
"@Синтаксис:
Максимизировать(<Форма>)
@Назначение:
Максимизирование окна.
@Параметры:
<Форма> - Необязательный параметр.  Объект Форма окна, которое необходимо максимизировать.
По умолчанию - главное окно программы.
"
    },
    {"Item","AST","МенюОкна","WindowsMenu",
"МенюОкна(<?>,,,,)",
"WindowsMenu(<?>,,,,)",
"@Синтаксис:
МенюОкна(<Форма>,<Закрыть>,<Максимизировать>,<Минимизировать>,<Восстановить>)
@Назначение:
Управление системным меню окна.
@Параметры:
<Форма> - Необязательный параметр.  Объект Форма окна, для которого необходимо установить системное меню.
По умолчанию - главное окно программы.
<Закрыть>,<Максимизировать>,<Минимизировать>,<Восстановить> - флаги управления соответсвующими пунктами
системного меню. Если флаг установлен в 0, то пункт меню скрывается.
"
    },
    {"Item","AST","Минимизировать","Minimize",
"Минимизировать(<?>)",
"Minimize(<?>)",
"@Синтаксис:
Минимизировать(<Форма>)
@Назначение:
Минимизирование окна.
@Параметры:
<Форма> - Необязательный параметр.  Объект Форма окна, которое необходимо минимизировать.
По умолчанию - главное окно программы.
"
    },
    {"Item","AST","МинимизироватьВТрей","MinimizeToTray",
"МинимизироватьВТрей(<?>)",
"MinimizeToTray(<?>)",
"@Синтаксис:
МинимизироватьВТрей(<Флаг>)
@Назначение:
Разрешить/запретить сворачивание главного окна в трей при минимизации.
@Параметры:
<Флаг> - число: 1 - разрешить, 0 - запретить.
"
    },
    {"Item","AST","НаПереднийПлан","BringWindowToTop",
"НаПереднийПлан(<?>)",
"BringWindowToTop(<?>)",
"@Синтаксис:
НаПереднийПлан(<Форма>)
@Назначение:
Выдвижение окна на передний план.
@Параметры:
<Форма> - Необязательный параметр.  Объект Форма окна, которое необходимо выдвинуть на передний план.
По умолчанию - главное окно программы.
"
    },
    {"Item","AST","ПоказыватьПанели","ShowToolBars",
"ПоказыватьПанели(<?>)",
"ShowToolBars(<?>)",
"@Синтаксис:
ПоказыватьПанели(<ФлагВидимости>)
@Назначение:
Устанавливает видимость всех панелей.
@Параметры:
<ФлагВидимости> - флаг видимости: 1 - панели становится видимыми; 0 - все панели скрываются.
"
    },
    {"Item","AST","ПоказыватьПанель","ShowToolBar",
"ПоказыватьПанель(<?>,)",
"ShowToolBar(<?>,)",
"@Синтаксис:
ПоказыватьПанель(<ИмяПанели>,<ФлагВидимости>)
@Назначение:
Устанавливает видимость панели по имени.
@Параметры:
<ИмяПанели> - имя панели в том виде, в котором оно попадает в представление в список
значений, возвращаемый методом ""ПолучитьПанели"";
<ФлагВидимости> - флаг видимости: 1 - панель становится видимой; 0 - панель скрывается.
"
    },
    {"Item","AST","ПоказыватьСтрокуСостояния","ShowStatusBar",
"ПоказыватьСтрокуСостояния(<?>)",
"ShowStatusBar(<?>)",
"@Синтаксис:
ПоказыватьСтрокуСостояния(<ФлагВидимости>)
@Назначение:
Устанавливает видимость строки состояния.
@Параметры:
<ФлагВидимости> - флаг видимости: 1 - строка состояния становится видимой; 0 - строка состояния скрывается.
"
    },
    {"Item","AST","ПоложениеОкна","WindowsPos",
"ПоложениеОкна(<?>,,)",
"WindowsPos(<?>,,)",
"@Синтаксис:
ПоложениеОкна(<Форма>,<Лево>,<Верх>)
@Назначение:
Установить/получить положение заданного окна.
@Параметры:
<Форма> - Необязательный параметр.  Объект Форма окна, для которого необходимо установить или получить
положение. По умолчанию - главное окно программы.
<Лево> - новая координата окна по горизонтали, в переменную возвращается координата до вызова метода;
<Верх> - новая координата окна по вертикали, в переменную возвращается координата до вызова метода.
"
    },
    {"Item","AST","ПолучитьМеню","GetMenu",
"ПолучитьМеню()",
"GetMenu()",
"@Синтаксис:
ПолучитьМеню()
@Назначение:
Возвращает список значений с главным меню программы. В представлении помещается строка с пунктом
меню, в значении числовой идентификатор пункта меню или список значений, если текущий пункт - это
подменю. Уровень вложения списков значений ограничен только количеством вложенных подменю.
"
    },
    {"Item","AST","ПолучитьПанели","GetToolBars",
"ПолучитьПанели()",
"GetToolBars()",
"@Синтаксис:
ПолучитьПанели()
@Назначение:
Возвращает список значений со списком всех панелей программы. В представлении помещается строка с
наименованием панели, в значении - флаг видимости панели.
"
    },
    {"Item","AST","ПолучитьРазрешение","GetResolution",
"ПолучитьРазрешение(<?>,)",
"GetResolution(<?>,)",
"@Синтаксис:
ПолучитьРазрешение(<Горизонтальное>,<Вертикальное>)
@Назначение:
Получить текущее разрешение.
@Параметры:
<Горизонтальное>,<Вертикальное> - переменные, куда возвращаются соответствующие значения текущего
разрешения экрана.
"
    },
    {"Item","AST","РазмерОкна","WindowsSize",
"РазмерОкна(<?>,,,)",
"WindowsSize(<?>,,,)",
"@Синтаксис:
РазмерОкна(<Форма>,<Ширина>,<Высота>,<Стиль>,<Параметр>)
@Назначение:
Установить/получить размер заданного окна.
@Параметры:
<Форма> - Необязательный параметр.  Объект Форма окна, для которого необходимо установить или получить
размер. По умолчанию - главное окно программы.
<Ширина> - новая ширина окна, в переменную возвращается ширина до вызова метода;
<Высота> - новая высота окна, в переменную возвращается высота до вызова метода;
<Стиль> - имеет смысл только для главного окна программы, устанавливает стиль окна (число 1 или 2).
<Параметр> - при передачи этого параметра = 1 и параметр Форма = '''' будут возвращены ширина и высота пользовательской части окна.
@ЗАМЕЧАНИЕ: 
Ширину и высоту окна нельзя сделать меньше или равной нулю.
"
    },
    {"Item","AST","СтильОкна","WindowsStyle",
"СтильОкна(<?>,)",
"WindowsStyle(<?>,)",
"@Синтаксис:
СтильОкна(<Форма>,<Стиль>)
@Назначение:
Устанавливает необходимый стиль для заданного окна.
@Параметры:
<Форма> - Необязательный параметр.  Объект Форма окна, для которого необходимо установить стиль.
По умолчанию - главное окно программы.
<Стиль> - значение стиля окна (число от 0 до 2).
"
    },
    {"Item","AST","ЦентрироватьОкно","CenterWindow",
"ЦентрироватьОкно(<?>)",
"CenterWindow(<?>)",
"@Синтаксис:
ЦентрироватьОкно(<Форма>)
@Назначение:
Центрирование окна.
@Параметры:
<Форма> - Необязательный параметр.  Объект Форма окна, которое необходимо центрировать.
По умолчанию - главное окно программы.
"
    },
   },
  },
  {"Folder","AST","Объект НастройкиПользователя","",
   {"Folder","AST","Атрибуты","",
    {"Item","AST","ШрифтМодулей","",
"",
"",
"Item
"
    },
    {"Item","AST","ШрифтОкнаСообщений","",
"ШрифтОкнаСообщений",
"",
"Item
"
    },
    {"Item","AST","ШрифтОписаний","",
"ШрифтОписаний",
"",
"Item
"
    },
    {"Item","AST","ШрифтТабличныхДокументов","",
"ШрифтТабличныхДокументов",
"",
"Item
"
    },
    {"Item","AST","ШрифтТабло","",
"ШрифтТабло",
"",
"Item
"
    },
    {"Item","AST","ШрифтТекстовыхДокументов","",
"ШрифтТекстовыхДокументов",
"",
"Item
"
    },
    {"Item","AST","ШрифтФорм","",
"ШрифтФорм",
"",
"Folder
"
    },
   },
  },
  {"Folder","AST","Объект Таймер","Timer",
   {"Folder","AST","Атрибуты","Атрибуты",
    {"Item","AST","Запущен","",
"Запущен",
"",
"@Синтаксис:
Запущен
@Параметры:
Только чтение
"
    },
    {"Item","AST","Интервал","",
"Интервал",
"",
"@Синтаксис:
Интервал
@Параметры:
Только чтение
"
    },
   },
   {"Folder","AST","Методы","Методы",
    {"Item","AST","ЗадатьОбработчикВГлобальномМодуле","",
"ЗадатьОбработчикВГлобальномМодуле",
"",
"@Синтаксис:
ЗадатьОбработчикВГлобальномМодуле(НаименованиеОбработчика)
"
    },
    {"Item","AST","ЗадатьОбработчикВМодулеФормы","",
"ЗадатьОбработчикВМодулеФормы",
"",
"@Синтаксис:
ЗадатьОбработчикВМодулеФормы(КонтекстФормы, НаименованиеОбработчика)
"
    },
    {"Item","AST","ЗадатьОбработчикВОбъекте","",
"ЗадатьОбработчикВОбъекте",
"",
"@Синтаксис:
ЗадатьОбработчикВОбъекте(Объект, НаименованиеОбработчика)
"
    },
    {"Item","AST","Запустить","",
"Запустить",
"",
"@Синтаксис:
Запустить(Интервал)
@Параметры:
Интервал - время в милисекундах
"
    },
    {"Item","AST","Остановить","",
"Остановить",
"",
"@Синтаксис:
Остановить()
"
    },
    {"Item","AST","УдалитьОбработчик","",
"УдалитьОбработчик",
"",
"@Синтаксис:
УдалитьОбработчик()
"
    },
   },
  },
 },
}