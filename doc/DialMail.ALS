{"Shell",
{"Folder","AST","DialMail 2.6.1b swa corp.","",
{"Folder","AST","Дозвон (RasDial)","",
{"Folder","AST","Атрибуты","",
{"Item","AST","ПоследняяОшибка","LastError","ПоследняяОшибка","LastError","@Синтаксис
ПоследняяОшибка
@Назначение
Дает код последней ошибки при неудачной попытке дозвона или разрыве соединения. Доступен по чтению.

"},
{"Item","AST","ПоследняяОшибкаСтр","LastErrorStr","ПоследняяОшибкаСтр","LastErrorStr","@Синтаксис
ПоследняяОшибкаСтр
@Назначение
Дает расшифровку кода последней ошибки при неудачной попытке дозвона или разрыве соединения. Доступен по чтению.

"},
{"Item","AST","ИдентификаторТекущегоСоединения","CurrentConnectHandle","ИдентификаторТекущегоСоединения","CurrentConnectHandle","@Синтаксис
ИдентификаторТекущегоСоединения
@Назначение
Дает целое число - идентификатор текущего соединения (установленного в данном объекте). Доступен после успешного вызова метода 'Дозвониться'. Доступен по чтению.
"},
{"Item","AST","ВестиЛогФайл","MakeLogFile","ВестиЛогФайл","MakeLogFile","@Синтаксис
ВестиЛогФайл
@Назначение
Реквизит позволяет вести лог в файле. 
1 - ведем лог файл
0 - нет
По умолчанию значение реквизита равно 0.
"}
},
{"Folder","AST","Методы","",
{"Item","AST","ВключитьДинамикМодема","SetModemSpeaker","ВключитьДинамикМодема(<?>);","SetModemSpeaker(<?>);","@Синтаксис
ВключитьДинамикМодема(<Действие>);
@Назначение
Включает / выключает динамик модема. Действует для дальнейших соединений в пределах одного объекта
@Параметры: 
<Действие> - 1 - включение динамика модема, 0 - выключение, -1 - используется значение, установленное в настройках модема. По умолчанию -1.

@Пример
...    
ЗагрузитьКомпоненту(''DialMail.dll'');
Соединение=СоздатьОбъект(''AddIn.RasDial'');
Соединение.ВключитьДинамикМодема(1);
Соединение.Дозвониться(''Соединение'',''guest'',''mtu'',''p1055555'',0);
...
"},
{"Item","AST","Дозвониться","Dial","Дозвониться(<?>,<?>,<?>,<?>,<?>,<?>);","Dial(<?>,<?>,<?>,<?>,<?>,<?>);","@Синтаксис
Дозвониться(<НазваниеПодключения>,<Пользователь>,<Пароль>,<НомерТелефона>,<ЗапуститьВПотоке>,<НомерТелефонаОбратногоВызова>);
@Назначение
Применение этого метода позволяет подключаться по Dial-Up'у - через удаленное соединение без ввода вручную логина, пароля и телефона.
@Возвращаемое значение:
1 - соединились.
-100 - запущен процесс дозвона (при <ЗапуститьВПотоке>=1)
0 - соединение не удалось.
@Параметры: 
<НазваниеПодключения> - название зарегестрированного в системе удаленного подключения (как в удаленном доступе)
<Пользователь> - имя пользователя, которое будет использоваться для доступа к удаленному компьютеру
<Пароль> - пароль пользователя, который будет использоваться для доступа к удаленному компьютеру
<НомерТелефона> - номер телефона удаленного компьютера
<ЗапуститьВПотоке> - 1,2,3 - запустить процесс дозвона и генерировать события о состоянии соединения из внешней компоненты в 1С (ОбработкаВнешнегоСобытия); 0 - использовать как функцию, события не генерировать. Необязательный, по умолчанию 2. См. коды состояния подключения в 'ДатьСтатусПодключения'
<НомерТелефонаОбратногоВызова> - номер телефона для обратного вызова (если сервер поддерживает обратный вызов). Необязательный, если не задан, то обратного вызова не последует.

@Примечание
Для разрешения стабильности дозвона в среде 1С (особенно актуально для Windows 9x) были созданы разные способы реализации 'потоковости' - параметр <ЗапуститьВПотоке> - значения 1,2,3. Параметр подбирается опытным путем. Рекомендуется 1. Реализации потока имеют свои особенности (приведено очень условно).
1 - получаем полные данные от RasDial.dll, и используем таймер для отслеживания обрыва соединения 'извне' (прежняя реализация)
2 - не получаем данные от RasDial.dll, но используем таймер для отслеживания факта дозвона и обрыва соединения 'извне'.(ограниченный набор данных из потока подключения - идет подключение, обрыв связи и подключение установлено)
3 - получаем данные от RasDial.dll, не используем таймер для отслеживания факта обрыва соединения 'извне'. (соответственно, программа может не 'узнать'  об обрыве соединения  'извне' - человеком или сторонним процессом)

@Пример:
ЗагрузитьКомпоненту(''DialMail.dll'');
Подключение=СоздатьОбъект(''AddIn.RasDial'');
Если Подключение.Дозвониться(''Соединение с 1055555'',''polz10'',''qwerty123'',''1055555'',0)=1 тогда
       ....
       Подключение.РазорватьСоединение();
КонецЕсли;

"},
{"Item","AST","РазорватьСоединение","ResetDial","РазорватьСоединение(<?>);","ResetDial(<?>);","@Синтаксис
РазорватьСоединение(<ИдентСоединения>);
@Назначение
Отключение текущего соединения
@Возвращаемое значение:
Нет
@Параметры: 
<ИдентСоединения> - идентификатор соединения. Необязательный, если опущен, то закрывается текущее соединение  (инициированное в текущем объекте) 

@Пример:
ЗагрузитьКомпоненту(''DialMail.dll'');
Соединение=СоздатьОбъект(''AddIn.RasDial'');
Если Соединение.Дозвониться(''Соединение с 1055555'',''polz10'',''qwerty123'',''1055555'',0)=1 тогда
       ....
       Соединение.РазорватьСоединение();
КонецЕсли;

"},
{"Item","AST","ПолучитьСтатусСоединения","GetConnectStatus","ПолучитьСтатусСоединения(<?>)","GetConnectStatus(<?>)","@Синтаксис
ПолучитьСтатусСоединения(<ИдентСоединения>);
@Назначение
Возвращает код статуса соединения. Если код отрицательный, то произошла ошибка. Вот некоторые коды статуса:
2 - соединение устанавливается (идет подключение)
8192 - соединение установлено
8193 - соединение разорвано
-718 - истекло время ожидания удаленного компа (во время подключения разъединили)
-680 - отсутствует гудок (кто-то взял трубку)
-678 - ответ не получен (длинные гудки или проблемы на АТС)
-676 - линия занята (короткие гудки)
@Параметры: 
<ИдентСоединения> - идентификатор соединения. Необязательный, если опущен, то возвратится код статуса текущего соединения  (инициированного в текущем объекте) 

"},
{"Item","AST","ПолучитьСтатусСоединенияСтр","GetConnectStatusStr","ПолучитьСтатусСоединенияСтр(<?>)","GetConnectStatusStr(<?>)","@Синтаксис
ПолучитьСтатусСоединенияСтр(<ИдентСоединения>);
@Назначение
Возвращает расшифровку кода статуса подключения
@Параметры: 
<ИдентСоединения> - идентификатор соединения. Необязательный, если опущен, то возвратится статус текущего соединения  (инициированного в текущем объекте) 

"},
{"Item","AST","ПолучитьСетевыеАдреса","GetIPAddresses","ПолучитьСетевыеАдреса(<?>,<?>)","GetIPAddresses(<?>,<?>)","@Синтаксис
ПолучитьСетевыеАдреса(<АдресКлиентаIP>,<АдресСервераIP>,<ИдентСоединения>)
@Назначение
Получить сетевой IP адрес клиента (кто дозванивался) и IP адрес сервера (куда дозванивались) после установления соединения
@Возвращаемое значение:
1 - операция закончилась удачно.
0 - ошибка при выполнении данной операции (не установлено соединение).
@Параметры: 
<АдресКлиентаIP> - после удачного выполнения операции помещается IP адрес клиента в строковом виде (например, ''192.168.55.2'')
<АдресСервераIP> - после удачного выполнения операции помещается IP адрес сервера в строковом виде (например, ''192.168.55.1'')
<ИдентСоединения>  - идентификатор соединения. Необязательный, если опущен, то подразумевается текущее соединение  (инициированное в текущем объекте) 

@Пример:
...
// Подключимся, получим IP адреса 
// и сообщим об этом
ЗагрузитьКомпоненту(''DialMail.dll'');
Соединение=СоздатьОбъект(''AddIn.RasDial'');
Если Соединение.Дозвониться(''Соединение'',''guest'',''mtu'',''p1055555'',0)=1 тогда
           Соединение.ПолучитьСетевыеАдреса(КлиентIP,СерверIP);
           Сообщить(''Установлено соединение
           |IP клиента - ''+КлиентIP+''
           |IP сервера - ''+СерверIP);
...
КонецЕсли;
...

"},
{"Item","AST","ПолучитьИдентификаторСоединенияПоНомеру","GetConnectionHandleByNumber","ПолучитьИдентификаторСоединенияПоНомеру(<?>)","GetConnectionHandleByNumber(<?>)","@Синтаксис
ПолучитьИдентификаторСоединенияПоНомеру(<НомерСоединения>)
@Назначение
Возвращает идентификатор (число) установленного соединения по порядковому номеру. Если такого номера нет, то возвращается 0
@Параметры: 
<НомерСоединения>  - условно-порядковый номер, число от 1 до количества соединений
"},
{"Item","AST","ПолучитьНазваниеПодключенияПоИдентификаторуСоединения","GetNameEntryByConnectHandle","ПолучитьНазваниеПодключенияПоИдентификаторуСоединения(<?>)","GetNameEntryByConnectHandle(<?>)","@Синтаксис
ПолучитьНазваниеПодключенияПоИдентификаторуСоединения(<ИдентСоединения>)
@Назначение
Возвращает название подключения по идентификатору соединения. Если  соединения с таким идентификатором нет, то возвращается пустая строка
@Параметры: 
<ИдентСоединения>  - идентификатор соединения. Необязательный, если опущен, то подразумевается текущее соединение  (инициированное в текущем объекте)
"},
{"Item","AST","ПолучитьИмяУстройстваПоИдентификаторуСоединения","GetNameDeviceByConnectHandle","ПолучитьИмяУстройстваПоИдентификаторуСоединения(<?>)","GetNameDeviceByConnectHandle(<?>)","@Синтаксис
ПолучитьИмяУстройстваПоИдентификаторуСоединения(<ИдентСоединения>)
@Назначение
Возвращает название устройства по идентификатору соединения. Если  соединения с таким идентификатором нет, то возвращается пустая строка
@Параметры: 
<ИдентСоединения>  - идентификатор соединения. Необязательный, если опущен, то подразумевается текущее соединение  (инициированное в текущем объекте)
 
см. 'ПолучитьТипУстройства()'
"},
{"Item","AST","КоличествоСоединений","ConnectionsCount","КоличествоСоединений()","ConnectionsCount()","@Синтаксис
КоличествоСоединений()
@Назначение
Возвращает количество активных соединений. Соединения, которые в момент выполнения метода только подключаются (например, набирают номер) не считается активным соединением.
@Параметры: 
Нет
 
@Пример
// Закроем все активные соединения
ЗагрузитьКомпоненту(''DialMail.dll'');
Подключение=СоздатьОбъект(''AddIn.RasDial'');
КоличествоСоединений=Подключение.КоличествоСоединений();
Для й=1 по КоличествоСоединений цикл
    Хэндл=Подключение.ПолучитьИдентификаторСоединенияПоНомеру(й);
   Подключение.РазорватьСоединение(Хэндл);
КонецЦикла;

"}
},
{"Folder","AST","Подключения","",
{"Folder","AST","Атрибуты подключений","",
{"Item","AST","НП_НазваниеУстройства","EP_DeviceName","НП_НазваниеУстройства","EP_DeviceName","@Синтаксис
НП_НазваниеУстройства
@Назначение
Название RAS-устройства. Атрибут доступен по записи и чтению.

см. ПолучитьУстройствоПоНомеру()
"},
{"Item","AST","НП_ТипУстройства","EP_DeviceType","НП_ТипУстройства","EP_DeviceType","@Синтаксис
НП_ТипУстройства
@Назначение
Название RAS-устройства. Атрибут доступен по записи и чтению.

см. ПолучитьТипУстройства()
"},
{"Item","AST","НП_ПутьКСкрипту","EP_PathScript","НП_ПутьКСкрипту","EP_PathScript","@Синтаксис
НП_ПутьКСкрипту
@Назначение
Полный путь к скрипту подключения
"},
{"Item","AST","НП_ЛокальныйТелефонныйНомер","EP_LocalPhoneNumber","НП_ЛокальныйТелефонныйНомер","EP_LocalPhoneNumber","@Синтаксис
НП_ЛокальныйТелефонныйНомер
@Назначение
Телефонный номер. Строковый параметр. Атрибут доступен по записи и чтению.

см. НП_ИспользоватьПравилаНабораНомера
"},
{"Item","AST","НП_ПрограммноеСжатие","EP_SoftwareCompression","НП_ПрограммноеСжатие","EP_SoftwareCompression","@Синтаксис
НП_ПрограммноеСжатие
@Назначение
При утановке в 1 включается программное сжатие, в 0 - выключается. Атрибут доступен по записи и чтению.
"},
{"Item","AST","НП_СтранаИД","EP_CountryID","НП_СтранаИД","EP_CountryID","@Синтаксис
НП_СтранаИД
@Назначение
Числовой идентификатор страны. Для России он равен 7. Атрибут доступен по записи и чтению.

см. НП_ИспользоватьПравилаНабораНомера
"},
{"Item","AST","НП_КодСтраны","EP_CountryCode","НП_КодСтраны","EP_CountryCode","@Синтаксис
НП_КодСтраны
@Назначение
Телефонный код страны. Числовой параметр. Для России он равен 7. Атрибут доступен по записи и чтению.

см. НП_ИспользоватьПравилаНабораНомера
"},
{"Item","AST","НП_КодГорода","EP_AreaCode","НП_КодГорода","EP_AreaCode","@Синтаксис
НП_КодГорода
@Назначение
Телефонный код города.Строковый параметр. Атрибут доступен по записи и чтению.

см. НП_ИспользоватьПравилаНабораНомера
"},
{"Item","AST","НП_ИспользоватьПравилаНабораНомера","EP_UseCountryAndAreaCodes","НП_ИспользоватьПравилаНабораНомера","EP_UseCountryAndAreaCodes","@Синтаксис
НП_ИспользоватьПравилаНабораНомера
@Назначение
При установке в 1 номер дозвона формируется с учетом НП_СтранаИД, НП_КодСтраны,  НП_КодГорода  и НП_ЛокальныйТелефонныйНомер, при установке в 0 используется только НП_ЛокальныйТелефонныйНомер.Атрибут доступен по записи и чтению.
"}
},
{"Item","AST","КоличествоУстройств","DevicesCount","КоличествоУстройств()","DevicesCount()","@Синтаксис
КоличествоУстройств()
@Назначение
Возвращает количество RAS-устройств  на данном компьютере

@Пример:
Подключение=СоздатьОбъект(''AddIn.RasDial'');
Спис=СоздатьОбъект(''СписокЗначений'');
Для i=1 по Подключение.КоличествоУстройств() цикл
      Спис.ДобавитьЗначение(Подключение.ПолучитьУстройствоПоНомеру(i));
КонецЕсли;
"},
{"Item","AST","ПолучитьУстройствоПоНомеру","GetDeviceByNumber","ПолучитьУстройствоПоНомеру(<?>);","GetDeviceByNumber(<?>);","@Синтаксис
ПолучитьУстройствоПоНомеру(<НомерУстройства>);
@Назначение
Возвращает название устройства (в частности, модема) по номеру. Если нет устройства с таким номером, то возвращается пустая строка
@Параметры: 
<НомерУстройства> - номер устройства

@Пример:
Подключение=СоздатьОбъект(''AddIn.RasDial'');
Спис=СоздатьОбъект(''СписокЗначений'');
Для i=1 по Подключение.КоличествоУстройств() цикл
      Спис.ДобавитьЗначение(Подключение.ПолучитьУстройствоПоНомеру(i));
КонецЕсли;
"},
{"Item","AST","ПолучитьНомерПоУстройству","GetNumberByDevice","ПолучитьНомерПоУстройству(<?>);","GetNumberByDevice(<?>);","@Синтаксис
ПолучитьНомерПоУстройству(<НазваниеУстройства>);
@Назначение
Возвращает номер устройства по имени устройства. Если нет устройства с таким названием, то возвращается 0
@Параметры: 
<НазваниеУстройства> - имя устройства
"},
{"Item","AST","ПолучитьТипУстройства","GetTypeDevice","ПолучитьТипУстройства(<?>);","GetTypeDevice(<?>);","@Синтаксис
ПолучитьТипУстройства(<НазваниеУстройства>);
@Назначение
Возвращает тип устройства по имени устройства. Если устройство не опознано, то возвращается пустая строка.
Некоторые типы устройств:
'modem', 'isdn', 'x25', 'parallel', 'vpn', 'pppoe'

@Параметры: 
<НазваниеУстройства> - имя устройства
"},
{"Item","AST","КоличествоПодключений","EntriesCount","КоличествоПодключений()","EntriesCount()","@Синтаксис
КоличествоПодключений()
@Назначение
Возвращает количество подключений (в удаленном доступе) на данном компьютере

@Пример:
Подключение=СоздатьОбъект(''AddIn.RasDial'');
Спис=СоздатьОбъект(''СписокЗначений'');
Для i=1 по Подключение.КоличествоПодключений() цикл
      Спис.ДобавитьЗначение(Подключение.ДатьПодключениеПоНомеру(i));
КонецЕсли;

"},
{"Item","AST","ДатьПодключениеПоНомеру","GetEntryByNumber","ДатьПодключениеПоНомеру(<?>);","GetEntryByNumber(<?>);","@Синтаксис
ДатьПодключениеПоНомеру(<НомерПодключения>);
@Назначение
Возвращает название подключения по номеру. Если нет подключения с таким номером, то возвращается пустая строка
@Параметры: 
<НомерПодключения> - номер удаленного подключения

@Пример:
Подключение=СоздатьОбъект(''AddIn.RasDial'');
Спис=СоздатьОбъект(''СписокЗначений'');
Для i=1 по Подключение.КоличествоПодключений() цикл
      Спис.ДобавитьЗначение(Подключение.ДатьПодключениеПоНомеру(i));
КонецЕсли;

"},
{"Item","AST","ДатьНомерПоПодключению","GetNumberByEntry","ДатьНомерПоПодключению(<?>);","GetNumberByEntry(<?>);","@Синтаксис
ДатьНомерПоПодключению(<НазваниеПодключения>);
@Назначение
Возвращает порядковый номер подключения по названию. Если нет подключения с таким названием, то возвращается 0
@Параметры: 
<НазваниеПодключения> - название удаленного соединения

"},
{"Item","AST","УдалитьПодключение","DeleteEntry","УдалитьПодключение(<?>)","DeleteEntry(<?>)","@Синтаксис
УдалитьПодключение(<НазваниеПодключения>);
@Назначение
Удаляет подключение по имени из списка удаленных  подключений.
@Возвращаемое значение:
1 - операция закончилась удачно.
0 - ошибка при выполнении данной операции.
@Параметры: 
<НазваниеПодключения> - имя удаленного подключения
"},
{"Item","AST","ПрочитатьНастройкиПодключения","ReadEntryProperties","ПрочитатьНастройкиПодключения(<?>)","ReadEntryProperties(<?>)","@Синтаксис
ПрочитатьНастройкиПодключения(<НазваниеПодключения>);
@Назначение
Читает настройки подключения по имени и заносит их в 'атрибуты подключений'
@Возвращаемое значение:
1 - операция закончилась удачно.
0 - ошибка при выполнении данной операции (не обнаружено подключение с данным именем).
@Параметры: 
<НазваниеПодключения> - имя удаленного подключения
"},
{"Item","AST","СохранитьНастройкиПодключения","WriteEntryProperties","СохранитьНастройкиПодключения(<?>)","WriteEntryProperties(<?>)","@Синтаксис
СохранитьНастройкиПодключения(<НазваниеПодключения>);
@Назначение
Обновляет настройки подключения по имени или создает новое подключение с именем <НазваниеПодключения>. Настройка предварительно заполняется через 'атрибуты подключений'
@Возвращаемое значение:
1 - операция закончилась удачно.
0 - ошибка при выполнении данной операции.
@Параметры: 
<НазваниеПодключения> - имя удаленного подключения
"},
{"Item","AST","ОчиститьЛокальныеНастройкиПодключения","ClearLocalEntryProperties","ОчиститьЛокальныеНастройкиПодключения();","ClearLocalEntryProperties();","@Синтаксис
ОчиститьЛокальныеНастройкиПодключения();
@Назначение
Очищает все 'атрибуты подключений'
@Возвращаемое значение:
Нет
"}
},
{"Item","AST","Пример использования","","","","Перем КоличествоПопыток;
Перем Подключение;

//*******************************************
// 
Процедура Подкл()
// вместо ''Соединение с 1055555'' - вставьте название своего соединения, 
// зарегистрированного в системе
	Подключение.Дозвониться(''Соединение с 1055555'',''guest'',''mtu'',''p1055555'',1);
КонецПроцедуры


Процедура ПриОткрытии();
    // Загружаем компоненту, 
    //создаем объект 'Rasdial', 
    // устанавливаем кол. попыток   
    // и подключаемся
    ЗагрузитьКомпоненту(''DialMail.dll'');
    Подключение=СоздатьОбъект(''AddIn.RasDial'');
    КоличествоПопыток=3;
    Подкл();
КонецПроцедуры

Процедура Задержка(КолИтер=100)
	Для й=1 по КолИтер цикл
                     ц=Й*Й-й+1;
	     Форма.Обновить(0);
	КонецЦикла;
КонецПроцедуры

Процедура ОбработкаВнешнегоСобытия(Источник,Событие,Данные)
               Если ВРег(Источник)<>''RASDIAL'' тогда 
                      Возврат;
                КонецЕсли;
	Сообщить(СокрЛП(Данные));
	// Это отключились
	ПоследнееСобытие=СокрЛП(Событие);
      // коды статуса соединения см. в ДатьСтатусПодключения
	Если СокрЛП(Событие)=''8193'' тогда
		Подключение.РазорватьСоединение();
		КоличествоПопыток=КоличествоПопыток-1;
		Если КоличествоПопыток<=0 тогда
			Сообщить(''Соединение разорвано'');
			Возврат;
		КонецЕсли;
		Подкл();
		Возврат;
	КонецЕсли;
	// Это подключились...
	Если СокрЛП(Событие)=''8192'' тогда Сообщить(''Соединение установлено'');
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗакрытии()
	Подключение.РазорватьСоединение();
КонецПроцедуры

"}
},
{"Folder","AST","Общее Получение/Отправка (Pop3/Smtp)","",
{"Folder","AST","Атрибуты","",
{"Item","AST","ОтКого","From","ОтКого","From","@Синтаксис
ОтКого
@Назначение
Возвращает адрес отправителя текущего письма. Доступен по чтению после метода 'РаспаковатьПисьмо(..)' или 'ПолучитьЗаголовокПисьма(...)'
"},
{"Item","AST","АдресНаОтвет","ReplyTo","АдресНаОтвет","ReplyTo","@Синтаксис
АдресНаОтвет
@Назначение
Возвращает адрес ответа на текущее письмо. Может отличаться от адреса 'ОтКого'. В почтовых программах этот адрес автоматически подставляется в 'Кому' при ответе на письмо. Доступен по чтению после метода 'РаспаковатьПисьмо(..)' или 'ПолучитьЗаголовокПисьма(...)'
"},
{"Item","AST","Организация","Organization","Организация","Organization","@Синтаксис
Организация
@Назначение
Возвращает названии организации отправителя текущего письма. Доступен по чтению после метода 'РаспаковатьПисьмо(..)' или 'ПолучитьЗаголовокПисьма(...)'
"},
{"Item","AST","Кому","To","Кому","To","@Синтаксис
Кому
@Назначение
Возвращает строку - адреса получателей текущего письма. Если в 'Кому' больше 1 адреса, то они разделяются символом перевода строки текста ('РазделительСтрок'). Доступен по чтению после метода 'РаспаковатьПисьмо(..)' или 'ПолучитьЗаголовокПисьма(...)'
"},
{"Item","AST","Копии","CC","Копии","CC","@Синтаксис
Копии
@Назначение
Возвращает строку - адреса получателей текущего письма. Если в 'Копии' больше 1 адреса, то они разделяются символом перевода строки текста ('РазделительСтрок'). Доступен по чтению после метода 'РаспаковатьПисьмо(..)' или 'ПолучитьЗаголовокПисьма(...)'
"},
{"Item","AST","СкрытыеКопии","BСС","СкрытыеКопии","BСС","@Синтаксис
СкрытыеКопии
@Назначение
Возвращает строку - скрытые адреса получателей текущего письма. Если в 'СкрытыеКопии' больше 1 адреса, то они разделяются символом перевода строки текста ('РазделительСтрок'). Доступен по чтению после метода 'РаспаковатьПисьмо(..)' или 'ПолучитьЗаголовокПисьма(...)'
"},
{"Item","AST","ТемаПисьма","Subject","ТемаПисьма","Subject","@Синтаксис
ТемаПисьма
@Назначение
Возвращает тему текущего письма. Доступен по чтению после метода 'РаспаковатьПисьмо(..)' или 'ПолучитьЗаголовокПисьма(...)'
"},
{"Item","AST","ДатаСоздания","CreatedDate","ДатаСоздания","CreatedDate","@Синтаксис
ДатаСоздания
@Назначение
Возвращает дату создания текущего письма в строковом виде. Формат представления - ''дд.мм.гггг'' (например, ''01.03.2002''). Доступен по чтению после метода 'РаспаковатьПисьмо(..)' или 'ПолучитьЗаголовокПисьма(...)'
"},
{"Item","AST","ВремяСоздания","CreatedTime","ВремяСоздания","CreatedTime","@Синтаксис
ВремяСоздания
@Назначение
Возвращает время создания текущего письма в строковом виде. Формат представления - ''чч:мм:сс'' (например, ''12:30:23''). Доступен по чтению после метода 'РаспаковатьПисьмо(..)' или 'ПолучитьЗаголовокПисьма(...)'
"},
{"Item","AST","ПочтоваяПрограмма","XMailer","ПочтоваяПрограмма","XMailer","@Синтаксис
ПочтоваяПрограмма
@Назначение
Возвращает название почтовой программы, создавшей текущее письмо. Доступен по чтению после метода 'РаспаковатьПисьмо(..)' или 'ПолучитьЗаголовокПисьма(...)'
"},
{"Item","AST","ТелоПисьма","Body","ТелоПисьма","Body","@Синтаксис
ТелоПисьма
@Назначение
Возвращает текст текущего письма. Доступен по чтению после метода 'РаспаковатьПисьмо(..)'
"},
{"Item","AST","КоличествоПрисоединенныхФайлов","CountAttachments","КоличествоПрисоединенныхФайлов","CountAttachments","@Синтаксис
КоличествоПрисоединенныхФайлов
@Назначение
Возвращает количество присоединенных файлов текущего письма. Тело письма рассматривается как присоединенный файл с номером 1. Доступен по чтению после метода 'РаспаковатьПисьмо(..)'
"},
{"Item","AST","РабочийКаталог","WorkPath","РабочийКаталог","WorkPath","@Синтаксис
РабочийКаталог
@Назначение
Переменная для указания рабочего каталога для хранения всех полученных (POP3) и созданных (SMTP) писем. Рабочие каталоги для POP3 и SMTP как правило разные. Доступна по чтению и записи.

@Пример
Прием=СоздатьОбъект(''AddIn.Pop3'');
Прием.РабочийКаталог=''c:\windows\temp\'';
Сообщить(Прием.РабочийКаталог);

"},
{"Item","AST","ТекущееПисьмо","CurrentMail","ТекущееПисьмо","CurrentMail","@Синтаксис
ТекущееПисьмо
@Назначение
Полный путь к текущему письму, сохраненному на диске. Для Отправки текущее письмо - последнее созданное, последнее отправленное или последнее распакованное. Для Получения текущее письмо - последнее полученное или последнее распакованное. Доступен по чтению и записи. ТекущееПисьмо для POP3 и SMTP как правило разные.

@Пример
ЗагрузитьКомпоненту(''DialMail.dll'');
Прием=СоздатьОбъект(''AddIn.Pop3'');
Прием.РабочийКаталог=''c:\windows\temp\'';
Если Прием.Подключиться(''pop.mail.ru'',,''Ivanov'',''qqq'')=1 тогда
      Если Прием.ПолучитьПисьмо(1,1,0)=0 тогда
           Сообщить(''Путь к текущему письму''+Прием.ТекущееПисьмо):
           // Не указываем номер письма - используется текущее 
           Прием.РаспаковатьПисьмо();
........
"},
{"Item","AST","КоличествоПисемВРабочемКаталоге","CountMailsInWorkPath","КоличествоПисемВРабочемКаталоге","CountMailsInWorkPath","@Синтаксис
КоличествоПисемВРабочемКаталоге
@Назначение
Возвращает текущее количество писем в рабочем каталоге

@Пример
Прием=СоздатьОбъект(''AddIn.Pop3'');
Прием.РабочийКаталог=''c:\windows\temp\'';
Сообщить(''Всего писем:''+Прием.КоличествоПисемВРабочемКаталоге);

"},
{"Item","AST","ОбщийРазмерПисемВРабочемКаталоге","CountBytesMailsInWorkPath","ОбщийРазмерПисемВРабочемКаталоге","CountBytesMailsInWorkPath","@Синтаксис
ОбщийРазмерПисемВРабочемКаталоге
@Назначение
Возвращает общую (суммированную) длину файлов в РабочемКаталоге в байтах.
"},
{"Item","AST","ВремяДоРазрыва","TimeOut","ВремяДоРазрыва","TimeOut","@Синтаксис
ВремяДоРазрыва
@Назначение
Переменная для указания времени в миллисекундах для разрыва соединения с pop3-сервером при отсутствии связи с ним. По умолчанию - 30000 миллисекунд

@Пример
Прием=СоздатьОбъект(''AddIn.Pop3'');
Прием.ВремяДоРазрыва=30000;  // 30 секунд TimeOut

"},
{"Item","AST","ПоследняяОшибка","LastError","ПоследняяОшибка","LastError","@Синтаксис
ПоследняяОшибка
@Назначение
Возвращает код последней ошибки при работе с сокетом

"},
{"Item","AST","ИспользоватьSSL","UsingSSL","ИспользоватьSSL","UsingSSL","@Синтаксис
ИспользоватьSSL
@Назначение
По умолчанию 0. При присвоении 1 работа текущего объекта будет идти через защищенный протокол SSL. Для реализации работы через SSL- протокол  требуется сервер, поддерживающий SSL и установка сертификата сервера на локальном компьютере. 
"},
{"Item","AST","ВестиЛогФайл","MakeLogFile","ВестиЛогФайл","MakeLogFile","@Синтаксис
ВестиЛогФайл
@Назначение
Реквизит позволяет вести лог в файле. 
1 - ведем лог файл
0 - нет
По умолчанию значение реквизита равно 0.
"}
},
{"Folder","AST","Методы","",
{"Item","AST","РаспаковатьПисьмо","ExtractMail","РаспаковатьПисьмо(<?>)","ExtractMail(<?>)","@Синтаксис
РаспаковатьПисьмо(<ПорядковыйНомерВРабочемКаталоге>)
@Назначение
Распаковать письмо из РабочегоКаталога по порядковому номеру (сортировка писем - по названию файлов)
@Возвращаемое значение:
1 - операция закончилась удачно.
0 - ошибка при выполнении данной операции.
@Параметры: 
<ПорядковыйНомерВРабочемКаталоге> - номер письма в рабочем каталоге. Необязательный, если пропущен или 0, то распаковывается текущее письмо (см. ТекущееПисьмо).

@Пример:
// Сохраним все присоединенные 
// файлы всех писем
ЗагрузитьКомпоненту(''DialMail.dll'');
Отправка=СоздатьОбъект(''AddIn.Smtp'');
Для i=1 по Отправка.КоличествоПисемВРабочемКаталоге цикл
      Если Отправка.РаспаковатьПисьмо(i)=1 тогда
          Для j=1 по Отправка.КоличествоПрисоединенныхФайлов цикл
              Отправка.СохранитьПрисоединенныйФайл(j,''c:\'');
          КонецЦикла;
      КонецЕсли;
КонецЦикла;

"},
{"Item","AST","ПолучитьИмяПрисоединенногоФайла","GetNameAttachment","ПолучитьИмяПрисоединенногоФайла(<?>)","GetNameAttachment(<?>)","@Синтаксис
ПолучитьИмяПрисоединенногоФайла(<НомерПрисоединенногоФайла>)
@Назначение
Возвращает имя присоединенного файла в письме. Доступен после метода 'РаспаковатьПисьмо(..)'
@Параметры: 
<НомерПрисоединенногоФайла> - порядковый номер присоединенного файла в письме

"},
{"Item","AST","ПолучитьТипПрисоединенногоФайла","GetTypeAttachment","ПолучитьТипПрисоединенногоФайла(<?>)","GetTypeAttachment(<?>)","@Синтаксис
ПолучитьТипПрисоединенногоФайла(<НомерПрисоединенногоФайла>)
@Назначение
Возвращает тип присоединенного файла в письме в формате, как в письме (например, 'text/plain', 'text/html'). Доступен после метода 'РаспаковатьПисьмо(..)'
@Параметры: 
<НомерПрисоединенногоФайла> - порядковый номер присоединенного файла в письме

"},
{"Item","AST","СохранитьПрисоединенныйФайл","SaveAttachment","СохранитьПрисоединенныйФайл(<?>,<?>,<?>,<?>)","SaveAttachment(<?>,<?>,<?>,<?>)","@Синтаксис
СохранитьПрисоединенныйФайл(<НомерПрисоединенногоФайла>,<КаталогСохранения>,<НовоеИмяФайла>,<СохранятьЗаголовки>)
@Назначение
Сохраняем присоединенный файл. Тело письма - тоже считается присоединенным файлом.  Метод доступен после метода 'РаспаковатьПисьмо(..)'
@Возвращаемое значение:
Фактическое имя сохраненного файла. 
@Параметры: 
<НомерПрисоединенногоФайла> - порядковый номер присоединенного файла в письме, если равен 0, то сохраняется заголовок письма  (от кого, кому, тема письма) в файл с расширением *.hdr.
<КаталогСохранения> - необязательный, по умолчанию - РабочийКаталог
<НовоеИмяФайла> - необязательный, если не пуст, то присоединенный файл сохраняется с данным именем.
<СохранятьЗаголовки> - 1- сохранять заголовки присоединенного файла в отдельный файл, 0 - не сохранять. Необязательный, по умолчанию 0
@Примечание:
Если <НовоеИмяФайла> пусто или не задано, то присоединенный файл сохраняется с именем, которое хранится в теле письма. Причем если существует  файл с таким же именем в <КаталогСохранения> то имя сохраняемого файла изменяется. Если же <НовоеИмяФайла> задано, и существует  файл с таким же именем в <КаталогСохранения>, то этот файл затирается.

@Пример:
// Сохраним все присоединенные 
// файлы всех писем
ЗагрузитьКомпоненту(''DialMail.dll'');
Прием=СоздатьОбъект(''AddIn.Pop3'');
Для i=1 по Прием.КоличествоПисемВРабочемКаталоге цикл
      Если Прием.РаспаковатьПисьмо(i)=1 тогда
          Для j=1 по Прием.КоличествоПрисоединенныхФайлов цикл
              Прием.СохранитьПрисоединенныйФайл(j,''c:\'');
          КонецЦикла;
      КонецЕсли;
   КонецЦикла
КонецЕсли;

"},
{"Item","AST","СохранитьПисьмо","SaveMail","СохранитьПисьмо(<?>,<?>)","SaveMail(<?>,<?>)","@Синтаксис
СохранитьПисьмо(<ПорядковыйНомерВРабочемКаталоге>,<КаталогСохранения>)
@Назначение
Копировать письмо из РабочегоКаталога по порядковому номеру  в каталог сохранения
@Возвращаемое значение:
Имя сохраненного файла-письма
@Параметры: 
<ПорядковыйНомерВРабочемКаталоге> - номер письма в рабочем каталоге. Необязательный, по умолчанию 1
<КаталогСохранения> -  необязательный, по умолчанию - РабочийКаталог

"},
{"Item","AST","УдалитьПисьмоИзРабочегоКаталога","DeleteMailFromWorkPath","УдалитьПисьмоИзРабочегоКаталога(<?>)","DeleteMailFromWorkPath(<?>)","@Синтаксис
УдалитьПисьмоИзРабочегоКаталога(<ПорядковыйНомерВРабочемКаталоге>)
@Назначение
Удалить письмо из РабочегоКаталога по порядковому номеру
@Возвращаемое значение:
1 - операция закончилась удачно.
0 - ошибка при выполнении данной операции.
@Параметры: 
<ПорядковыйНомерВРабочемКаталоге> - номер письма в рабочем каталоге. Необязательный, по умолчанию 0. Если пропущен или 0, то удаляется ''текущее'' письмо (см. ТекущееПисьмо)

"},
{"Item","AST","ОчиститьРабочийКаталог","ClearWorkPath","ОчиститьРабочийКаталог();","ClearWorkPath();","@Синтаксис
ОчиститьРабочийКаталог();
@Назначение
Удалить все письма из РабочегоКаталога (файлы с расширением .MSG)
@Возвращаемое значение:
нет
"}
},
{"Folder","AST","Атрибуты прокси-сервера","",
{"Item","AST","ХостПрокси","HostProxy","ХостПрокси","HostProxy","@Синтаксис
ХостПрокси
@Назначение
IP адрес или имя прокси сервера. Строковый параметр.
"},
{"Item","AST","ПортПрокси","PortProxy","ПортПрокси","PortProxy","@Синтаксис
ПортПрокси
@Назначение
Порт прокси сервера. Строковый параметр.
"},
{"Item","AST","ИмяПользователяПрокси","UsernameProxy","ИмяПользователяПрокси","UsernameProxy","@Синтаксис
ИмяПользователяПрокси
@Назначение
Имя пользователя для входа на прокси сервер. Строковый параметр.
"},
{"Item","AST","ПарольПрокси","PasswordProxy","ПарольПрокси","PasswordProxy","@Синтаксис
ПарольПрокси
@Назначение
Пароль для входа на прокси сервер. Строковый параметр.
"},
{"Item","AST","ИспользоватьПрокси","UsingProxy","ИспользоватьПрокси","UsingProxy","@Синтаксис
ИспользоватьПрокси
@Назначение
При присвоении 1,2,3 разрешает использование прокси сервера (1/2- протокол Socks5/4a, 3 - HTTP 1.0) для данного экземпляра объекта, при присвоении 0 - запрещает. В одной сессии отправка и получение почты могут работать через разные прокси сервера. Атрибут доступен на чтение и на запись. Менять атрибут разрешается до подключения к почтовым серверам (или после отключения).

@Пример
ЗагрузитьКомпоненту(''DialMail.dll'');
Прием=СоздатьОбъект(''AddIn.Pop3'');
Прием.ХостПрокси=''199.199.199.1'';
Прием.ПортПрокси=''1080'';
Прием.ИмяПользователяПрокси=''ivanov'';
Прием.ПарольПрокси=''12345qq'';
Прием.ИспользоватьПрокси=1;
Прием.Подключиться(''pop.mail.ru'',,''Ivanov'',''qqq'');
"}
}
},
{"Folder","AST","Получение электронной почты (Pop3)","",
{"Folder","AST","Атрибуты","",
{"Item","AST","ОбщийРазмерПисем","TotalBytesMails","ОбщийРазмерПисем","TotalBytesMails","@Синтаксис
ОбщийРазмерПисем
@Назначение
Возвращает общий размер писем на сервере Pop3. Доступен по чтению после метода 'Подключиться(..)'
"},
{"Item","AST","КоличествоПисем","CountMails","КоличествоПисем","CountMails","@Синтаксис
КоличествоПисем
@Назначение
Возвращает количество писем на сервере Pop3. Доступен по чтению после метода 'Подключиться(..)'
"},
{"Item","AST","ПолученоВБайтах","CountBytesReceived","ПолученоВБайтах","CountBytesReceived","@Синтаксис
ПолученоВБайтах
@Назначение
Возвращает количество полученных байтов писем со времени подключения к серверу POP3
"}
},
{"Folder","AST","Методы","",
{"Item","AST","Подключиться","Connect","Подключиться(<?>,<?>,<?>,<?>,<?>)","Connect(<?>,<?>,<?>,<?>,<?>)","@Синтаксис
Подключиться(<СерверPOP3>,<ПортPOP3>,<Пользователь>, <Пароль>,<ТипАутенфикации>)
@Назначение
Применение этого метода позволяет подключаться к серверу POP3 для получения писем
@Возвращаемое значение:
1 - подключились.
0 - подключение не удалось.
@Параметры: 
<СерверPOP3> - название сервера Pop3 или его IP адрес
<ПортPOP3> - порт соединения. Необязательный, по умолчанию 'pop3' ('110')
<Пользователь> - имя пользователя, которое будет использоваться для доступа к электронной почте
<Пароль> - пароль пользователя, который будет  использоваться для доступа к электронной почте
<ТипАутенфикации> - тип аутенфикации. 0 - авто, 1 - обыкновенная, 2- APOP. Необязательный, по умолчанию 0

@Пример:
// E-mail: 'Ivanov#mail.ru', пароль: 'qqq'
ЗагрузитьКомпоненту(''DialMail.dll'');
Прием=СоздатьОбъект(''AddIn.Pop3'');
Если Прием.Подключиться(''pop.mail.ru'',,''Ivanov'',''qqq'')=1 тогда
       ....
       Прием.Отключиться();
КонецЕсли;

"},
{"Item","AST","Отключиться","Reset","Отключиться();","Reset();","@Синтаксис
Отключиться();
@Назначение
Применение этого метода позволяет отключиться от текущего подключенного сервера POP3. Обычно используется в конце сессии подключения.
@Возвращаемое значение:
Нет
@Параметры: 
Нет

@Пример:
// E-mail: 'Ivanov#mail.ru', пароль: 'qqq'
ЗагрузитьКомпоненту(''DialMail.dll'');
Прием=СоздатьОбъект(''AddIn.Pop3'');
Если Прием.Подключиться(''pop.mail.ru'',,''Ivanov'',''qqq'')=1 тогда
       ....
       Прием.Отключиться();
КонецЕсли;

"},
{"Item","AST","Лист","List","Лист(<?>,<?>,<?>)","List(<?>,<?>,<?>)","@Синтаксис
Лист(<НомерПисьма>,<РезультатОперации>,<ВозвращатьРезВТекстовомВиде>)
@Назначение
Просмотр размера одного (НомерПисьма > 0) или всех писем (НомерПисьма = 0) на сервере Pop3
@Возвращаемое значение:
1 - операция закончилась удачно.
0 - ошибка при выполнении данной операции.
@Параметры: 
<НомерПисьма> - номер письма на сервере Pop3 или 0. Необязательный, по умолчанию 0
<РезультатОперации> - в эту переменную помещается результат операции Лист в виде списка или строки (текста) в зависимости от параметра 'ВозвращатьРезВТекстовомВиде'. 'Представление' в списке - номер письма на сервере в текстовом виде (например, ''1''), 'значение' в списке - размер письма в байтах, тип - число. Строчное представление результата операции имеет следующий формат: '<НомерПисьма1>+<пробел>+<РазмерПисьма1>+РазделительСтрок+...<НомерПисьмаN>+<пробел>+<РазмерПисьмаN>' 
<ВозвращатьРезВТекстовомВиде> - если равен 0, то 'РезультатОперации' - список, если 1, то 'РезультатОперации' - строка (текст). Необязательный, по умолчанию 0.

"},
{"Item","AST","ЛистИД","ListUIDL","ЛистИД(<?>,<?>,<?>)","ListUIDL(<?>,<?>,<?>)","@Синтаксис
ЛистИД(<НомерПисьма>,<РезультатОперации>,<ВозвращатьРезВТекстовомВиде>)
@Назначение
Просмотр ИД одного (НомерПисьма > 0) или всех писем (НомерПисьма = 0) на сервере Pop3
@Возвращаемое значение:
1 - операция закончилась удачно.
0 - ошибка при выполнении данной операции.
@Параметры: 
<НомерПисьма> - номер письма на сервере Pop3 или 0. Необязательный, по умолчанию 0
<РезультатОперации> - в эту переменную помещается результат операции ЛистИД в виде списка или строки (текста) в зависимости от параметра 'ВозвращатьРезВТекстовомВиде'. 'Представление' в списке - номер письма на сервере в текстовом виде (например, ''1''), 'значение' в списке - ИД письма, тип - строка. Строчное представление результата операции имеет следующий формат: '<НомерПисьма1>+<пробел>+<РазмерПисьма1>+РазделительСтрок+...<НомерПисьмаN>+<пробел>+<РазмерПисьмаN>' 
<ВозвращатьРезВТекстовомВиде> - если равен 0, то 'РезультатОперации' - список, если 1, то 'РезультатОперации' - строка (текст). Необязательный, по умолчанию 0.
"},
{"Item","AST","ПолучитьЗаголовокПисьма","GetMailHeader","ПолучитьЗаголовокПисьма(<?>,<?>)","GetMailHeader(<?>,<?>)","@Синтаксис
ПолучитьЗаголовокПисьма(<НомерПисьма>,<КоличествоСтрокПисьма>)
@Назначение
Получение заголовка письма с сервера POP3 по номеру. После успешной завершении данной операции становятся доступны основные параметры заголовка письма (ОтКого, АдресНаОтвет, Организация, Кому, Копии, ТемаПисьма,ДатаСоздания,ВремяСоздания, ПочтоваяПрограмма)
@Возвращаемое значение:
1 - операция закончилась удачно.
0 - ошибка при выполнении данной операции  (разрыв?, простой сокета?)
@Параметры: 
<НомерПисьма> - номер письма на сервере Pop3
<КоличествоСтрокПисьма> - необязательный. Количество строк письма, закачиваемых с сервера. По умолчанию 20.

@Пример:
// E-mail: 'Ivanov#mail.ru', пароль: 'qqq'
// Подключаемся к Pop3-серверу,
// скачиваем заголовки и получаем только те
// письма, которые отосланы с адреса 'ivanov#mail.ru'
ЗагрузитьКомпоненту(''DialMail.dll'');
Прием=СоздатьОбъект(''AddIn.Pop3'');
Если Прием.Подключиться(''pop.mail.ru'',,''Ivanov'',''qqq'')=1 тогда
   Для i=1 по Прием.КоличествоПисем цикл
      Если Прием.ПолучитьЗаголовокПисьма(i)=0 тогда
          Предупреждение(''Ошибка получения заголовка письма'');
          Прием=0;
          Возврат;
      КонецЕсли;
      Если Найти(Прием.ОтКого,''ivanov#mail.ru'')>0 тогда
           ПолучитьПисьмо(i);
      КонецЕсли;
   КонецЦикла
   Прием.Отключиться();
КонецЕсли;
"},
{"Item","AST","ПолучитьПисьмо","GetMail","ПолучитьПисьмо(<?>,<?>,<?>)","GetMail(<?>,<?>,<?>)","@Синтаксис
ПолучитьПисьмо(<НомерПисьма>,<УдалятьПослеУдачногоПолучения>,<ЗапуститьВПотоке>)
@Назначение
Получение письма с сервера POP3 по номеру и запись его в РабочийКаталог
@Возвращаемое значение:
1 - операция закончилась удачно.
-1 - получение прошло удачно, а удаление с сервера - с ошибкой
-100 - запущен процесс отправления (при <ЗапуститьВПотоке>=1)
0 - ошибка при выполнении данной операции  (разрыв?, простой сокета?)
@Параметры: 
<НомерПисьма> - номер письма на сервере Pop3
<УдалятьПослеУдачногоПолучения> - необязательный. При 1 - удаляется с сервера после удачного получения, 0 - не удалять. По умолчанию 0
<ЗапуститьВПотоке> - необязательный. 1 - запустить в отдельном потоке и генерировать события о состоянии соединения из внешней компоненты в 1С (ОбработкаВнешнегоСобытия); 0 - запустить в основном потоке, события не генерировать. По умолчанию 0.

@Примечание:
После выполнения метода полученное письмо  становится ''текущим'' (см. ТекущееПисьмо). 

@Пример:
// E-mail: 'Ivanov#mail.ru', пароль: 'qqq'
// Подключаемся к Pop3-серверу, получаем все письма с последующим удалением
ЗагрузитьКомпоненту(''DialMail.dll'');
Прием=СоздатьОбъект(''AddIn.Pop3'');
Если Прием.Подключиться(''pop.mail.ru'',,''Ivanov'',''qqq'')=1 тогда
   Для i=1 по Прием.КоличествоПисем цикл
      Если Прием.ПолучитьПисьмо(i,1,0)=0 тогда
          Предупреждение(''Ошибка получения письма'');
          Прием=0;
          Возврат;
      КонецЕсли;
   КонецЦикла
   Прием.Отключиться();
КонецЕсли;
"},
{"Item","AST","ПолучитьВсеПисьма","GetAllMails","ПолучитьВсеПисьма(<?>,<?>,<?>,<?>)","GetAllMails(<?>,<?>,<?>,<?>)","@Синтаксис
ПолучитьВсеПисьма(<ОтключатьсяПосле>,<УдалятьПослеУдачногоПолучения>,<ЗапуститьВПотоке>,<НомераПисемВСтроковомФормате>)
@Назначение
Получение всех писем с сервера POP3 и запись их в РабочийКаталог
@Возвращаемое значение:
1 - операция закончилась удачно.
-1 - получение прошло удачно, а удаление с сервера - с ошибкой
-100 - запущен процесс отправления (при ЗапуститьВПотоке=1)
0 - ошибка при выполнении данной операции  (разрыв?, простой сокета?)
@Параметры: 
<ОтключатьсяПосле> - необязательный. 1 - после удачного получения писем отключиться от текущего подключенного сервера POP3, 0 - не отключаться. По умолчанию 1. 
<УдалятьПослеУдачногоПолучения> - необязательный. При 1 - удаляется с сервера после удачного получения, 0 - не удалять. По умолчанию 0
<ЗапуститьВПотоке> - необязательный. 1 - запустить в отдельном потоке и генерировать события о состоянии соединения из внешней компоненты в 1С (ОбработкаВнешнегоСобытия); 0 - запустить в основном потоке, события не генерировать. По умолчанию 0.
<НомераПисемВСтроковомФормате> - необязательный. Номера писем, которые необходимо получить. Формат - строка, номера - через запятые (например: ''1,2,10,8,9''). При отсутствии параметра или при пустом значении параметра скачиваются все письма с сервера.

@Пример:
// E-mail: 'Ivanov#mail.ru', пароль: 'qqq'
// Подключаемся к Pop3-серверу, получаем все письма с последующим удалением
ЗагрузитьКомпоненту(''DialMail.dll'');
Прием=СоздатьОбъект(''AddIn.Pop3'');
Если Прием.Подключиться(''pop.mail.ru'',,''Ivanov'',''qqq'')=1 тогда
     Если Прием.ПолучитьВсеПисьма(1,1,0)=0 тогда
          Предупреждение(''Ошибка получения писем'');
          Прием=0;
          Возврат;
     КонецЕсли;
   Прием.Отключиться();
КонецЕсли;

"},
{"Item","AST","ОстановитьПолучение","StopReceiving","ОстановитьПолучение()","StopReceiving()","@Синтаксис
ОстановитьПолучение()
@Назначение
Остановить поток получения писем (см. ПолучитьПисьмо(...), ПолучитьВсеПисьма(...))
@Возвращаемое значение:
нет
"},
{"Item","AST","ИдетПолучение","IsReceiving","ИдетПолучение()","IsReceiving()","@Синтаксис
ИдетПолучение()
@Назначение
Проверяет, идет ли сейчас в потоке получение почты
@Возвращаемое значение:
1 - получение идет
0 - получения в данный момент нет

"},
{"Item","AST","УдалитьПисьмо","DeleteMail","УдалитьПисьмо(<?>)","DeleteMail(<?>)","@Синтаксис
УдалитьПисьмо(<НомерПисьма>)
@Назначение
Удаление письма с сервера POP3 по номеру
@Возвращаемое значение:
1 - операция закончилась удачно.
0 - ошибка при выполнении данной операции.
@Параметры: 
<НомерПисьма> - номер письма на сервере Pop3

@Пример:
// E-mail: 'Ivanov#mail.ru', пароль: 'qqq'
// Подключаемся к Pop3-серверу, удаляем все письма
ЗагрузитьКомпоненту(''DialMail.dll'');
Прием=СоздатьОбъект(''AddIn.Pop3'');
Если Прием.Подключиться(''pop.mail.ru'',,''Ivanov'',''qqq'')=1 тогда
   Для i=1 по Прием.КоличествоПисем цикл
      Если Прием.УдалитьПисьмо(i)=0 тогда
          Предупреждение(''Ошибка при удалении письма'');
          Прием=0;
          Возврат;
      КонецЕсли;
   КонецЦикла
   Прием.Отключиться();
КонецЕсли;
"}
}
},
{"Folder","AST","Отправка электронной почты (SMTP)","",
{"Folder","AST","Атрибуты","",
{"Item","AST","ОтправленоВБайтах","CountBytesSended","ОтправленоВБайтах","CountBytesSended","@Синтаксис
ОтправленоВБайтах
@Назначение
Возвращает количество отправленных байтов писем со времени подключения к серверу SMTP
Доступен по чтению.
"}
},
{"Folder","AST","Методы","",
{"Item","AST","Подключиться","Connect","Подключиться(<?>,<?>,<?>,<?>)","Connect(<?>,<?>,<?>,<?>)","@Синтаксис
Подключиться(<СерверSMTP>,[<ПортSMTP>],[<Пользователь>], [<Пароль>])
@Назначение
Применение этого метода позволяет подключаться к серверу SMTP для последующей отправки писем
@Возвращаемое значение:
1 - подключились.
0 - подключение не удалось.
@Параметры: 
<СерверSMTP> - название сервера Pop3 или его IP адрес
<ПортSMTP> - порт соединения. Необязательный, по умолчанию 'smtp' ('25')
<Пользователь> - необязательный, имя пользователя, которое будет использоваться для доступа к электронной почте
<Пароль> - необязательный, пароль пользователя, который будет  использоваться для доступа к электронной 
почте

@Пример:
// E-mail: 'Ivanov#mail.ru', пароль: 'qqq'
ЗагрузитьКомпоненту(''DialMail.dll'');
Отправка=СоздатьОбъект(''AddIn.Smtp'');
Если Отправка.Подключиться(''smtp.mail.ru'')=1 тогда
       ....
       Отправка.Отключиться();
КонецЕсли;
"},
{"Item","AST","Отключиться","Reset","Отключиться();","Reset();","@Синтаксис
Отключиться();
@Назначение
Применение этого метода позволяет отключиться от текущего подключенного сервера SMTP. Обычно 
используется в конце сессии подключения.
@Возвращаемое значение:
Нет
@Параметры: 
Нет

@Пример:
// E-mail: 'Ivanov#mail.ru', пароль: 'qqq'
ЗагрузитьКомпоненту(''DialMail.dll'');
Отправка=СоздатьОбъект(''AddIn.Smtp'');
Если Отправка.Подключиться(''smtp.mail.ru'')=1 тогда
       ....
       Отправка.Отключиться();
КонецЕсли;
"},
{"Item","AST","УстановитьКодировкуИСпособКодирования","SetCharsetAndEncoding","УстановитьКодировкуИСпособКодирования(<?>,<?>);","SetCharsetAndEncoding(<?>,<?>);","@Синтаксис
УстановитьКодировкуИСпособКодирования(<НомерКодировки>,<НомерСпособаКодирования>);
@Назначение
Служит для установки необходимой кодировки в письме, и задания способа кодирования письма. Вызывается ПЕРЕД первым вызовом ''СоздатьПисьмо(...)''. Данный метод для изменения кодировки / способа кодирования письма необходимо применять только тогда, когда удаленная сторона не может прочитать почту.
@Возвращаемое значение:
НЕТ
@Параметры: 
<НомерКодировки> - целое число от -1 до 28. Указание номера кодировки. По умолчанию -1 (автоподбор) 
<НомерСпособаКодирования> - целое число от -1 до 5. Указание номера способа кодирования письма. По умолчанию -1 (автоподбор)
@Расшифровки:
<НомерКодировки>: -1 - автоподбор,
0 (ISO_8859_1), 1( ISO_8859_2), 2(ISO_8859_3), 3 (ISO_8859_4), 4(ISO_8859_5), 5(ISO_8859_6), 6(ISO_8859_7), 7(ISO_8859_8), 8(ISO_8859_9), 9(ISO_8859_10), 10(ISO_8859_13), 11(ISO_8859_14), 12(ISO_8859_15), 13(CP1250), 14(CP1251-кириллица), 15(CP1252), 16(CP1253), 17(CP1254), 18(CP1255), 19(CP1256), 20(CP1257), 21(CP1258), 22(KOI8_R), 23(CP895), 24(CP852), 25(UCS_2), 26(UCS_4), 27(UTF_8), 28(UTF_7)

<НомерСпособаКодирования>: -1 - автоподбор, 
0 (7BIT), 1 (8BIT), 2(QUOTED_PRINTABLE), 3(BASE64), 4 (UU), 5 (XX);

"},
{"Item","AST","СоздатьПисьмо","CreateMail","СоздатьПисьмо(<?>,<?>,<?>,<?>,<?>,<?>,<?>)","CreateMail(<?>,<?>,<?>,<?>,<?>,<?>,<?>)","@Синтаксис
СоздатьПисьмо(<ОтКого>,<Кому>,<Копии>,<ТемаПисьма>,<Организация>, <ТелоПисьма>,<ПрисоединенныеФайлы>)
@Назначение
Создается письмо и сохраняется в РабочемКаталоге
@Возвращаемое значение:
Имя созданного файла-письма. если пустое значение, то письмо не создано
@Параметры: 
Все параметры, кроме <ОтКого> и <Кому>, необязательные.
<ОтКого> - электронный адрес отправителя этого письма
<Кому> - электронные адреса получателей этого письма через запятую или точку с запятой
<Копии> - электронные адреса получателей копии этого письма через запятую или точку с запятой
<ТемаПисьма> - тема письма этого письма
<Организация> - организация отправителей этого письма
<ТелоПисьма> - тело письма (Строково)
<ПрисоединенныеФайлы> - имена файлов с полными путями через запятую. Если имя файла с полным путем содержит пробелы, то такое имя берется в кавычки

@Примечание 1:
После выполнения метода созданное письмо  становится ''текущим'' (см. ТекущееПисьмо). 

@Примечание 2:
Задание E-Mail адресов в <Кому> и <Копии> стандартно. Можно использовать как и длинную форму (Петров <petroff#nikuda.net>), так и короткую (ivanovivan#newmail.com). Если в длинной форме задания адреса необходимо использовать запятую или точку с запятой, то данный адрес нужно целиком брать в кавычки (''Петров, Петя <petroff#nikuda.net>''). Отметим также, что скобки: '<>' у E-Mail адреса можно опускать (Петров petroff#nikuda.net). Несколько E-Mail адресов задается в одной строке через запятую или точку с запятой.
Пример правильного задания адресов:
// один адрес, кавычки обязательны
''Петров, Петя <petroff#nikuda.net>''
// Два адреса, кавычки не нужны
Петров Вася dfcz#mail.ru;tundra#olga.net.com
// Три адреса, вариации...
''Петров, Петя petroff#nikuda.net'', ivanov#kruto.com, Оля olga#tula.motors.ua
(Под знаком # здесь понимается 'почтовая собака' :))
"},
{"Item","AST","ОтправитьПисьмо","SendMail","ОтправитьПисьмо(<?>,<?>,<?>)","SendMail(<?>,<?>,<?>)","@Синтаксис
ОтправитьПисьмо([<ПорядковыйНомерПисьмаВРабочемКаталоге>],[<УдалятьПослеУдачногоОтправления>],[<ЗапуститьВПотоке>])
@Назначение
Отправка письма на сервер SMTP по порядковому номеру в РабочемКаталоге
@Возвращаемое значение:
1 - операция закончилась удачно.
-100 - запущен процесс отправления (при ЗапуститьВПотоке=1)
-1 - ошибки при посылке заголовка письма
0 - ошибка при выполнении данной операции (разрыв?, простой сокета?).
@Параметры: 
<ПорядковыйНомерПисьмаВРабочемКаталоге> - порядковый номер письма в РабочемКаталоге. Необязательный, если пропущен или 0, то отправляется ''текущее'' письмо (см. ТекущееПисьмо).
<УдалятьПослеУдачногоОтправления> - необязательный. При 1 - удаляется из РабочегоКаталога после удачного отправления, 0 - не удалять. По умолчанию 0
<ЗапуститьВПотоке> - необязательный. 1 - запустить в отдельном потоке и генерировать события о состоянии соединения из внешней компоненты в 1С (ОбработкаВнешнегоСобытия); 0 - запустить в основном потоке, события не генерировать. По умолчанию 0.

@Пример:
// E-mail: 'Ivanov#mail.ru', пароль: 'qqq'
// Подключаемся к SMTP-серверу, отправляем все письма с последующим удалением
ЗагрузитьКомпоненту(''DialMail.dll'');
Отправка=СоздатьОбъект(''AddIn.Smtp'');
Отправка.РабочийКаталог=''c:\'';
Если Отправка.Подключиться(''smtp.mail.ru'')=1 тогда
   Пока Отправка.КоличествоПисемВРабочемКаталоге>0 цикл
      Если Отправка.ОтправитьПисьмо(1,1)<=0 тогда
          Предупреждение(''Ошибка отправки письма'');
          Отправка=0;
          Возврат;
      КонецЕсли;
   КонецЦикла
   Отправка.Отключиться();
КонецЕсли;
"},
{"Item","AST","ОтправитьВсеПисьма","SendAllMails","ОтправитьВсеПисьма(<?>,<?>,<?>)","SendAllMails(<?>,<?>,<?>)","@Синтаксис
ОтправитьВсеПисьма([<ОтключатьсяПосле>], [<УдалятьПослеУдачногоОтправления>], [<ЗапуститьВПотоке>])
@Назначение
Отправка всех писем из РабочегоКаталога на сервер SMTP
@Возвращаемое значение:
1 - операция закончилась удачно.
-100 - запущен процесс отправления (ЗапуститьВПотоке=1)
0 - ошибка при выполнении данной операции (разрыв?, простой сокета?).
@Параметры: 
<ОтключатьсяПосле> - необязательный. 1 - после удачной отправки писем отключиться от текущего подключенного сервера SMTP, 0 - не отключаться. По умолчанию 1. 
<УдалятьПослеУдачногоОтправления> - необязательный. При 1 - удаляется из РабочегоКаталога после удачного отправления, 0 - не удалять. По умолчанию 0
<ЗапуститьВПотоке> - необязательный. 1 - запустить в отдельном потоке и генерировать события о состоянии соединения из внешней компоненты в 1С (ОбработкаВнешнегоСобытия); 0 - запустить в основном потоке, события не генерировать. По умолчанию 0.

@Пример:
// E-mail: 'Ivanov#mail.ru', пароль: 'qqq'
// Подключаемся к SMTP-серверу, отправляем все письма с последующим удалением
ЗагрузитьКомпоненту(''DialMail.dll'');
Отправка=СоздатьОбъект(''AddIn.Smtp'');
Отправка.РабочийКаталог=''c:\'';
Если Отправка.Подключиться(''smtp.mail.ru'')=1 тогда
   Если Отправка.ОтправитьВсеПисьма(,1)<=0 тогда
        Предупреждение(''Ошибка отправки писем'');
        Отправка=0;
        Возврат;
   КонецЕсли;
КонецЕсли;

"},
{"Item","AST","ОстановитьОтправку","ОстановитьОтправку","ОстановитьОтправку()","","@Синтаксис
ОстановитьОтправку()
@Назначение
Остановить поток отправки писем (см. ОтправитьПисьмо(...), ОтправитьВсеПисьма(...) при <ЗапуститьВПотоке>=1)
@Возвращаемое значение:
нет

"},
{"Item","AST","ИдетОтправка","IsSending","ИдетОтправка()","IsSending()","@Синтаксис
ИдетОтправка()
@Назначение
Проверяет, идет ли сейчас в потоке отправка почты
@Возвращаемое значение:
1 - отправка идет
0 - отправки в данный момент нет
"}
}
},
{"Folder","AST","Работа с текстовыми файлами (TextFile)","",
{"Item","AST","ОткрытьТФДляЧтения","OpenTFForRead","ОткрытьТФДляЧтения(<?>)","OpenTFForRead(<?>)","@Синтаксис
ОткрытьТФДляЧтения(<ПолноеИмяФайла>)
@Назначение
Открыть текстовый файл для чтения или сместить указатель чтения на первую строку файла
@Возвращаемое значение:
1 - файл открыт
0 - операция завершилась неудачно
@Параметры: 
<ПолноеИмяФайла> - имя файла с путем к нему (например, ''c:\log.txt'')

@Пример:
ЗагрузитьКомпоненту(''DialMail.dll'');
Т1=СоздатьОбъект(''AddIn.TextFile'');
ТекстИзФайла='''';
Если Т1.ОткрытьТФДляЧтения('''c:\DETLOG.TXT''')=1 тогда
  Стр='''';
  Пока Сист.ПрочитатьИзТФ(стр)=1 цикл
      ТекстИзФайла=ТекстИзФайла+РазделительСтрок+Стр;
  КонецЦикла;
КонецЕсли;
Т1.ЗакрытьТФ();

"},
{"Item","AST","ПрочитатьИзТФ","ReadFromTF","ПрочитатьИзТФ(<?>)","ReadFromTF(<?>)","@Синтаксис
ПрочитатьИзТФ(<Строка>)
@Назначение
Прочитать строку из текущего текстового файла, открытого для чтения и сместить указатель чтения на следующую строку
@Возвращаемое значение:
1 - строка считана
0 - операция завершилась неудачно, или достигнут конец файла
@Параметры: 
<Строка> - переменная, в которую помещается прочитанная строка

@Пример:
ЗагрузитьКомпоненту(''DialMail.dll'');
Т1=СоздатьОбъект(''AddIn.TextFile'');
ТекстИзФайла='''';
Если Т1.ОткрытьТФДляЧтения('''c:\DETLOG.TXT''')=1 тогда
  Стр='''';
  Пока Сист.ПрочитатьИзТФ(стр)=1 цикл
      ТекстИзФайла=ТекстИзФайла+РазделительСтрок+Стр;
  КонецЦикла;
КонецЕсли;
Т1.ЗакрытьТФ();

"},
{"Item","AST","ЗакрытьТФ","CloseTF","ЗакрытьТФ()","CloseTF()","@Синтаксис
ЗакрытьТФ()
@Назначение
Закрыть текущий текстовый файл, открытый для записи или чтения.
@Возвращаемое значение:
1 - файл закрыт
0 - операция завершилась неудачно
@Параметры: 
Нет

@Пример:
ЗагрузитьКомпоненту(''DialMail.dll'');
Т1=СоздатьОбъект(''AddIn.TextFile'');
Если Т1.ОткрытьТФДляЗаписи('''c:\DDD.TXT''')=1 тогда
   Т1.ОчиститьТФ();
КонецЕсли;
Т1.ЗакрытьТФ();

"},
{"Item","AST","ОткрытьТФДляЗаписи","OpenTFForWrite","ОткрытьТФДляЗаписи(<?>)","OpenTFForWrite(<?>)","@Синтаксис
ОткрытьТФДляЗаписи(<ПолноеИмяФайла>)
@Назначение
Открыть текстовый файл для записи (создать, если не существует), и переместить указатель записи в конец файла
@Возвращаемое значение:
1 - файл открыт
0 - операция завершилась неудачно
@Параметры: 
<ПолноеИмяФайла> - имя файла с путем к нему (например, ''c:\log.txt'')

@Пример:
ЗагрузитьКомпоненту(''DialMail.dll'');
Т1=СоздатьОбъект(''AddIn.TextFile'');
Если Т1.ОткрытьТФДляЗаписи('''c:\DDD.TXT''')=1 тогда
  стр=''Эта строка (до-)запишется в файл'';
  Т1.ДобавитьВТФ(стр);
КонецЕсли;
Т1.ЗакрытьТФ();

"},
{"Item","AST","ДобавитьВТФ","AddToTF","ДобавитьВТФ(<?>)","AddToTF(<?>)","@Синтаксис
ДобавитьВТФ(<Строка>)
@Назначение
Записать строку в конец текущего текстового файла, открытого для записи
@Возвращаемое значение:
1 - строка записана
0 - операция завершилась неудачно
@Параметры: 
<Строка> - переменная, в которую помещается строка для записи

@Пример:
ЗагрузитьКомпоненту(''DialMail.dll'');
Т1=СоздатьОбъект(''AddIn.TextFile'');
Если Т1.ОткрытьТФДляЗаписи('''c:\DDD.TXT''')=1 тогда
  стр=''Эта строка (до-)запишется в файл'';
  Т1.ДобавитьВТФ(стр);
КонецЕсли;
Т1.ЗакрытьТФ();

"},
{"Item","AST","ОчиститьТФ","ClearTF","ОчиститьТФ()","ClearTF()","@Синтаксис
ОчиститьТФ()
@Назначение
Очистить (удалить содержимое) текущего текстового файла, открытого для записи
@Возвращаемое значение:
1 - содержимое файла удалено
0 - операция завершилась неудачно
@Параметры: 
Нет

@Пример:
ЗагрузитьКомпоненту(''DialMail.dll'');
Т1=СоздатьОбъект(''AddIn.TextFile'');
Если Т1.ОткрытьТФДляЗаписи('''c:\DDD.TXT''')=1 тогда
   Т1.ОчиститьТФ();
КонецЕсли;
Т1.ЗакрытьТФ();

"},
{"Item","AST","УстановитьДатуФайла","FileSetDate","УстановитьДатуФайла(<?>,<?>)","FileSetDate(<?>,<?>)","@Синтаксис
УстановитьДатуФайла(<ПолноеИмяФайла>,<ДатаВремя>)
@Назначение
Установим дату и время последнего изменения файлу. 
@Возвращаемое значение:
1 - операция завершилась удачно
0 - операция завершилась неудачно (файл уже открыт другим приложением,  файла не существует)
@Параметры: 
<ПолноеИмяФайла> - имя файла с путем к нему (например, ''c:\log.txt'')
<ДатаВремя> - строковое значение, содержащее дату и время. Формат ''yyyy.mm.dd hh:mm:ss''. Например, ''2004.12.03 10:00:01''.
@Пример:
// установим дату и время последнего
// изменения файла ''c:\text1.doc'' файлу
// ''c:\text2.doc''
ЗагрузитьКомпоненту(''DialMail.dll'');
Файл=СоздатьОбъект(''AddIn.TextFile'');
ДатаВремяФайла='''';
ФС.АтрибутыФайла(''c:\text1.doc'',,,,,ДатаВремяФайла);
Файл.УстановитьДатуВремя(''c:\text2.doc'',ДатаВремяФайла);
"}
},
{"Folder","AST","Архивация (ZIP)","",
{"Item","AST","readme","readme","","","Описание объекта ZIP находится в режиме 'беты' - примеров пока нет, текст описания не откорректирован. В следующей версии компоненты этот недостаток будет устранен. А пока пишите, если что не получается или не ясно: swa(собака)list.ru

Для работы с архивами необходимы dll-ки UnzDll.dll и ZipDll.dll. Скачать их можно с http://www.delphizip.net/dzdll.html. Необходимо их поместить в ...Windows\system32\. Хотя можно и в произвольный каталог, но тогда необходимо указать этот каталог в атрибуте ПутьКБиблиотекам (DllsPath).
"},
{"Folder","AST","Атрибуты","",
{"Item","AST","Пароль","Password","Пароль","Password","@Синтаксис
Пароль
@Назначение
Пароль на архивы. Доступен по чтению и записи. Применяется при добавлении файлов в архив (сжатии) и распаковке архивов. После сжатия или распаковки данный атрибут очищается.
"},
{"Item","AST","УровеньКомпрессии","CompressionLevel","УровеньКомпрессии","CompressionLevel","@Синтаксис
УровеньКомпрессии
@Назначение
Численное значение, задающее качество сжатия. Изменяется от 0 до 9. 0 - нет компрессии, 9 - наилучшее сжатие. По умолчанию 9.  Доступен по чтению и записи. Применяется при добавлении файлов в архив (сжатие).
"},
{"Item","AST","КаталогДобавления","AddPath","КаталогДобавления","AddPath","@Синтаксис
КаталогДобавления
@Назначение
Корневой (текущий) каталог для добавления файлов из этого каталога в архив (сжатие). Доступен на чтение и запись. 
"},
{"Item","AST","КаталогИзвлечения","ExtractPath","КаталогИзвлечения","ExtractPath","@Синтаксис
КаталогИзвлечения
@Назначение
Корневой (текущий) каталог для извлечения файлов из архива в данный каталог (распаковка). Доступен на чтение и запись. 
"},
{"Item","AST","ПутьКБиблиотекам","DllsPath","ПутьКБиблиотекам","DllsPath","@Синтаксис
ПутьКБиблиотекам
@Назначение
Каталог местонахождения UnzDll.dll и ZipDll.dll. Метод доступен на чтение и запись. 
"},
{"Item","AST","КодОшибки","ErrorCode","КодОшибки","ErrorCode","@Синтаксис
КодОшибки
@Назначение
Число, код ошибки. Устанавливается при работе с методами ДобавитьВАрхив(), УдалитьИзАрхива(), Извлечь()

Возможные значения:
0 - нет ошибки
1 - недоступен путь извлечения при распаковке
2 - не найдена UnzDll.dll
11 - не найден ZIP-файл при добавлении / удаления файлов
12 - нет файлов для удаления / распаковки
13 - не поддерживается работа с мультиформатным архивом
14 - не найдена ZipDll.dll
101 - не можем создать файл ZIP при добавлении файлов
102 - не можем получить доступ к выбранному диску
103 - файл не в формате ZIP - неправильный формат файла
104 - не ошибка! Пустой ZIP файл
105 - ошибка чтения заголовка ZIP файла
"},
{"Item","AST","ТекущийАрхив","CurrentArchive","ТекущийАрхив","CurrentArchive","@Синтаксис
ТекущийАрхив
@Назначение
Доступен по чтению. Дает строку - имя файла текущего архива. Устанавливается после методов ДобавитьВАрхив(), УдалитьИзАрхива(), Извлечь(), УстановитьАрхивТекущим().
"}
},
{"Folder","AST","Методы","",
{"Item","AST","ДобавитьМаску","AddMask","ДобавитьМаску(<?>)","AddMask(<?>)","@Синтаксис
ДобавитьМаску(<Маска>)
@Назначение
Добавим маску файлов, применяемую для упаковки / распаковки
@Возвращаемое значение:
Нет
@Параметры: 
<Маска> - маска, каталог или имя файла. Например ''*.txt'', ''c:\set.ini''

@Пример:
"},
{"Item","AST","ОчиститьМаски","ClearMasks","ОчиститьМаски();","ClearMasks()","@Синтаксис
ОчиститьМаски()
@Назначение
Очистим все ранее введенные маски файлов
@Возвращаемое значение:
Нет
"},
{"Item","AST","ДобавитьВАрхив","AddToArchive","ДобавитьВАрхив(<?>,<?>,<?>)","AddToArchive(<?>,<?>,<?>)","@Синтаксис
ДобавитьВАрхив(<ПараметрыАрхивации>,[<Маска>],[<ИмяZIPФайла>])
@Назначение
Добавление файлов в архив. Если файл архива отсутствует, то создадим его.
@Возвращаемое значение:
Возвращает количество добавленных в архив файлов.
@Параметры: 
<ПараметрыАрхивации> - строковое выражение, перечисляются параметры архивации. Например ''UR'' или ''R, S''. Может быть пустым
<Маска> - маска, каталог или имя файла. Например ''*.txt'', ''c:\set.ini''
<ИмяZIPФайла> - имя файла архива. Если пропущен, то файлы добавляются в  текущий архив (см. ТекущийАрхив, УстановитьАрхивТекущим(...))

@Примечание 1:
значения <ПараметрыАрхивации> (если один из параметров отсутствует, то действие будет противоположно описываемому) 
F
Freshen: заменяются в архиве файлы более новыми. Если в архиве нет искомого файла, то он не добавляется

U
Update: заменяются в архиве файлы более новыми. Если в архиве нет искомого файла, то он добавляется

Если не указывается ни F ни U, то все файлы добавятся в архив, причем замена уже присутствующих файлов в архиве будет идти не зависимо от даты последнего изменения файла.

R
Recursive: добавление в архив всех файлов и папок, содержащихся в указанных папках или по маске. Если отсутствует, то будут добавляться только файлы

P
WithFullPath: С сохранением полного пути без буквы диска.

E
FolderEntries: Имена папок будут добавлены в архив. 

O
ZipTime: Will set the archives Time Created to that of the newest file in the archive.

S
HiddenFiles: Без данного флага скрытые и системные файлы не будут добавляться в архив

K
ForceDOS: Имена добавленных файлов будут преобразовываться в формат DOS 8.3 (старый досовский формат) - такой режим нужен для совместимости со старыми версиями распаковщиков.

@Примечание 2:
Если параметр <Маска> не задан, то используются маски, заданные с помощью метода ДобавитьМаску(...)

@Пример:
"},
{"Item","AST","УдалитьИзАрхива","DeleteFromArchive","УдалитьИзАрхива(<?>,<?>)","DeleteFromArchive(<?>,<?>)","@Синтаксис
УдалитьИзАрхива([<Маска>],[<ИмяZIPФайла>])
@Назначение
Удаление файлов из архива.
@Возвращаемое значение:
Возвращает количество удаленных из архива файлов.
@Параметры: 
<Маска> - маска, каталог или имя файла. Например ''*.txt'', ''c:\set.ini''. Необязательный параметр.
<ИмяZIPФайла> - имя файла архива. Если пропущен, то удаляется из текущего архива (см. ТекущийАрхив, УстановитьАрхивТекущим(...))

@Примечание 
Если параметр <Маска> не задан, то используются маски, заданные с помощью метода ДобавитьМаску(...)
"},
{"Item","AST","Извлечь","Extract","Извлечь(<?>,<?>,<?>)","Extract(<?>,<?>,<?>)","@Синтаксис
Извлечь(<ПараметрыРаспаковки>,[<Маска>],[<ИмяZIPФайла>])
@Назначение
Извлечение файлов из архива (распаковка).
@Возвращаемое значение:
Возвращает количество файлов, извлеченных из архива.
@Параметры: 
<ПараметрыРаспаковки> - строковое выражение, перечисляются параметры для извлечения. Например ''UP'' или ''P, F''. 
<Маска> - маска, каталог или имя файла. Например ''*.txt'', ''c:\set.ini''
<ИмяZIPФайла> - имя файла архива. Если пропущен, то файлы извлекаются из текущего архива (см. ТекущийАрхив, УстановитьАрхивТекущим(...))

@Примечание 1:
значения <ПараметрыРаспаковки> (если один из параметров отсутствует, то действие будет противоположно описываемому) 
F
Freshen: заменяются файлы более новыми из архива. Если  нет искомого файла, то он не извлекается

U
Update: заменяются файлы более новыми из архива. Если нет искомого файла, то он добавляется - извлекается из архива

Если не задан параметр F и U, то замена уже присутствующих файлов в пути извлечения  будет идти не зависимо от даты последнего изменения файла.

T
Test: тестирование архива. Метод возвращает 0 в случае неудачи или пустого архива.

P
WithPaths: извлечение файлов с ''путями''

@Примечание 2:
Если параметр <Маска> не задан, то используются маски, заданные с помощью метода ДобавитьМаску(...)

@Пример:
"},
{"Item","AST","УстановитьАрхивТекущим","SetCurrentArchive","УстановитьАрхивТекущим(<?>)","SetCurrentArchive(<?>)","@Синтаксис
УстановитьАрхивТекущим(<ИмяZIPФайла>)
@Назначение
Архив с именем <ИмяZIPФайла> становится текущим. После данного метода в последующих командах работы с архивом имя файла можно не указывать.
@Возвращаемое значение:
0 - произошла ошибка (не найден файл с данным именем, файл не является архивом в формате ZIP)
1 - удачно завершилась. Архив с именем файла <ИмяZIPФайла> стал текущим
@Параметры: 
<ИмяZIPФайла> - имя файла архива
"},
{"Item","AST","ПолучитьИмяФайла","GetFileName","ПолучитьИмяФайла(<?>,<?>)","GetFileName(<?>,<?>)","@Синтаксис
ПолучитьИмяФайла(<ПорНомерФайла>,[<ИмяZIPФайла>])
@Назначение
Возвращает строку с именем запакованного файла (например, 'text.txt')
@Параметры: 
<ПорНомерФайла> - порядковый номер файла в архиве. Изменяется от 1 до количества файлов в архиве. См. КоличествоФайлов()
<ИмяZIPФайла> - имя файла архива. Если пропущен, метод работает с текущим архивом (см. ТекущийАрхив, УстановитьАрхивТекущим(...))

"},
{"Item","AST","ПолучитьИнформациюОФайле","GetFileInfo","ПолучитьИнформациюОФайле(<?>,<?>)","GetFileInfo(<?>,<?>)","@Синтаксис
ПолучитьИнформациюОФайле(<ПорНомерФайла>,[<ИмяZIPФайла>])
@Назначение
Возвращает строку с информацией о запакованном файле. Информация имеет вид ''ГГГГ.ММ.ДД,чч:нн:cc,ДЛИН,ДЛИНСЖ'', где ГГГГ - год последнего изменения файла, ММ - месяц, ДД - день, чч - час, нн - минуты, сс - секунды, ДЛИН - размер неупакованного файла в байтах, ДЛИНСЖ - размер упакованного файла в байтах.
@Параметры: 
<ПорНомерФайла> - порядковый номер файла в архиве. Изменяется от 1 до количества файлов в архиве. См. КоличествоФайлов()
<ИмяZIPФайла> - имя файла архива. Если пропущен, метод работает с текущим архивом (см. ТекущийАрхив, УстановитьАрхивТекущим(...))

"},
{"Item","AST","КоличествоФайлов","FilesCount","КоличествоФайлов(<?>)","FilesCount(<?>)","@Синтаксис
КоличествоФайлов([<ИмяZIPФайла>])
@Назначение
Возвращает число - количество упакованных в архиве файлов. При возврате 0 - архив пустой или возникла ошибка.
@Параметры: 
<ИмяZIPФайла> - имя файла архива. Если пропущен, метод работает с текущим архивом (см. ТекущийАрхив, УстановитьАрхивТекущим(...))
"}
}
},
{"Folder","AST","Системные команды (SystComm)","",
{"Folder","AST","Атрибуты","",
{"Item","AST","Версия","Version","Версия","Version","@Синтаксис
Версия
@Назначение
Дает строку версии компоненты. Доступен по чтению.

"},
{"Item","AST","Версия_Число","Version_Num","Версия_Число","Version_Num","@Синтаксис
Версия_Число
@Назначение
Дает номер версии компоненты в виде числа. Например, если версия компоненты 2.5.1, то значение будет 20501. Доступен по чтению.

"},
{"Item","AST","ВерсияОС","OSVersion","ВерсияОС","OSVersion","@Синтаксис
ВерсияОС
@Назначение
Дает строку версии операционной системы (Windows 98 build 2222 A, Windows 2000 build 2195 Service Pack 2, и т.д.). Доступен по чтению.
"},
{"Item","AST","СистемноеМеню","SysMenu","СистемноеМеню","SysMenu","@Синтаксис
СистемноеМеню
@Назначение

Идея и реализация принадлежит Андрею Ерохину.

Позволяет управлять видимостью ситемного меню 1С. При присвоении реквизиту 0 меню скрывается, при 1 - появляется.
Доступен по чтению и записи.

@Пример:
// скроем системное меню 1С
ЗагрузитьКомпоненту(''DialMail.dll'');
Сист=СоздатьОбъект(''AddIn.SystComm'');
Сист.СистемноеМеню=0;
...
// переключим системное меню 
// (если вкл - то отключим, если выкл 
// - то включим)
ЗагрузитьКомпоненту(''DialMail.dll'');
Сист=СоздатьОбъект(''AddIn.SystComm'');
Сист.СистемноеМеню=1-Сист.СистемноеМеню;
...
"},
{"Item","AST","Окно1ССверху","Window1COnTop","Окно1ССверху","Window1COnTop","@Синтаксис
Окно1ССверху
@Назначение
При значения в 1 позволяет установить главное окно 1С Предприятия поверх всех остальных. Окно 1C становится ''всегда сверху'' - ''TOPMOST'' - запрещение перекрытий окна 1С окнами других приложений.  При значении в 0 - окно вернется в обычное состояние. Атрибут доступен по чтению и записи

"},
{"Item","AST","Окно1СБезРамки","","Окно1СБезРамки","","@Синтаксис
Окно1СБезРамки
@Назначение
При значении =1 убирает рамку и поле с заголовком у окна 1С:Предприятие. Может потребоваться при разработке приложений подобных АРМ кассира. При значении =0 окно возвращается в прежнее состояние.
"}
},
{"Folder","AST","Методы","",
{"Item","AST","КаталогОС","WindowsPath","КаталогОС()","WindowsPath()","@Синтаксис
КаталогОС()
@Назначение
Возвращает каталог, в котором находится операционная система (Windows). В конце полученной строки будет присутствовать слэш. Например, может быть возвращено ''c:\windows\''.

"},
{"Item","AST","КаталогВременныхФайловОС","WindowsTempPath","КаталогВременныхФайловОС()","WindowsTempPath()","@Синтаксис
КаталогВременныхФайловОС()
@Назначение
Возвращает каталог временных файлов Windows. Нужно отметить, что он может  быть не равен ''КаталогВременныхФайлов()''. Например, может быть возвращено ''c:\windows\temp\''.

"},
{"Item","AST","ЗапуститьОжидая","RunWaiting","ЗапуститьОжидая(<?>);","RunWaiting(<?>);","@Синтаксис
ЗапуститьОжидая(<Строка запуска>);
@Назначение
Запуск приложения и ожидание его завершения. До завершения приложения переход обратно в 1С:Предприятие невозможен.
@Возвращаемое значение:
Нет
@Параметры: 
<Строка запуска> - командная строка запуска приложения: путь к приложению и параметры. Если имя запускаемого файла с полным путем содержит пробелы, то такое имя берется в кавычки

@Пример:
ЗагрузитьКомпоненту(''DialMail.dll'');
Сист=СоздатьОбъект(''AddIn.SystComm'');
Сист.ЗапуститьОжидая('' ''''c:\program Files\winrar.exe''' a bigprogram.rar ''''c:\big program.pas'''' '');
...

"},
{"Item","AST","ПокинутьОС","OSExit","ПокинутьОС(<?>,<?>)","OSExit(<?>,<?>)","@Синтаксис
ПокинутьОС(<СпособВыхода>,[<АльтСпособВыхода>])
@Назначение
Закрывает Windows любой версии в соответствии с параметром
@Возвращаемое значение:
1 - операция инициализации выхода из системы выполнена
0 - ошибка при операции инициализации выхода из системы
@Параметры: 
<СпособВыхода> - число, биты которого задают способ закрытия Windows 
<АльтСпособВыхода> - число, необязательный, по умолчанию 1. При 1 - используется альтернативный способ выключения/перезагрузки - через 'внешнюю программу', при 0 - процедура выключения/перезагрузки выполняется в самой компоненте.

@Примечание 1
Параметр <СпособВыхода> . Значения битов и расшифровка. Данные значения могут складываться. Например, стандартное выключение компьютера - SHUTDOWN+POWEROFF=1+8=9

0  - LOGOFF (завершение сеанса пользователя)
1  - SHUTDOWN (завершение работы)
2  - REBOOT (перезагрузка)
4  - FORCE
8  -  POWEROFF (отключение питания)
16-  FORCEIFHUNG

@Примечание 2
Для наиболее безопасного (для данных) выключения/перезагрузки, рекомендуется значение параметра <АльтСпособВыхода> равным 1.

@Пример:
// Выключим компьютер
Процедура ПриЗавершенииРаботыСистемы()
...  
  ЗагрузитьКомпоненту(''DialMail.dll'');
  Сист=СоздатьОбъект(''AddIn.SystComm'');
  Сист.ПокинутьОС(1+8);
...

"},
{"Item","AST","АктивироватьОкноРабочейПрограммы","ActivateWindowOfWorkingProgram","АктивироватьОкноРабочейПрограммы()","ActivateWindowOfWorkingProgram()","@Синтаксис
АктивироватьОкноРабочейПрограммы()
@Назначение
Выдвигает на передний план главное окно программы 1С:Предприятие.
@Возвращаемое значение:
Нет
@Параметры: 
Нет

@Пример:
// Запустим проводник. После его закрытия активируем окно 1С.
ЗагрузитьКомпоненту(''DialMail.dll'');
Сист=СоздатьОбъект(''AddIn.SystComm'');
Сист.ЗапуститьОжидая(''explorer.exe'');
Сист.АктивироватьОкноРабочейПрограммы();
...

"},
{"Item","AST","ПоказатьОкно","ShowWindow","ПоказатьОкно(<?>,<?>)","ShowWindow(<?>,<?>)","@Синтаксис
ПоказатьОкно(<ЗаголовокОкна>,<Команда>)
@Назначение
Изменяет параметры показа окна Windows (показать, скрыть, свернуть, восстановить и др.)
@Возвращаемое значение:
0 - ошибка (окно не найдено)
>0 - HWND окна (уникальный дескриптор) - число
@Параметры: 
<ЗаголовокОкна> - строка, которая содержит заголовок или часть заголовка окна. Если значение пустое, то <Команда> применяется к окну 1С Предприятия.
<Команда> - число, необязательный, по умолчанию -1.
некоторые возможные значения:
-1 -  никаких действий не производится
 0 -  HIDE (скрыть окно)
 1 -  SHOWNORMAL (сделать активным и показать окно. Если окно свернуто или развернуто максимально, Windows восстанавливает его оригинальные размеры и положение, какие были в первый раз при создании данного окна)
 2 -  SHOWMINIMIZED (сделать активным окно и свернуть)
 3 -  MAXIMIZE (активировать окно и максимально развернуть)
 4 -  SHOWNOACTIVATE (показать окно с его текущими размером и положением и не делать его активным)
 5 -  SHOW (сделать активным и показать окно с его текущими размером и положением)
 6 -  MINIMIZE (свернуть окно, активировать следующее за ним)
 9 -  RESTORE (сделать активным и показать окно. Если окно свернуто или развернуто максимально, Windows восстанавливает его оригинальные размеры и положение, какие были до команд свернуть или развернуть максимально)

@Пример:
// скроем кнопку 'Пуск'
...  
  ЗагрузитьКомпоненту(''DialMail.dll'');
  Сист=СоздатьОбъект(''AddIn.SystComm'');
  Сист.ПоказатьОкно(''Пуск'',0);
...
// развернем максимально окно 1С Предприятия
  Сист.ПоказатьОкно(,3);
"},
{"Item","AST","СкрытьПанель1С","HidePanel1C","СкрытьПанель1С(<?>,<?>)","HidePanel1C(<?>,<?>)","@Синтаксис
СкрытьПанель1С([<Команда>],[<НазваниеПанели>])
@Назначение
Позволяет скрыть / показать панели инструментов и доп. окна (Панель окон, Окно сообщений) 
@Возвращаемое значение:
НЕТ
@Параметры: 
<Команда> - число, необязательный, по умолчанию = 1.
 1 - скрыть панель/ доп. окно
 0 - показать панель/ доп. окно
<НазваниеПанели> - название панели или доп. окно. Регистр не важен. Можно указывать неск. названия через запятую. Если пусто, то скрываются/показываются все панели / доп. окна
Возможные значения:
'Окно сообщений'
'Панель окон'
'Журнал расчетов'
'Текстовый редактор'
'Синтакс-Помощник'
'Формы'
'Редактор таблиц'
'Стандартная'
'Сервис'

@Примечание
Не рекомендуется использовать метод с <Команда>=0 и пустым <НазваниеПанели> - фактически 'показать все панели инструментов и доп. окна'. При попытке сделать это возможно появление некоторых ''артефактов'' на окне 1С:Предприятия

@Пример:
// скроем окно сообщений и панель окон
...  
  ЗагрузитьКомпоненту(''DialMail.dll'');
  Сист=СоздатьОбъект(''AddIn.SystComm'');
  Сист.СкрытьПанель1С(,''Окно сообщений,Панель окон'');
...
// Скроем все панели
  Сист.СкрытьПанель1С();

// Покажем стандартную панель инструментов и
// панель инструментов сервис
  Сист.СкрытьПанель1С(0,''Стандартная,Сервис'');
"},
{"Item","AST","РаскладкаКлавиатуры","KeyboardLayout","РаскладкаКлавиатуры(<?>);","KeyboardLayout(<?>);","@Синтаксис
РаскладкаКлавиатуры(<Раскладка>)
@Назначение
Меняет раскладку клавиатуры в текущей программе
@Возвращаемое значение:
НЕТ
@Параметры: 
<Раскладка> - строка, код языка-раскладки
'409' - английский
'419' - русский
'422' - украинский
"},
{"Item","AST","УстановитьСистемныеДатуВремя","SetSystemDateTime","УстановитьСистемныеДатуВремя(<?>,<?>,<?>,<?>,<?>,<?>,<?>)","SetSystemDateTime(<?>,<?>,<?>,<?>,<?>,<?>,<?>)","@Синтаксис
УстановитьСистемныеДатуВремя(<Год>,<Месяц>,<День>,<Часы>,<Минуты>,<Cекунды>,<МCекунды>)
@Назначение
Установим ситемные дату и время.
@Возвращаемое значение:
1 - системные дата и время установились
0 - ошибка в передаваемых данных или не удалось установить
@Параметры: 
Для всех параметров - все параметры числовые, если значение пропускается, либо значение равно -1, то оно не устанавливается (не изменяется)
<Год>,<Месяц>,<День>,<Часы>,<Минуты>,<Cекунды>,<МCекунды> - соответственно - год, , месяц, день, часы, минуты, секунды, миллисекунды.

@Пример:
// установим текущее время 10:30,
// дату не изменяем
ЗагрузитьКомпоненту(''DialMail.dll'');
Сист=СоздатьОбъект(''AddIn.SystComm'');
Сист.УстановитьСистемныеДатуВремя(,,,10,30,0,0);
...

"},
{"Item","AST","Ожидание","Sleep","Ожидание(<?>);","Sleep(<?>);","@Синтаксис
Ожидание(<Мсек>);
@Назначение
Приостанавливает работу 1С на <Мсек> миллисекунд без загрузки процессора. Окно 1С в данное время не перерисовывается. 
@Возвращаемое значение:
НЕТ
@Параметры: 
<Мсек> - число. Количество миллисекунд ожидания.
"}
}
}
}
}