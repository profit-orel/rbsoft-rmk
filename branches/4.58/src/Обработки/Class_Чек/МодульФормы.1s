//Конфигурация для платформы "1С:Предприятие 7.7" РБ-Софт:Рабочее место кассира.
//Версия 4.57 от 05.06.11 23:24:52
//(c) Баинов Евгений, ООО "РБ-Софт" 2006-2011 г.Улан-Удэ, ул.Балтахинова,17Е,офис 215
//e-mail: bainov@rb-soft.ru  icq: 73718937, телефоны: (3012) 440-357, 278-228
//Сайт проекта: http://code.google.com/p/rbsoft-rmk/
//_______________________________________________________________________________________
//Класс Чек
//_______________________________________________________________________________________
перем _База Экспорт;
//поля вычисляются функцией РасчитатьСуммы
Перем ОплатаНаличными Экспорт;
Перем ОплатаКредит Экспорт;
Перем ОплатаТарой Экспорт;
Перем ОплатаКартой Экспорт;
Перем ОплатаВсего Экспорт;

Перем СуммаСдачи  Экспорт;
Перем СуммаВсего  Экспорт;



Функция Этот(Конт) Возврат Конт; КонецФункции
Функция Сам() Возврат Этот(Контекст) КонецФункции
//------------------------------------ ------------------------------------
Процедура Конструктор()
	_База = Этот(Контекст).ПолучитьБазовыйКласс("ОбъектБДСГруппировками");
	Сам=Сам();
	Сам.Данные.Дата=ТекущаяДата();
	Сам.Данные.Время=ТекущееВремя();
	Сам.Данные.Статус=0;

КонецПроцедуры // Конструктор

Процедура Деструктор()

КонецПроцедуры // Деструктор


Функция РасчитатьСуммы() Экспорт
	Сам=Сам();

	Данные=Сам.Данные;

	ОплатаНаличными=0;
	ОплатаКредит=0;
	ОплатаТарой=0;
	ОплатаКартой=0;
	СуммаСдачи=0;


	ВидОплаты=СоздатьОбъект("ВидОплаты");
	Данные.Оплаты.ВыбратьСтроки();
	Пока Данные.Оплаты.ПолучитьСтроку()=1 Цикл
		Если Данные.Оплаты.СуммаОплаты>0 Тогда
			Если ВидОплаты.Прочитать(Данные.Оплаты.ВидОплаты)=0 Тогда
				Сам.УстановитьКодИОшибку(1001,"Не найден вид оплаты с ID="+Данные.Оплаты.ВидОплаты);
				Возврат 0;
			КонецЕсли;

			Если ВидОплаты.Данные.ТипОплаты=0 Тогда
				ОплатаНаличными=ОплатаНаличными+Данные.Оплаты.СуммаОплаты;
			ИначеЕсли ВидОплаты.Данные.ТипОплаты=1 Тогда
				ОплатаКартой=ОплатаКартой+Данные.Оплаты.СуммаОплаты;
			ИначеЕсли ВидОплаты.Данные.ТипОплаты=2 Тогда
				ОплатаКредит=ОплатаКредит+Данные.Оплаты.СуммаОплаты;
			ИначеЕсли ВидОплаты.Данные.ТипОплаты=3 Тогда
				ОплатаТарой=ОплатаТарой+Данные.Оплаты.СуммаОплаты;

			Иначе
				Сам.УстановитьКодИОшибку(1002,"Неизвестный тип оплаты ККМ. Неверно настроены параметры.
				|Тип оплаты="+ВидОплаты.Данные.ТипОплаты+"
				|ID="+Данные.Оплаты.ВидОплаты+"
				|Вид оплаты="+ВидОплаты.Данные.Наименование);
				Возврат 0;
			КонецЕсли;  //
		КонецЕсли;
	КонецЦикла;

	СуммаВсего=Данные.СуммаВсего;
	ОплатаВсего=ОплатаНаличными+ОплатаКартой+ОплатаКредит+ОплатаТарой;
	Если СуммаВсего<ОплатаВсего Тогда
		СуммаСдачи=СуммаВсего-ОплатаВсего;
	КонецЕсли;

	Возврат 1;
КонецФункции

//берет объект Чек и готовит текст для отправки на печать
//возвращает объект ИндексированнаяТаблица с готовым текстом, отформатированным для печати
//колонки возвращаемой таблицы значений:
//Шрифт - Число - По умолчанию 0.номер шрифта для печати на ККМ. Если не 0 - то печатать заданным шрифтом
//ПечататьЖирным- Число - По умолчанию 0. Если 1, то надо напечатать жирным
//Строка- строка для печати

Функция ПолучитьТекстЧекаПоМакету(МакетПечати,ККМ) Экспорт
Перем Наименование;
	Сам=Сам();

	ТЗ_Итог=глДрайверы.ТекстовыйПроцессор.СоздатьОписательТекста();

	ДанныеЧека=Сам.Данные;
	Товары=ДанныеЧека.Товары;
	Оплаты=ДанныеЧека.Оплаты;

	Продавец=ДанныеЧека.НаименованиеПродавца;
	Кассир=ДанныеЧека.НаименованиеКассира;



	СтруктураПараметров=СоздатьОбъект("Структура");
	СтруктураПараметров.Вставить("Чек",Сам);

	СтруктураПараметров.Вставить("Продавец",Продавец);
	СтруктураПараметров.Вставить("Кассир",Кассир);
	СтруктураПараметров.Вставить("ДисконтнаяКарта",ДанныеЧека.ДисконтнаяКарта);

	СтруктураПараметров.Вставить("НаименованиеКлиента",ДанныеЧека.НаименованиеКлиента);
	СтруктураПараметров.Вставить("НомерДокумента",ДанныеЧека.НомерДокумента);
	СтруктураПараметров.Вставить("НомерСмены",ДанныеЧека.НомерСмены);
	СтруктураПараметров.Вставить("НомерКассовогоЧека",ДанныеЧека.НомерКассовогоЧека);

	ДатаЧека=глСтроки.ДатаИзСтроки(ДанныеЧека.Дата);
	СтруктураПараметров.Вставить("Дата",Формат(ДатаЧека,"ДДДММГГГГ"));
	СтруктураПараметров.Вставить("Время",ДанныеЧека.Время);
	СтруктураПараметров.Вставить("ТекущаяДата",Формат(ТекущаяДата(),"ДДДММГГГГ"));
	СтруктураПараметров.Вставить("ТекущееВремя",ТекущееВремя());


	СтруктураПараметров.Вставить("НомерККМ",ДанныеЧека.НомерККМ);

	СтруктураПараметров.Вставить("Статус",ДанныеЧека.Статус);
	СтруктураПараметров.Вставить("КодОперации",ДанныеЧека.КодОперации);
	СтруктураПараметров.Вставить("ПризнакВнешнегоЧека",ДанныеЧека.ПризнакВнешнегоЧека);
	СтруктураПараметров.Вставить("ИД",ДанныеЧека.ИД);

	СтруктураПараметров.Вставить("КодОрганизации",ККМ.Данные.КодФирмы);
    СтруктураПараметров.Вставить("НаименованиеОрганизации","");
	СтруктураПараметров.Вставить("ИННОрганизации","");
	Фирма=СоздатьОбъект("Фирма");
	Если Фирма.Прочитать(ККМ.Данные.КодФирмы)=1 Тогда
	    СтруктураПараметров.Вставить("НаименованиеОрганизации",Фирма.Данные.Наименование);
		СтруктураПараметров.Вставить("ИННОрганизации",Фирма.Данные.ИНН);
	КонецЕсли;  //

	СтруктураПараметров.Вставить("СуммаБезСкидки",глФРМ(ДанныеЧека.СуммаБезСкидки));
	СтруктураПараметров.Вставить("СуммаСкидки",глФРМ(ДанныеЧека.СуммаСкидки));
	СтруктураПараметров.Вставить("СуммаНаценки",глФРМ(ДанныеЧека.СуммаНаценки));
	СтруктураПараметров.Вставить("СуммаВсего",глФРМ(ДанныеЧека.СуммаВсего));


	ТЗ_ТекстШапки=глДрайверы.ТекстовыйПроцессор.ОбработатьСекции(МакетПечати,"Шапка",СтруктураПараметров);



	СтруктураПараметровСтроки=СоздатьОбъект("Структура");
	СтруктураПараметровСтроки.Вставить("НомерСтроки");
	СтруктураПараметровСтроки.Вставить("Товар");
	СтруктураПараметровСтроки.Вставить("Наименование");
	СтруктураПараметровСтроки.Вставить("НаименованиеДляПечати");
	СтруктураПараметровСтроки.Вставить("Артикул");
	СтруктураПараметровСтроки.Вставить("Количество");
	СтруктураПараметровСтроки.Вставить("Коэффициент");
	СтруктураПараметровСтроки.Вставить("Единица");
	СтруктураПараметровСтроки.Вставить("Цена");
	СтруктураПараметровСтроки.Вставить("СуммаБезСкидки");
	СтруктураПараметровСтроки.Вставить("СуммаСкидки");
	СтруктураПараметровСтроки.Вставить("СуммаНаценки");
	СтруктураПараметровСтроки.Вставить("СуммаВсего");
	СтруктураПараметровСтроки.Вставить("Штрихкод");
	СтруктураПараметровСтроки.Вставить("Инфо");
	СтруктураПараметровСтроки.Вставить("КодТовара");
	СтруктураПараметровСтроки.Вставить("Артикул");

	Товар=СоздатьОбъект("Товар");
	ТЗ_ТекстТаблицы=глДрайверы.ТекстовыйПроцессор.СоздатьОписательТекста();
	Товары.ВыбратьСтроки();
	Пока Товары.ПолучитьСтроку()=1 Цикл
		СтруктураПараметровСтроки.НомерСтроки=Товары.НомерСтроки;

		СтруктураПараметровСтроки.КодТовара=Товары.Товар;
		СтруктураПараметровСтроки.Наименование=Товары.Наименование;

		Товар.Прочитать(СтруктураПараметровСтроки.КодТовара);

		СтруктураПараметровСтроки.НаименованиеДляПечати=Товар.Данные.НаименованиеДляПечати;
		СтруктураПараметровСтроки.Артикул=Товар.Данные.Артикул;


		СтруктураПараметровСтроки.Количество=глФРМКоличество(Товары.Количество);
		СтруктураПараметровСтроки.Коэффициент=глФРМКоличество(Товары.Коэффициент);
		СтруктураПараметровСтроки.Единица=Товары.Единица;

		СтруктураПараметровСтроки.Цена=глФРМ(Товары.Цена);
		СтруктураПараметровСтроки.СуммаБезСкидки=глФРМ(Товары.СуммаБезСкидки);
		СтруктураПараметровСтроки.СуммаСкидки=глФРМ(Товары.СуммаСкидки);
		СтруктураПараметровСтроки.СуммаНаценки=глФРМ(Товары.СуммаНаценки);
		СтруктураПараметровСтроки.СуммаВсего=глФРМ(Товары.СуммаВсего);


		СтруктураПараметровСтроки.Штрихкод=Товары.Штрихкод;
		СтруктураПараметровСтроки.Инфо=Товары.Инфо;


		ТЗ_ТекстТаблицы.Объединить(глДрайверы.ТекстовыйПроцессор.ОбработатьСекции(МакетПечати,"СтрокаТовар",СтруктураПараметровСтроки));
	КонецЦикла;



	ТЗ_ТекстПодвала=глДрайверы.ТекстовыйПроцессор.ОбработатьСекции(МакетПечати,"Подвал",СтруктураПараметров);

	ТЗ_ТекстОплаты=глДрайверы.ТекстовыйПроцессор.ОбработатьСекции(МакетПечати,"ШапкаОплаты",СтруктураПараметров);

	СтруктураПараметровОплаты=СоздатьОбъект("Структура");
	СтруктураПараметровОплаты.Вставить("ВидОплаты","");
	СтруктураПараметровОплаты.Вставить("Инфо","");
	СтруктураПараметровОплаты.Вставить("СуммаОплаты","");

	ВидОплаты=СоздатьОбъект("ВидОплаты");
	Оплаты.ВыбратьСтроки();
	Пока Оплаты.ПолучитьСтроку()=1 Цикл

		ВидОплаты.Прочитать(Оплаты.ВидОплаты);
		СтруктураПараметровОплаты.ВидОплаты=ВидОплаты.Данные.Наименование;
		СтруктураПараметровОплаты.СуммаОплаты=глФРМ(Оплаты.СуммаОплаты);
		СтруктураПараметровОплаты.Инфо=Оплаты.Инфо;


		ТЗ_ТекстОплаты.Объединить(глДрайверы.ТекстовыйПроцессор.ОбработатьСекции(МакетПечати,"СтрокаОплаты",СтруктураПараметровОплаты));
	КонецЦикла;


	ТЗ_ТекстИтого=глДрайверы.ТекстовыйПроцессор.ОбработатьСекции(МакетПечати,"Итого",СтруктураПараметров);



	ТЗ_Итог.Объединить(ТЗ_ТекстШапки);
	ТЗ_Итог.Объединить(ТЗ_ТекстТаблицы);
	ТЗ_Итог.Объединить(ТЗ_ТекстИтого);
	ТЗ_Итог.Объединить(ТЗ_ТекстОплаты);
	ТЗ_Итог.Объединить(ТЗ_ТекстПодвала);

	возврат ТЗ_Итог;
КонецФункции

//ККМ -- ссылка на ККМ, на котором надо напечатать
Функция ПечатьКопии(ККМ) Экспорт
	Сам=Сам();


	Если ККМ.ПроверитьГотовность()=0 Тогда
		возврат 0;
	КонецЕсли;

	глДрайверы.ТекстовыйПроцессор.Инит();
	МакетПечати=глДрайверы.ТекстовыйПроцессор.ПолучитьМакетПечати("Копия");

	Если глДрайверы.ТекстовыйПроцессор.КодОшибки()<>0 Тогда
		глПредупреждение("Ошибка при чтении макета: "+глДрайверы.ТекстовыйПроцессор.ПоследняяОшибка());
		Возврат 0;
	КонецЕсли;

	Попытка
		ТекстНаПечать=ПолучитьТекстЧекаПоМакету(МакетПечати,ККМ);
	Исключение
		глПредупреждение("Ошибка при обработке текста чека.
		|Проверьте корректность шаблонов чека.
		|"+ОписаниеОшибки());
		Возврат 0;
	КонецПопытки;


	Если ККМ.НапечататьТекст(ТекстНаПечать)=0 Тогда

		возврат 0;
	Иначе
		ККМ.ОтрезатьЛенту();
	КонецЕсли;
	возврат 1;
КонецФункции


Функция Проверить() Экспорт
	Сам=Сам();
	Данные=Сам.Данные;

	Если Сам.РасчитатьСуммы()=0 Тогда
		Возврат 0;
	КонецЕсли;  //

	Если ОплатаВсего<СуммаВсего Тогда
		Сам.УстановитьКодИОшибку(1003,"Недостаточная сумма оплаты.");
		Возврат 0;
	КонецЕсли;

	Если ОплатаКредит+ОплатаТарой+ОплатаКартой>Данные.СуммаВсего Тогда
		Сам.УстановитьКодИОшибку(1004,"Сумма безналичных оплат больше суммы чека.
		|Сумма безналичных оплат = "+глФРМ(ОплатаКредит+ОплатаТарой+ОплатаКартой)+"
		|Сумма чека = "+глФРМ(Данные.СуммаВсего));
		Возврат 0;
	КонецЕсли;
	Если Данные.КодОперации>1 Тогда
		Сам.УстановитьКодИОшибку(1005,"Неизвестный код операции чека ККМ. КодОперации="+Данные.КодОперации);
		Возврат 0;
	КонецЕсли;
	Возврат 1;
КонецФункции


//должна вернуть печатную текстовую форму

Функция ПолучитьПечатнуюФорму(ККМ) Экспорт
	МакетПечати=глДрайверы.ТекстовыйПроцессор.ПолучитьМакетПечати("Чек");

	Если глДрайверы.ТекстовыйПроцессор.КодОшибки()<>0 Тогда
		глПредупреждение("Ошибка при чтении макета: "+глДрайверы.ТекстовыйПроцессор.ПоследняяОшибка());
		Возврат 0;
	КонецЕсли;

	Попытка
		возврат  ПолучитьТекстЧекаПоМакету(МакетПечати,ККМ);
	Исключение
		глПредупреждение("Ошибка при обработке текста чека.
		|Проверьте корректность шаблонов чека.
		|"+ОписаниеОшибки());
		Возврат 0;
	КонецПопытки;

КонецФункции


Функция ОтправитьНаСервер() Экспорт
	Сам=Сам();
	Если глНастройки.ПолучитьКакЧисло("EXCHANGE/CopyChecksToServer")=0 Тогда
		Сам.УстановитьОшибку("Не настроено сединение с сервером чеков.");
		Возврат 0;
	Иначе

		СобытиеОтвет=глПослатьКоманду(Сам,"ОтправитьНаСерверЧеков",Сам,"СерверЧеков");
		Если СобытиеОтвет.Описатель.Ответ=0 Тогда
			Сам.Данные.ИДЧековогоСервера=СобытиеОтвет.Описатель.Ответ1;
			Если СобытиеОтвет.Описатель.Ответ1=0 Тогда
				Ошибка="Чек на сервер не отправлен.
				|"+СобытиеОтвет.Описатель.Ошибка;
				Сам.УстановитьОшибку(Ошибка);
				Возврат 0;
			Иначе
				Сам.Данные.ИДЧековогоСервера=СобытиеОтвет.Описатель.Ответ1;
				Ошибка="Чек на сервер отправлен, но не закрыт.
				|ИД чека на сервере = "+СобытиеОтвет.Описатель.Ответ1+"
				|"+СобытиеОтвет.Описатель.Ошибка;



				Если Сам.Записать()=0 Тогда
					Ошибка=Ошибка+"
					|в локальную базу не записан результат операции на сервере.";
				КонецЕсли;
				Сам.УстановитьОшибку(Ошибка);

				Возврат 0;
			КонецЕсли;

		Иначе
			Сам.Данные.Отправлен=Формат(ТекущаяДата(),"ДГГГГММДД")+" "+ТекущееВремя();
			Сам.Данные.ИДЧековогоСервера=СобытиеОтвет.Описатель.Ответ;
			Если Сам.Записать()=0 Тогда
				Ошибка="Чек на сервер отправлен.
				|в локальную базу не записан результат операции на сервере.";
				Сам.УстановитьОшибку(Ошибка);
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
	Возврат 1;
КонецФункции

//Пробивает чек продажи на ККМ
//ККМ - объект-ККМ по кторому надо пробить чек
//возвращает 1 - если все ОК
//0 - если ошибка
Функция ПробитьЧек(ККМ) Экспорт
	Сам=Сам();

	Если Сам.Данные.Статус=1 Тогда
		Если глВопрос("Чек уже был пробит по ККМ. Напечатать копию?","Да+Нет")="Да" Тогда
			возврат Сам.ПечатьКопии(ККМ);
		Иначе
			глПредупреждение("Чек не напечатан.
			|"+ККМ.ПоследняяОшибка());
			Возврат 0;
		КонецЕсли;
	Иначе

		Если ККМ.ПробитьЧек(Сам)=0 Тогда
			глПредупреждение("Чек не пробит.
			|"+ККМ.ПоследняяОшибка());
			//
		    возврат 0;
		КонецЕсли;  //
	КонецЕсли;
	возврат 1;
КонецФункции


Процедура  ПередЗаписью(Отказ) Экспорт
	_База.ПередЗаписью(Отказ);
	Если Отказ=1 Тогда
		возврат;
	КонецЕсли;
	Сам=Сам();

	Сам.Данные.Товары.ВыбратьСтроки();
	Пока Сам.Данные.Товары.ПолучитьСтроку()=1 Цикл
		Сам.Данные.Товары.НомерККМ=Сам.Данные.НомерККМ;
		Сам.Данные.Товары.НомерСмены=Сам.Данные.НомерСмены;
		Сам.Данные.Товары.НомерКассовогоЧека=Сам.Данные.НомерКассовогоЧека;
		Сам.Данные.Товары.КодОперации=Сам.Данные.КодОперации;
	КонецЦикла;


	Сам.Данные.Оплаты.ВыбратьСтроки();
	Пока Сам.Данные.Оплаты.ПолучитьСтроку()=1 Цикл
		Сам.Данные.Оплаты.НомерККМ=Сам.Данные.НомерККМ;
		Сам.Данные.Оплаты.НомерСмены=Сам.Данные.НомерСмены;
		Сам.Данные.Оплаты.НомерКассовогоЧека=Сам.Данные.НомерКассовогоЧека;
	КонецЦикла;

КонецПроцедуры

//------------------------------------ ------------------------------------
Процедура ПриОткрытии()
//#if _NOW_PREPARE_CLASS
	Форма.Параметр._ПриОткрытии(); // для отладки класса
//#endif // _NOW_PREPARE_CLASS
КонецПроцедуры // ПриОткрытии


