//Конфигурация для платформы "1С:Предприятие 7.7" РБ-Софт:Рабочее место кассира.
//Версия 4.57 от 05.06.11 23:24:52
//(c) Баинов Евгений, ООО "РБ-Софт" 2006-2011 г.Улан-Удэ, ул.Балтахинова,17Е,офис 215
//e-mail: bainov@rb-soft.ru  icq: 73718937, телефоны: (3012) 440-357, 278-228
//Сайт проекта: http://code.google.com/p/rbsoft-rmk/
//_______________________________________________________________________________________
//Класс Устройство.ДисплейПокупателя
//_______________________________________________________________________________________
Перем _База Экспорт;

Функция Этот(Конт) Возврат Конт; КонецФункции
Функция Сам() Возврат Этот(Контекст) КонецФункции




Функция ТипУстройства() Экспорт
	возврат "ДисплейПокупателя";
КонецФункции	// ТипУстройства


//------------------------------------ ------------------------------------
Процедура Конструктор()
	_База = Этот(Контекст).ПолучитьБазовыйКласс("Устройство");

КонецПроцедуры // Конструктор

//------------------------------------ ------------------------------------
Процедура Деструктор()

КонецПроцедуры // Деструктор

Функция ЕстьДанныеНаВходе(Источник,Событие,Данные) Экспорт
	возврат 0;
КонецФункции

//
//Создать новое окно и соответствующую ему область вывода на дисплее.
//Высота  и  ширина  создаваемого  окна  задаются  параметрами  Hwindow  и
//Wwindow  соответственно (координаты  внутри  окна  принадлежат  диапазонам:
//от  0  до  Hwindow – 1  для  строк  и  от  0  до  Wwindow – 1  для  столбцов).
//Высота и ширина области вывода окна задаются параметрами Hview и Wview
//соответственно.  Координаты  левого  верхнего  угла  области  вывода  задаются
//параметрами Xview (столбец) и Yview (строка).
//Новое окно становится текущим.
Процедура СоздатьОкно (Yобласти, Xобласти, Вобласти, Шобласти, Вокна, Шокна)  Экспорт
	Сам=Сам();
	Сам.ИнтерфейсОборудования.СоздатьОкно(Yобласти, Xобласти, Вобласти, Шобласти, Вокна, Шокна);
КонецПроцедуры

//уничтожает  текущее  окно. При  этом  отображаемая  на  дисплее  информация  не  изменяется,
//текущим  становится  окно  с  номером 0,  а  свойства,  характерные  для  окна,
//принимают значения нулевого окна.
Процедура УдалитьОкно() Экспорт
	Сам=Сам();
	Сам.ИнтерфейсОборудования.УдалитьОкно();
КонецПроцедуры

Функция КоличествоОкон() Экспорт
	Сам=Сам();
	Сам.ИнтерфейсОборудования.КоличествоОкон();
КонецФункции

Процедура ДобавитьОбластьВывода (Yобласти, Xобласти, Вобласти, Шобласти) Экспорт
	Сам=Сам();
	Сам.ИнтерфейсОборудования.ДобавитьОбластьВывода (Yобласти, Xобласти, Вобласти, Шобласти);
КонецПроцедуры

Процедура ОчиститьОбластьВывода (НомерОкна) Экспорт
	Сам=Сам();
	Сам.ИнтерфейсОборудования.ОчиститьОбластьВывода(НомерОкна);
КонецПроцедуры

Процедура ПолучитьРазмерыОкна(НомерОкна, КоличествоСтрок,КоличествоСтолбцов) Экспорт
	Сам=Сам();
	Сам.ИнтерфейсОборудования.ПолучитьРазмерыОкна(НомерОкна, КоличествоСтрок,КоличествоСтолбцов);
КонецПроцедуры

Процедура ПолучитьКурсор(НомерОкна, КурсорХ,КурсорУ) Экспорт
	Сам=Сам();
	Сам.ИнтерфейсОборудования.ПолучитьКурсор(НомерОкна, КурсорХ,КурсорУ);
КонецПроцедуры


//Метод «перерисовывает» окно.
//Данный  метод  делает  окно  с  номером,  переданным  в  параметре,  текущим  и
//обновляет  его  область  вывода.  Позиция  курсора  и  координаты  привязки
//области вывода не меняются.
Процедура ОбновитьОкно(НомерОкна) Экспорт
	Сам=Сам();
	Сам.ИнтерфейсОборудования.ОбновитьОкно(НомерОкна);
КонецПроцедуры

//Уничтожает  всю информацию  в  окне (заполняет  его
//пробелами)
Процедура ОчиститьТекст(НомерОкна=0) Экспорт
	Сам=Сам();
	Попытка
		Сам.ИнтерфейсОборудования.ОчиститьТекст(НомерОкна);
	Исключение
	КонецПопытки;

КонецПроцедуры

Процедура ОчиститьДисплей(НомерОкна=0) Экспорт
	Сам=Сам();
	Попытка
		Сам.ИнтерфейсОборудования.ОчиститьДисплей(НомерОкна);
	Исключение
	КонецПопытки;

КонецПроцедуры

//Метод  прокручивает  текущее  окно  в  заданном  параметром  Direction
//направлении.
//Параметры:
//
//Направление - Направление сдвига окна:
//				1 – вверх;
//				2 – вниз;
//				3 – влево;
//				4 – вправо.
//
//Сдвиг Количество символов или строк, на которое прокручивать окно.
Процедура ПрокрутитьТекст(Направление, Сдвиг) Экспорт
	Сам=Сам();
	Сам.ИнтерфейсОборудования.ПрокрутитьТекст(Направление, Сдвиг);
КонецПроцедуры


//Открывает денежный ящик. если дисплей поддерживает подключение ящиков
Процедура ОткрытьЯщик() Экспорт
	Сам=Сам();
	Сам.ИнтерфейсОборудования.ОткрытьЯщик();
КонецПроцедуры
//возвращает номер текущего окна
//если НомерОкна <> 0 то устанавливает текущим окно с заданным номером
Функция ТекущееОкно(НомерОкна=0) Экспорт
	Сам=Сам();
	Возврат Сам.ИнтерфейсОборудования.ТекущееОкно(НомерОкна);
КонецФункции


Процедура УстановитьКурсор(У,Х) Экспорт
	Сам=Сам();
	Сам.ИнтерфейсОборудования.УстановитьКурсор(У,Х);
КонецПроцедуры

//Помещает  в  окно  строку,  задаваемую  параметром пСтрока, и с типом мерцания из Атрибут.
//Текст  выводится,  начиная  с  текущей позиции курсора,  и
//продолжается  в  соседних  столбцах.  Когда  достигнут  последний  столбец
//текущей строки, вывод  текста переходит на новую строку. Если вывод достиг
//конца  окна,  то  окно  сдвигается  вверх  на  одну  строку  и  нижняя  строка
//заполняется пробелами.
Процедура ПоказатьТекст(пСтрока,Атрибут) Экспорт
	Сам=Сам();
	Сам.ИнтерфейсОборудования.ПоказатьТекст(пСтрока,Атрибут);
КонецПроцедуры

//то же что и ПоказатьТекст, только вывод начинается с заданной позиции
Процедура ПоказатьТекстПоз(У,Х,пСтрока,Атрибут) Экспорт
	Сам=Сам();
	Сам.ИнтерфейсОборудования.ПоказатьТекстПоз(У,Х,пСтрока,Атрибут);
КонецПроцедуры

//вывести строку в текущих координатах
Процедура ВывестиСтроку(пСтрока) Экспорт
	Сам=Сам();
	Сам.ИнтерфейсОборудования.ВывестиСтроку(пСтрока);
КонецПроцедуры

Процедура Самотестирование() Экспорт
	Сам=Сам();
	Сам.ИнтерфейсОборудования.Самотестирование();
КонецПроцедуры

Процедура ПолучитьПараметрыУстройства() Экспорт
	Сам=Сам();
	Сам.ИнтерфейсОборудования.ПолучитьПараметрыУстройства();
КонецПроцедуры

Функция ОбработкаСобытий(Издатель,Событие) Экспорт
	Сам=Сам();

	Отработали=0;

	Если Событие.Источник="Команда" Тогда
		Команда=Событие.Описатель.Команда;
		Если Команда="Дисплей_Приветствие" Тогда

			//Сам.ИнтерфейсОборудования.ОчиститьДисплей();
			Сам.ОчиститьТекст();
			Сам.ПоказатьТекст("    Добро
			|  пожаловать!",0);

		ИначеЕсли Команда="Дисплей_ВывестиСтроку" Тогда

			СтрокаДляВывода=Событие.Описатель.Данные;
			Сам.ПоказатьТекст(Лев(СтрокаДляВывода,Сам.Данные.ДлинаСтрокиДП),0);

		ИначеЕсли Команда="Дисплей_ВывестиСтрокуЧека" Тогда

			СтрокаЧека=Событие.Описатель.Данные;
			Наименование=СтрокаЧека.Наименование;
			Количество=СтрокаЧека.Количество;
			Цена=СтрокаЧека.Цена;
			Сумма=СтрокаЧека.СуммаЧека;


			СтрокаЦены=глФРМ(Цена);
			СтрокаСуммы="="+глФРМ(Сумма);

			Длина=Сам.Данные.ДлинаСтрокиДП-СтрДлина(СтрокаЦены+СтрокаСуммы);
			Если Длина>0 Тогда
				ДлинаСуммы=Сам.Данные.ДлинаСтрокиДП-СтрДлина(СтрокаЦены);
				СтрокаИтог=СтрокаЦены+глСтроки.ДополнитьСтрокуЛ(СтрокаСуммы," ",ДлинаСуммы);
			Иначе
				СтрокаИтог=глСтроки.ДополнитьСтрокуЛ(СтрокаСуммы," ",Сам.Данные.ДлинаСтрокиДП);
			КонецЕсли;

			Сам.ОчиститьТекст();
			Сам.ПоказатьТекстПоз(0,0,Лев(Наименование,Сам.Данные.ДлинаСтрокиДП)+РазделительСтрок+СтрокаИтог,0);

		ИначеЕсли Команда="Дисплей_ВывестиИтог" Тогда
			ИтогиККМ=Событие.Описатель.Данные;

			СтрокаВсего=глФРМ(ИтогиККМ.Всего);

			ПерваяСтрока="Всего:"+глСтроки.ДополнитьСтрокуЛ(СтрокаВсего," ",Сам.Данные.ДлинаСтрокиДП-6);

			Если ИтогиККМ.Сдача=0 Тогда
				ВтораяСтрока=глСтроки.ДополнитьСтрокуЛ(""," ",Сам.Данные.ДлинаСтрокиДП);
			Иначе
				СтрСдача=глФРМ(ИтогиККМ.Сдача);
				ВтораяСтрока="Сдача:"+глСтроки.ДополнитьСтрокуЛ(СтрСдача," ",Сам.Данные.ДлинаСтрокиДП-6);
			КонецЕсли;

			Сам.ОчиститьТекст();
			Сам.ПоказатьТекстПоз(0,0,ПерваяСтрока+РазделительСтрок+ВтораяСтрока,0);

		ИначеЕсли Команда="Дисплей_КОплате" Тогда
			ИтогиККМ=Событие.Описатель.Данные;
			СтрокаВсего=глФРМ(ИтогиККМ.Всего);

			ПерваяСтрока="К ОПЛАТЕ:"+глСтроки.ДополнитьСтрокуЛ(СтрокаВсего," ",Сам.Данные.ДлинаСтрокиДП-9);
			ВтораяСтрока=глСтроки.ДополнитьСтрокуЛ(""," ",Сам.Данные.ДлинаСтрокиДП);

			Сам.ОчиститьТекст();
			Сам.ПоказатьТекстПоз(0,0,ПерваяСтрока+РазделительСтрок+ВтораяСтрока,0);
		КонецЕсли;
	КонецЕсли;

	Возврат 1;
КонецФункции


//------------------------------------ ------------------------------------
Процедура ПриОткрытии()
//#if _NOW_PREPARE_CLASS
	Форма.Параметр._ПриОткрытии(); // для отладки класса
//#endif // _NOW_PREPARE_CLASS
КонецПроцедуры // ПриОткрытии

 // завершение класса Wizard1C++ !!
