//Конфигурация для платформы "1С:Предприятие 7.7" РБ-Софт:Рабочее место кассира.
//Версия 4.57 от 05.06.11 23:24:51
//(c) Баинов Евгений, ООО "РБ-Софт" 2006-2011 г.Улан-Удэ, ул.Балтахинова,17Е,офис 215
//e-mail: bainov@rb-soft.ru  icq: 73718937, телефоны: (3012) 440-357, 278-228
//Сайт проекта: http://code.google.com/p/rbsoft-rmk/
//_______________________________________________________________________________________
//Класс ИнтерфейсОборудования
//_______________________________________________________________________________________
перем _База Экспорт;
Перем Драйвер Экспорт;  //ссылка на драйвер для работы с устройством. Сам объект в классе не создается.
						//Инициализируется при помощи Инит.

Перем НомерЛУ Экспорт;  //номер логического устройства. используется для обращению к устройству через драйвер
Перем Параметры Экспорт;//структура с текущими параметрами оборудования. Обновляется при вызове метода ПолучитьПараметрыОборудования
Перем Устройство Экспорт; //ссылка на объект-устройство, считанное из БД
Перем СовместимыеВерсииДрайвера Экспорт;//строка. Совместимые версии драйвера оборудования через запятую

Функция Этот(Конт) Возврат Конт; КонецФункции
Функция Сам() Возврат Этот(Контекст) КонецФункции



//Тут надо заполнить структуру Параметры полями
//
Процедура СоздатьСтруктуруПараметров() Экспорт

КонецПроцедуры

//------------------------------------ ------------------------------------
Процедура Конструктор()
	_База = Этот(Контекст).ПолучитьБазовыйКласс("Объект");
	Параметры=СоздатьОбъект("Структура");
	СовместимыеВерсииДрайвера="000.000.000";
	Сам=Сам();
	Сам.СоздатьСтруктуруПараметров();
КонецПроцедуры // Конструктор


//------------------------------------ ------------------------------------
Процедура Деструктор()

КонецПроцедуры // Деструктор

//_____________________________________________________________________________
//Функция
//Назначение:
//Параметры:

//Возвращает:
// 1 - в драйвере ошибок нет
// 0 - в драйвере есть ошибка
Функция НетОшибокВДрайвере(КодОшибки) Экспорт
	Если КодОшибки=0 Тогда
		Возврат 1;
	КонецЕсли;
	Возврат 0;
КонецФункции //

Функция СовместимыеВерсииДрайвера() Экспорт
	Возврат СовместимыеВерсииДрайвера;
КонецФункции

Функция ПолучитьПараметрыУстройства(ОбъектУстройство=0) Экспорт
	Возврат 1;
КонецФункции

Функция УстановитьПараметрыУстройства(ОбъектУстройство=0) Экспорт
	возврат 1;
КонецФункции
//проверяет параметры подключенного физического устройства соответствующее устройству ОбъектУстройство
//перед вызовом вызывать ПолучитьПараметрыУстройства
//вернуть 0 если неправильные параметры
//1 - если все верно
//например при подключении ККМ проверяем серийный номер
Функция ПроверитьПараметрыУстройства(ОбъектУстройство) Экспорт
	возврат 1;
КонецФункции

//возвращает количество логических устройств
Функция КоличествоЛУ() Экспорт
	Возврат 0;
КонецФункции


//делается один раз для каждого вида драйвера
Функция ПервичнаяНастройкаДрайвера() Экспорт
	возврат 1;
КонецФункции


//ИДДрайвера - строка-идентификатор драйвера.
//
Функция ПривязатьДрайвер(_ИДДрайвера) Экспорт
	Сам=Сам();
	Драйвер=глДрайверы.ПолучитьДрайвер(_ИДДрайвера);
	Если ПустоеЗначение(Драйвер)=1 Тогда
		Сам.УстановитьКодИОшибку(2,"Нет драйвера оборудования. ИД="+_ИДДрайвера);
		Возврат 0;
	Иначе
		ВерсияДрайвера=Сам.ПолучитьВерсиюДрайвера();
		Если Найти(Сам.СовместимыеВерсииДрайвера(),ВерсияДрайвера)=0 Тогда
			Сам.УстановитьКодИОшибку(3,"Несовместимая версия драйвера оборудования.
			|Совместимые версии  : "+Сам.СовместимыеВерсииДрайвера()+"
			|Установленная версия: "+ВерсияДрайвера+"
			|Установите совместимую версию драйвера оборудования.
			|Файлы драйверов должны быть скопированы в каталог
			|"+глОбработатьМакроСтроку("%DLL%"));
			Возврат 0;
		КонецЕсли;
	КонецЕсли;  //
	Возврат 1;
КонецФункции


//_Устройство - ссылка на устройство, к которому привязан интерфейс
Функция Инит(_Устройство) Экспорт
	Сам=Сам();
	Устройство=_Устройство;

	НомерЛУ=Устройство.НомерЛУ; //глДрайверы.ПолучитьНомерЛУ(Устройство.Данные.Драйвер,Устройство.Данные.ИД);
	Если Сам.ПривязатьДрайвер(Устройство.Данные.Драйвер)=0 Тогда
		Возврат 0;
	Иначе

		Пока НомерЛУ>Сам.КоличествоЛУ() Цикл
			Если Сам.ДобавитьУстройство()=0 Тогда
				Возврат 0;
			КонецЕсли;
		КонецЦикла;
		Возврат Сам.УстановитьПараметрыУстройства(Устройство);
	КонецЕсли;
	возврат 1;
КонецФункции

//абстрактная процедура для установки текущего устройства в драйвере оборудования
Функция СделатьТекущим(ОбъектУстройство=0) Экспорт
	возврат 0;
КонецФункции
//абстрактная функция для получения номера текущего устройства. Нумерация начинается с 1
Функция НомерТекущегоУстройства() Экспорт
	Возврат 1;
КонецФункции


//абстрактная процедура для доьавления устройства в драйвере оборудования
Функция ДобавитьУстройство() Экспорт
	//
	возврат 0;
КонецФункции


//возвращать 0 если ошибок нет
//абстрактная процедура для обращения к коду ошибки драйвера
Функция КодОшибкиДрайвера() Экспорт
	возврат 0;
КонецФункции

//0- ошибки в драйвере. код и описание зарегистрированы
//1 - ошибок нет
Функция ПроверкаОшибокДрайвера() Экспорт
	Сам=Сам();
	КодОшибки=Сам.КодОшибкиДрайвера();
	Если Сам.НетОшибокВДрайвере(КодОшибки)=1 Тогда
	    Возврат 1;
	Иначе
		Сам.УстановитьКодИОшибку(КодОшибки,Сам.ОписаниеОшибкиДрайвера());
		Возврат 0;
	КонецЕсли;  //
КонецФункции


Функция ОписаниеОшибкиДрайвера() Экспорт
	возврат "";
КонецФункции

//только включает оборудование
//не надо делать текущим
//переопределять
Функция ВключениеОборудования(ОбъектУстройство) Экспорт
	Возврат 1;
КонецФункции

//только отключает оборудование
//не надо делать текущим
//переопределять

Функция ОтключениеОборудования(ОбъектУстройство) Экспорт
	Возврат 1;
КонецФункции

//абстрактная процедура
Процедура ОчиститьОчередь() Экспорт

КонецПроцедуры

//включает устройство

Функция Включить(ОбъектУстройство=0) Экспорт
	Сам=Сам();
	Если ПустоеЗначение(ОбъектУстройство)=1 Тогда
		лУстройство=Сам.Устройство;
	Иначе
		лУстройство=ОбъектУстройство;
	КонецЕсли;
	Если Сам.СделатьТекущим(лУстройство)=0 Тогда
		Возврат 0;
	Иначе
		возврат Сам.ВключениеОборудования(лУстройство);
	КонецЕсли;  //
	Возврат 1;
КонецФункции

Функция Отключить(ОбъектУстройство=0) Экспорт
	Сам=Сам();
	Если ПустоеЗначение(ОбъектУстройство)=1 Тогда
		лУстройство=Сам.Устройство;
	Иначе
		лУстройство=ОбъектУстройство;
	КонецЕсли;
	Если Сам.СделатьТекущим(лУстройство)=0 Тогда
		Возврат 0;
	Иначе
		возврат Сам.ОтключениеОборудования(лУстройство);
	КонецЕсли;  //
	Возврат 1;
КонецФункции

//проверяет состояние и выдает сообщение
Функция ПроверитьГотовность() Экспорт

	Возврат 1;
КонецФункции

//Порт - объект-Порт

Функция ПолучитьНомерПорта(Порт) экспорт
	Возврат -1;
КонецФункции //ПолучитьНомерПорта


//абстрактная функция. переопределять обязательно
//возвращает версию драйвера оборудования в виде строки ХХХ.YYY.ZZZ
Функция ПолучитьВерсиюДрайвера() Экспорт
	Возврат "000.000.000";
КонецФункции

//абстрактная функция. переопределять обязательно
//должна удалить все настройки драйвера оборудования
Функция УдалитьНастройкиДрайвера() Экспорт
	Возврат 1;
КонецФункции

//должна возвращать ИД драйвера.
//ИД задается в секции DRIVERS файла rmkconfig
Функция ИдентификаторДрайвера() Экспорт
	Возврат "UNKNOWN";
КонецФункции


//должна возвращать имя таблицы с описанием параметров устроства
//абстрактная функция. переопределять обязательно
Функция ИмяТаблицыБД() Экспорт
	Возврат "UNKNOWN";
КонецФункции

//должна возвращать имя объекта, которым надо управлять. Например "ККМ", "Считыватель", "ДисплейПокупателя"
//абстрактная функция. переопределять обязательно
Функция ВидУстройства() Экспорт
	Возврат "UNKNOWN";
КонецФункции


//вызов диалога настройки свойств драйвера
Процедура НастройкаСвойств() Экспорт
	Предупреждение("Абстрактный метод!");
КонецПроцедуры

//абстрактная функция
//возвращает 1 - если есть входные данные драйвера, требующие обработки
//           0 - входных данных нет
Функция ЕстьДанныеНаВходе(Источник,Событие,Данные) Экспорт

	возврат 0;
КонецФункции

//------------------------------------ ------------------------------------
Процедура ПриОткрытии()
//#if _NOW_PREPARE_CLASS
	Форма.Параметр._ПриОткрытии(); // для отладки класса
//#endif // _NOW_PREPARE_CLASS
КонецПроцедуры // ПриОткрытии

