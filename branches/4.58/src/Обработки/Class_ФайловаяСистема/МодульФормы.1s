//Конфигурация для платформы "1С:Предприятие 7.7" РБ-Софт:Рабочее место кассира.
//Версия 4.57 от 05.06.11 23:24:52
//(c) Баинов Евгений, ООО "РБ-Софт" 2006-2011 г.Улан-Удэ, ул.Балтахинова,17Е,офис 215
//e-mail: bainov@rb-soft.ru  icq: 73718937, телефоны: (3012) 440-357, 278-228
//Сайт проекта: http://code.google.com/p/rbsoft-rmk/
//_______________________________________________________________________________________
//Класс ФайловаяСистема
//_______________________________________________________________________________________
Перем _База Экспорт; //ссылка на открытую форму

Функция Этот(Конт) 		Возврат Конт; 			КонецФункции
Функция Сам() 			Возврат Этот(Контекст) 	КонецФункции


Процедура Конструктор()
	_База = Этот(Контекст).ПолучитьБазовыйКласс("Объект");
КонецПроцедуры



//------------------------------------ ------------------------------------
//ДобавитьРазделитель()
Функция ДобавитьРазделитель(Знач Путь) Экспорт
	Путь1 = Путь;
	Если Прав(Путь1, 1) <> "\" Тогда
		Путь1 = Путь1 + "\";
	КонецЕсли;
	Возврат Путь1;
КонецФункции

//------------------------------------ ------------------------------------
//УдалитьРазделитель()
Функция УдалитьРазделитель(Путь) Экспорт
	Возврат ?(Прав(Путь, 1) <> "\", Путь, Лев(Путь, СтрДлина(Путь) - 1));
КонецФункции

//------------------------------------ ------------------------------------
Функция ЭтоКаталог(ИмяФайла) Экспорт
	Сам=Сам();
	ИмяФайла = Сам.УдалитьРазделитель(ИмяФайла);
	П = "";	 АтрибутыФайла = "";
	ФС.АтрибутыФайла(ИмяФайла, П, АтрибутыФайла, П, П, П, П);
	Если Сред(АтрибутыФайла, 4, 1) = "1"  Тогда // каталог
		Возврат 1;
	КонецЕсли;
	Возврат 0;
КонецФункции

//------------------------------------ ------------------------------------
//ЭтоСкрытый()
Функция ЭтоСкрытый(ИмяФайла) Экспорт
	Сам=Сам();
	ИмяФайла = Сам.УдалитьРазделитель(ИмяФайла);
	П = "";	 АтрибутыФайла = "";
	ФС.АтрибутыФайла(ИмяФайла, П, АтрибутыФайла, П, П, П, П);
	Если Сред(АтрибутыФайла, 2, 1) = "1"  Тогда // каталог
		Возврат 1;
	КонецЕсли;
	Возврат 0;
КонецФункции

//******************************************************************************
//	НайтиПоследнееВхождение(Стр,Что)
//
//	Параметры:
//		Стр - строка в которой производится поиск, передается по значению
//		Что - искомая строка
//
//	Возвращаемое значение:
//		число - позиция в строке
//
//	Описание:
//		Функция возвращает позицию в которой находится последнее вхождение
//		подстроки Что в строке Стр
//
Функция НайтиПоследнееВхождение(Знач Стр, Что) Экспорт
	Поз = 0;
	Пока 1 = 1 Цикл
		ЛокПоз = Найти(Стр, Что);
		Если ЛокПоз = 0 Тогда
			Возврат Поз;
		КонецЕсли;
		Поз = Поз + ЛокПоз;
		Стр = Сред(Стр, ЛокПоз + 1);
	КонецЦикла;
КонецФункции

//******************************************************************************
//	ИмяФайла(ИмяФайла)
//
//	Параметры:
//		ИмяФайла - строка, полное имя файла, включая путь
//
//	Возвращаемое значение:
//		строка с наименованием и расширением файла
//
//	Описание:
//		из полного имени файла выделяет собственно наименование и расширение
//
Функция ИмяФайла(ИмяФайла) Экспорт
	Возврат Сред(ИмяФайла,НайтиПоследнееВхождение(ИмяФайла,"\")+1);
КонецФункции	// ИмяФайла

Функция РасширениеФайла(ИмяФайла) Экспорт
	Возврат  Сред(ИмяФайла,НайтиПоследнееВхождение(ИмяФайла,".")+1);
КонецФункции

//******************************************************************************
//	КаталогФайла(ИмяФайла)
//
//	Параметры:
//		ИмяФайла - строка, полное имя файла, включая путь
//
//	Возвращаемое значение:
//		строка с наименованием каталога, в котором находится файл
//
//	Описание:
//		 из полного имени файла выделяет путь, по которому следует искать файл
//
Функция КаталогФайла(ИмяФайла) Экспорт
	Возврат Лев(ИмяФайла, НайтиПоследнееВхождение(ИмяФайла, "\"));
КонецФункции


Функция СуществуетКаталог(Знач ПутьКаталога) Экспорт
	Если ФС.СуществуетФайл(ПутьКаталога) = 1 Тогда
		Если ЭтоКаталог(ПутьКаталога)=1 Тогда
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	Возврат 0;
КонецФункции

Функция СоздатьКаталог(Знач ПутьКаталога) Экспорт
	Сам=Сам();
	Если Сам.СуществуетКаталог(ПутьКаталога) = 0 Тогда
		Попытка
			ФС.СоздатьКаталог(ПутьКаталога);
			Если Сам.СуществуетКаталог(ПутьКаталога) = 1 Тогда
				Возврат 1;
			Иначе
				Сам.УстановитьОшибку("Не удалось создать каталог.");
				Возврат 0;
			КонецЕсли;
		Исключение
			Сам.УстановитьОшибку(ОписаниеОшибки());
			Возврат 0;
		КонецПопытки;
	КонецЕсли;

	Возврат 2;
КонецФункции


Функция СуществуетФайл(Знач ПутьФайла) Экспорт
	Если ФС.СуществуетФайл(ПутьФайла) = 1 Тогда
		Если ЭтоКаталог(ПутьФайла)=0 Тогда
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	Возврат 0;
КонецФункции

// ------------------------- ---------------------------------------------------------
// УдалитьФайл( ПутьФайла )
//		ПутьФайла - или путь к файлу, или шаблон к файлу (типа *.f0? или C:\dir\a*.?)
//
// ------------------------- ---------------------------------------------------------
Функция УдалитьФайл(ПутьФайлаИлиПутьФайлаСШаблоном) Экспорт
	ПутьФайла = ПутьФайлаИлиПутьФайлаСШаблоном;
	Если Найти(ПутьФайла, "*") = 0 Тогда
		Если Найти(ПутьФайла, "?") = 0 Тогда
			Если ФС.СуществуетФайл(ПутьФайла) = 1 Тогда
				ФС.УдалитьФайл(ПутьФайла);
				Возврат 1;
			КонецЕсли;
			Возврат 0;
		КонецЕсли;
	КонецЕсли;

	лМаскаУдаляемогоФайла = ПутьФайла;
	лФлагВозврата = 0;

	лИмяУдаляемогоФайла = ФС.НайтиПервыйФайл(лМаскаУдаляемогоФайла);
	Пока лИмяУдаляемогоФайла <> "" Цикл
		Попытка
			ФС.УдалитьФайл(лИмяУдаляемогоФайла);
		Исключение
			Сам().УстановитьОшибку(ОписаниеОшибки());
			Возврат 0;
		КонецПопытки;

		лФлагВозврата = 1;
		лИмяУдаляемогоФайла = ФС.НайтиСледующийФайл();
	КонецЦикла;

	Возврат лФлагВозврата;
КонецФункции

//------------------------------------ ------------------------------------
Процедура УдалитьКаталог(Знач Путь, ФлагВключенияСкрытыхКаталогов) Экспорт

	Сам=Сам();
	Сам.ДобавитьРазделитель(Путь);

	Если ФлагВключенияСкрытыхКаталогов = 1 Тогда
		Текст = СоздатьОбъект("Текст");
		Текст.КодоваяСтраница(1);
		Текст.ДобавитьСтроку("@echo off");
		лВерхняяПапка = Путь + "..\";
		лВременныйКомандный = """" + лВерхняяПапка + "bat_temp.bat" + """";

		Список = Сам.СписокКаталогов(Путь, "*.*", 1);

		Для п = -Список.РазмерСписка() По   - 1 Цикл   // удалять именно в обратном порядке, чтобы удалить каталоги
			Файл = Список.ПолучитьЗначение ( -п);
			Если (Сам.ЭтоКаталог(Файл) = 1) Тогда
				Файл = Сам.ДобавитьРазделитель(Файл);
				Текст.ДобавитьСтроку("rmdir /s /q " + """" + Файл + """");
			Иначе
				ФС.УдалитьФайл(Файл);
			КонецЕсли;
		КонецЦикла;

		Текст.Записать(лВерхняяПапка + "bat_temp.bat");
		КомандаСистемы(лВременныйКомандный);
		ФС.УдалитьФайл(лВременныйКомандный);
	Иначе // ФлагВключенияСкрытыхКаталогов = 0
		Если (Сам.ЭтоСкрытый(Путь) = 1) Тогда
			Возврат;
		КонецЕсли;

		// Сначал удаляю все файлы, а затем каталоги
		//del  /f /s /q *.*
		//Текст = СоздатьОбъект("Текст");
		//Текст.КодоваяСтраница(1);
		//Текст.ДобавитьСтроку("@echo off");
		//лВерхняяПапка = Путь+"..\";
		//лВременныйКомандный = """"+лВерхняяПапка+"bat_temp.bat"+"""";
		//Текст.ДобавитьСтроку("del /f /s /q "+""""+Путь+"*.*"+"""");
		Список = Сам.СписокФайлов(Путь, "*.*", 0);
		Для Индекс = 1 По Список.РазмерСписка() Цикл
			ФС.УдалитьФайл(Список.ПолучитьЗначение(Индекс));
		КонецЦикла;

		Список = Сам.СписокКаталогов(Путь, "*.*", 1);
		Для п = -Список.РазмерСписка() По   - 1 Цикл   // удалять именно в обратном порядке, чтобы удалить каталоги
			Файл = Список.ПолучитьЗначение ( -п);
			Если (Сам.ЭтоСкрытый(Файл) = 0) Тогда

				Сам.УдалитьКаталог(Сам.ДобавитьРазделитель(Файл));
			КонецЕсли;
		КонецЦикла;
		Путь = ?(Прав(Путь, 1) <> "\", Путь, Лев(Путь, СтрДлина(Путь) - 1));
		Сообщить("Путь = " + Путь);
		ФС.УдалитьКаталог(Путь);
	КонецЕсли;
КонецПроцедуры // УдалитьКаталог

//------------------------------------ ------------------------------------
//ДобавитьСписок()
Функция ДобавитьСписок(Куда, Откуда)
	Для п = 1 По Откуда.РазмерСписка() Цикл
		Представление = "";
		Значение = Откуда.ПолучитьЗначение(п, Представление);
		Куда.ДобавитьЗначение(Значение, Представление);
	КонецЦикла;
КонецФункции


//------------------------------------------------------------------------
//СписокКаталогов()
Функция СписокКаталогов(Знач Путь, СтрокаПоиска, ФлагИскатьВПодкаталогах) Экспорт
	Перем лСписокФайлов;
	Сам=Сам();
	Путь = Сам.ДобавитьРазделитель(Путь);
	лСписокФайлов = СоздатьОбъект("СписокЗначений");
	Файл = ФС.НайтиПервыйФайл(Путь + СтрокаПоиска);
	Пока 1 = 1 Цикл
		Если ПустаяСтрока(Файл) = 1 Тогда
			Прервать;
		Иначе
			Если (Файл <> ".") И (Файл <> "..") Тогда

				ПолныйПуть= Путь + Файл;
				Если (Сам.ЭтоКаталог(ПолныйПуть) = 1) Тогда
					лСписокФайлов.ДобавитьЗначение(ПолныйПуть,Файл);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Файл = ФС.НайтиСледующийФайл();
	КонецЦикла;
	Если (ФлагИскатьВПодкаталогах = 1) Тогда
		Для п = 1 По лСписокФайлов.РазмерСписка() Цикл
			Файл = лСписокФайлов.ПолучитьЗначение(п);
			ЕщеОдинСписок = Сам.СписокКаталогов(Файл, СтрокаПоиска);
			ДобавитьСписок(лСписокФайлов, ЕщеОдинСписок);
		КонецЦикла;
	КонецЕсли;
	Возврат лСписокФайлов;
КонецФункции
//------------------------------------ ------------------------------------
// СформироватьСписокФайлов()
Функция СформироватьСписокФайлов(Знач Путь, СтрокаПоиска, ФлагИскатьВПодкаталогах, Дерево = 0, ВыводитьИмя = 1) Экспорт
	Перем лСписокФайлов, лСписокКаталогов;
	Сам=Сам();

	Путь = Сам.ДобавитьРазделитель(Путь);
	лСписокФайлов = СоздатьОбъект("СписокЗначений");
	лСписокКаталогов = СоздатьОбъект("СписокЗначений");

	лСписокФайлов.УдалитьВсе();
	лСписокКаталогов.УдалитьВсе();

	Файл = ФС.НайтиПервыйФайл(Путь + СтрокаПоиска);
	Пока 1 = 1 Цикл
		Если ПустаяСтрока(Файл) = 1 Тогда
			Прервать;
		Иначе
			Если (Файл <> ".") И (Файл <> "..") Тогда


				ПолныйПуть= Путь + Файл;
				Если (Сам.ЭтоКаталог(ПолныйПуть) = 1) Тогда
					лСписокФайлов.ДобавитьЗначение(ПолныйПуть,Файл);
				КонецЕсли;


				Если (Сам.ЭтоКаталог(ПолныйПуть) = 0) Тогда
					лСписокФайлов.ДобавитьЗначение(ПолныйПуть, Файл);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Файл = ФС.НайтиСледующийФайл();
	КонецЦикла;
	Если (ФлагИскатьВПодкаталогах = 1) Тогда

		лСписокКаталогов=СписокКаталогов(Путь,"*.*",0);

		Для п = 1 По лСписокКаталогов.РазмерСписка() Цикл
			лКаталогИмя = "";
			Файл = лСписокКаталогов.ПолучитьЗначение(п, лКаталогИмя);
			ЕщеОдинСписок = Сам.СформироватьСписокФайлов(Файл, СтрокаПоиска, ФлагИскатьВПодкаталогах, Дерево, ВыводитьИмя);
			Если Дерево = 0 Тогда
				ДобавитьСписок(лСписокФайлов, ЕщеОдинСписок);
			Иначе
				лСписокФайлов.ДобавитьЗначение(ЕщеОдинСписок, лКаталогИмя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат лСписокФайлов;
КонецФункции //СписокФайлов

//------------------------------------ ------------------------------------
//СписокФайлов()
Функция СписокФайлов(Путь, СтрокаПоиска, ФлагИскатьВПодкаталогах, ВыводитьИмя = 0) Экспорт
	Возврат СформироватьСписокФайлов(Путь, СтрокаПоиска, ФлагИскатьВПодкаталогах, 0, ВыводитьИмя);
КонецФункции

//------------------------------------ ------------------------------------
//СписокФайлов()
Функция СписокФайловДеревом(Путь, СтрокаПоиска, ФлагИскатьВПодкаталогах, ВыводитьИмя = 0) Экспорт
	Возврат СформироватьСписокФайлов(Путь, СтрокаПоиска, ФлагИскатьВПодкаталогах, 1, ВыводитьИмя);
КонецФункции //СписокФайлов



Функция КоличествоСтрокВФайлах(Путь="",МаскаФайла="*.1s",ФлагИскатьВПодкаталогах=0,СтруктураОтвета=0) Экспорт

	Если Путь="" Тогда
		КаталогПоиска=КаталогИБ()+"\SRC";
	Иначе
		КаталогПоиска=Путь;
	КонецЕсли;
	Список=СформироватьСписокФайлов(КаталогПоиска, МаскаФайла, ФлагИскатьВПодкаталогах);

	ТЗ=СоздатьОбъект("ТаблицаЗначений");
	ТЗ.НоваяКолонка("Имя","Строка");
	ТЗ.НоваяКолонка("Путь","Строка");
	ТЗ.НоваяКолонка("КоличествоСтрок","Число");
	ТЗ.НоваяКолонка("КоличествоНепустыхСтрок","Число");
	ТЗ.НоваяКолонка("КоличествоСтрокКода","Число");
	ТЗ.НоваяКолонка("КоличествоПроцедур","Число");
	ТЗ.НоваяКолонка("КоличествоФункций","Число");
	ТЗ.НоваяКолонка("КоличествоСтрокКомментария","Число");

	Для Инд=1 По Список.РазмерСписка() Цикл
		Имя="";
		Путь=Список.ПолучитьЗначение(Инд,Имя);
		ТЗ.НоваяСтрока();
		ТЗ.Имя = Имя;
		ТЗ.Путь = Путь;

		Текст=СоздатьОбъект("Текст");
		Текст.Открыть(Путь);

		КоличествоСтрок=Текст.КоличествоСтрок();
		КоличествоНепустыхСтрок=0;
		КоличествоСтрокКода=0;
		КоличествоПроцедур=0;
		КоличествоФункций=0;
		КоличествоСтрокКомментария=0;
		Для ИндСтр=1 По КоличествоСтрок Цикл
			Стр=СокрЛ(Текст.ПолучитьСтроку(ИндСтр));
			Если ПустаяСтрока(Стр)=0 Тогда
				КоличествоНепустыхСтрок=КоличествоНепустыхСтрок+1;

				Если Лев(Стр,2)="//" Тогда
					КоличествоСтрокКомментария=КоличествоСтрокКомментария+1;
				Иначе
					КоличествоСтрокКода=КоличествоСтрокКода+1;
					Если ВРЕГ(Лев(Стр,8))="ФУНКЦИЯ " Тогда
						КоличествоФункций=КоличествоФункций+1;
					ИначеЕсли ВРЕГ(Лев(Стр,10))="ПРОЦЕДУРА " Тогда
						КоличествоПроцедур=КоличествоПроцедур+1;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		ТЗ.КоличествоСтрок = КоличествоСтрок;
		ТЗ.КоличествоНепустыхСтрок = КоличествоНепустыхСтрок;
		ТЗ.КоличествоСтрокКода = КоличествоСтрокКода;
		ТЗ.КоличествоПроцедур=КоличествоПроцедур;
		ТЗ.КоличествоФункций=КоличествоФункций;
		ТЗ.КоличествоСтрокКомментария=КоличествоСтрокКомментария;
	КонецЦикла;

	СтруктураОтвета=СоздатьОбъект("Структура");
	СтруктураОтвета.Вставить("КоличествоСтрок",ТЗ.Итог("КоличествоСтрок"));
	СтруктураОтвета.Вставить("КоличествоНепустыхСтрок",ТЗ.Итог("КоличествоНепустыхСтрок"));
	СтруктураОтвета.Вставить("КоличествоСтрокКода",ТЗ.Итог("КоличествоСтрокКода"));
	СтруктураОтвета.Вставить("КоличествоПроцедур",ТЗ.Итог("КоличествоПроцедур"));
	СтруктураОтвета.Вставить("КоличествоФункций",ТЗ.Итог("КоличествоФункций"));
	СтруктураОтвета.Вставить("КоличествоСтрокКомментария",ТЗ.Итог("КоличествоСтрокКомментария"));

	СтруктураОтвета.Вставить("ТаблицаФайлов",ТЗ);



	возврат ТЗ.Итог("КоличествоСтрок");
КонецФункции
