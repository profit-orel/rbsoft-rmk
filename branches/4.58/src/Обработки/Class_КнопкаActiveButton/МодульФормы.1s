//Конфигурация для платформы "1С:Предприятие 7.7" РБ-Софт:Рабочее место кассира.
//Версия 4.57 от 05.06.11 23:24:52
//(c) Баинов Евгений, ООО "РБ-Софт" 2006-2011 г.Улан-Удэ, ул.Балтахинова,17Е,офис 215
//e-mail: bainov@rb-soft.ru  icq: 73718937, телефоны: (3012) 440-357, 278-228
//Сайт проекта: http://code.google.com/p/rbsoft-rmk/
//_______________________________________________________________________________________
//Класс КнопкаActiveButton
//_______________________________________________________________________________________
Перем _База Экспорт;


Перем АктивИкс Экспорт;

Перем Лево Экспорт;
Перем Верх Экспорт;
Перем Ширина Экспорт;
Перем Высота Экспорт;

//Используется для обычных кнопок
Перем ЦветВыделенный;
Перем ЦветНормальный;

//Используется для кнопок в стиле Vista
Перем VistaLookВыделенный;
Перем VistaLookНормальный;

Перем ОписаниеЭлемента Экспорт;

Перем КаталогКнопок Экспорт;

Функция Этот(Конт) Возврат Конт; КонецФункции
Функция Сам() Возврат Этот(Контекст) КонецФункции




//------------------------------------ ------------------------------------
Процедура Конструктор()
	_База = Этот(Контекст).ПолучитьБазовыйКласс("Объект");

	КаталогКнопок="";
	ЦветНормальный=0;
	ЦветВыделенный=0;
	VistaLookНормальный=1;
	VistaLookВыделенный=2;
КонецПроцедуры // Конструктор

//------------------------------------ ------------------------------------
Процедура Деструктор()

КонецПроцедуры // Деструктор

Функция ПолучитьЦвет(ЗначениеПараметра) Экспорт
	Если Найти(ЗначениеПараметра,",")>0 Тогда
		ЗначениеПараметра=СтрЗаменить(ЗначениеПараметра,",",РазделительСтрок);
		Красный=Число(СтрПолучитьСтроку(ЗначениеПараметра,1));
		Зеленый=Число(СтрПолучитьСтроку(ЗначениеПараметра,2));
		Синий  =Число(СтрПолучитьСтроку(ЗначениеПараметра,3));
		возврат глОбщиеФункции.ПолучитьЦвет(Красный,Зеленый,Синий);
	Иначе
		возврат Число(ЗначениеПараметра);
	КонецЕсли;
КонецФункции

Процедура ОбработатьПараметрыЭлемента(ИмяАтрибута) Экспорт

	Сам=Сам();

	РасшФормы=СоздатьОбъект("РасширениеФормы");
	РасшФормы.УстановитьФорму(Сам.ОткрытаяФорма);


	Атрибут=РасшФормы.ПолучитьАтрибут(ИмяАтрибута);
	Атрибут.ПолучитьКоординаты(Лево, Верх, Ширина, Высота);

    Идент = Атрибут.Идентификатор;
	Описание=Атрибут.Описание;
	Если ПустаяСтрока(Описание) = 1 Тогда

		//#error Не настроено описание элемента для работы с 3D Active Button Magic
	Иначе

		ИД=СтрПолучитьСтроку(Описание,1);
		Если ИД<>"3D_Active_Button" Тогда
			//#error Неверно настроено описание элемента для работы с 3D Active Button Magic. Первая строка должна быть 3D_Active_Button
		Иначе
			//Произвольное описание кнопки

			БылаЗагрузкаИзФайла=0;
			Для Инд=2 По СтрКоличествоСтрок(Описание) Цикл
				Стр=СокрЛП(СтрПолучитьСтроку(Описание,Инд));
				Если Стр<>"" Тогда
					Стр=СтрЗаменить(Стр,"=",РазделительСтрок);
					Если СтрКоличествоСтрок(Стр)=2 Тогда
						ИмяПараметра=ВРЕГ(СокрЛП(СтрПолучитьСтроку(Стр,1)));
						ЗначениеПараметра=СокрЛП(СтрПолучитьСтроку(Стр,2));

						Если ИмяПараметра="FILE" Тогда

							ИмяФайлаКнопки=ЗначениеПараметра;

							Если Найти(ИмяФайлаКнопки,":")=0 Тогда
								ИмяФайлаКнопки=?(КаталогКнопок="",КаталогИБ(),КаталогКнопок)+"\"+ИмяФайлаКнопки;
							КонецЕсли;

							АктивИкс.Объект.LoadTemplateEx(ИмяФайлаКнопки);
							БылаЗагрузкаИзФайла=1;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;


			ОписаниеКнопки="";
			БылоОписание=0;

			Для Инд=2 По СтрКоличествоСтрок(Описание) Цикл
				Стр=СтрПолучитьСтроку(Описание,Инд);

				Если БылоОписание=0 Тогда
					Стр=СокрЛП(Стр);

					Если (Стр<>"")И                        //пустые строки
					(Лев(Стр,1)<>"#") и (Лев(Стр,2)<>"//") //и комментарии пропускаем
					Тогда

						СтрокаПараметра=СтрЗаменить(Стр,"=",РазделительСтрок);
						Если СтрКоличествоСтрок(СтрокаПараметра)=2 Тогда
							ИмяПараметра=ВРЕГ(СокрЛП(СтрПолучитьСтроку(СтрокаПараметра,1)));
							ЗначениеПараметра=СокрЛП(СтрПолучитьСтроку(СтрокаПараметра,2));

							Если ИмяПараметра="STYLE" Тогда

								АктивИкс.Объект.Style=Число(ЗначениеПараметра);
							ИначеЕсли ИмяПараметра="SURFACE" Тогда

								АктивИкс.Объект.Surface=Число(ЗначениеПараметра);
							ИначеЕсли ИмяПараметра="CAPTION" Тогда

								АктивИкс.Объект.TextDescrCaption.Text=ЗначениеПараметра;

							ИначеЕсли ИмяПараметра="PICTURE" Тогда

								Если Найти(ЗначениеПараметра,":")=0 Тогда
									ФайлКартинки=КаталогКнопок+"\"+ЗначениеПараметра;
								Иначе
									ФайлКартинки=ЗначениеПараметра;
								КонецЕсли;

								АктивИкс.Объект.Picture=ФайлКартинки;

							ИначеЕсли ИмяПараметра=ВРЕГ("TextCaptionAlignment") Тогда

								АктивИкс.Объект.TextCaptionAlignment=Число(ЗначениеПараметра);

							ИначеЕсли ИмяПараметра=ВРЕГ("SpotlightVisible") Тогда

								АктивИкс.Объект.SpotlightVisible=Число(ЗначениеПараметра);

							ИначеЕсли ИмяПараметра=ВРЕГ("SpotlightType") Тогда

								АктивИкс.Объект.SpotlightType=Число(ЗначениеПараметра);

							ИначеЕсли ИмяПараметра=ВРЕГ("SpotlightOffsetX") Тогда

								АктивИкс.Объект.SpotlightOffsetX=Число(ЗначениеПараметра);
							ИначеЕсли ИмяПараметра=ВРЕГ("SpotlightOffsetY") Тогда

								АктивИкс.Объект.SpotlightOffsetY=Число(ЗначениеПараметра);

							ИначеЕсли ИмяПараметра=ВРЕГ("SpotlightResizeHeight") Тогда

								АктивИкс.Объект.SpotlightResizeHeight=Число(ЗначениеПараметра);

							ИначеЕсли ИмяПараметра=ВРЕГ("SpotlightResizeWidth") Тогда

								АктивИкс.Объект.SpotlightResizeWidth=Число(ЗначениеПараметра);

							ИначеЕсли ИмяПараметра=ВРЕГ("SpotlightColor") Тогда
								АктивИкс.Объект.SpotlightColor =ПолучитьЦвет(ЗначениеПараметра);


							ИначеЕсли ИмяПараметра=ВРЕГ("Surface") Тогда

								АктивИкс.Объект.Surface=Число(ЗначениеПараметра);
							ИначеЕсли ИмяПараметра=ВРЕГ("Shape") Тогда

								АктивИкс.Объект.Shape=Число(ЗначениеПараметра);

							ИначеЕсли ИмяПараметра=ВРЕГ("FrameEffect") Тогда

								АктивИкс.Объект.FrameEffect=Число(ЗначениеПараметра);

							ИначеЕсли ИмяПараметра=ВРЕГ("SurfaceTransparentFactor") Тогда

								АктивИкс.Объект.SurfaceTransparentFactor=Число(ЗначениеПараметра);

							ИначеЕсли ИмяПараметра=ВРЕГ("PictureReflectivityEnabled") Тогда

								АктивИкс.Объект.PictureReflectivityEnabled=Число(ЗначениеПараметра);

							ИначеЕсли ИмяПараметра=ВРЕГ("PictureReflectivityPerc") Тогда

								АктивИкс.Объект.PictureReflectivityPerc =Число(ЗначениеПараметра);

							ИначеЕсли ИмяПараметра=ВРЕГ("TextDescrCaption.OffsetX") Тогда

								АктивИкс.Объект.TextDescrCaption.OffsetX =Число(ЗначениеПараметра);

							ИначеЕсли ИмяПараметра=ВРЕГ("TextDescrCaption.OffsetY") Тогда

								АктивИкс.Объект.TextDescrCaption.OffsetY =Число(ЗначениеПараметра);

							ИначеЕсли ИмяПараметра=ВРЕГ("TextDescrCaption.Antialias") Тогда

								АктивИкс.Объект.TextDescrCaption.Antialias  =Число(ЗначениеПараметра);
							ИначеЕсли ИмяПараметра=ВРЕГ("TextDescrCaption.SpecialEffect") Тогда

								АктивИкс.Объект.TextDescrCaption.SpecialEffect  =Число(ЗначениеПараметра);
							ИначеЕсли ИмяПараметра=ВРЕГ("TextDescriptor.SpecialEffectFactor") Тогда

								АктивИкс.Объект.TextDescrCaption.SpecialEffectFactor=Число(ЗначениеПараметра);

							ИначеЕсли ИмяПараметра=ВРЕГ("TextDescriptor.SolidBack") Тогда

								АктивИкс.Объект.TextDescrCaption.SolidBack=Число(ЗначениеПараметра);

							ИначеЕсли ИмяПараметра=ВРЕГ("TextDescriptor.SolidBackShadow") Тогда

								АктивИкс.Объект.TextDescrCaption.SolidBackShadow=Число(ЗначениеПараметра);
							ИначеЕсли ИмяПараметра=ВРЕГ("TextDescriptor.DoubleSpace") Тогда

								АктивИкс.Объект.TextDescrCaption.DoubleSpace=Число(ЗначениеПараметра);
							ИначеЕсли ИмяПараметра=ВРЕГ("TextDescriptor.Border") Тогда

								АктивИкс.Объект.TextDescrCaption.Border=Число(ЗначениеПараметра);
							ИначеЕсли ИмяПараметра=ВРЕГ("TextDescriptor.Angle") Тогда

								АктивИкс.Объект.TextDescrCaption.Angle=Число(ЗначениеПараметра);
							ИначеЕсли ИмяПараметра=ВРЕГ("TextDescrCaption.ColorShadow") Тогда

								АктивИкс.Объект.TextDescrCaption.ColorShadow  =ПолучитьЦвет(ЗначениеПараметра);

							ИначеЕсли ИмяПараметра=ВРЕГ("TextDescrCaption.ColorNormal") Тогда

								АктивИкс.Объект.TextDescrCaption.ColorNormal =ПолучитьЦвет(ЗначениеПараметра);

							ИначеЕсли ИмяПараметра=ВРЕГ("TextDescrCaption.ColorSolidBack") Тогда

								АктивИкс.Объект.TextDescrCaption.ColorSolidBack =ПолучитьЦвет(ЗначениеПараметра);
							ИначеЕсли ИмяПараметра=ВРЕГ("TextDescrCaption.ColorSolidBackShadow") Тогда

								АктивИкс.Объект.TextDescrCaption.ColorSolidBackShadow =ПолучитьЦвет(ЗначениеПараметра);
							ИначеЕсли ИмяПараметра=ВРЕГ("TextDescrCaption.ColorPressed") Тогда

								АктивИкс.Объект.TextDescrCaption.ColorPressed =ПолучитьЦвет(ЗначениеПараметра);
							ИначеЕсли ИмяПараметра=ВРЕГ("TextDescrCaption.ColorMouseOver") Тогда

								АктивИкс.Объект.TextDescrCaption.ColorMouseOver =ПолучитьЦвет(ЗначениеПараметра);
							ИначеЕсли ИмяПараметра=ВРЕГ("TextDescrCaption.ColorHighlight") Тогда

								АктивИкс.Объект.TextDescrCaption.ColorHighlight =ПолучитьЦвет(ЗначениеПараметра);
							ИначеЕсли ИмяПараметра=ВРЕГ("TextDescrCaption.ColorHalo") Тогда

								АктивИкс.Объект.TextDescrCaption.ColorHalo =ПолучитьЦвет(ЗначениеПараметра);

							ИначеЕсли ИмяПараметра=ВРЕГ("TextDescrCaption.ColorBorder") Тогда

								АктивИкс.Объект.TextDescrCaption.ColorBorder =ПолучитьЦвет(ЗначениеПараметра);

							ИначеЕсли ИмяПараметра=ВРЕГ("TextDescriptor.TransparentFactor") Тогда

								АктивИкс.Объект.TextDescrCaption.TransparentFactor =Число(ЗначениеПараметра);

							ИначеЕсли ИмяПараметра=ВРЕГ("TextDescriptor.Visible") Тогда

								АктивИкс.Объект.TextDescrCaption.Visible =Число(ЗначениеПараметра);
							ИначеЕсли ИмяПараметра=ВРЕГ("FontTextCaption") Тогда

								ОписаниеШрифта=СтрЗаменить(ЗначениеПараметра,",",РазделительСтрок);

								Имя=СтрПолучитьСтроку(ОписаниеШрифта,1);
								Размер=Число(СтрПолучитьСтроку(ОписаниеШрифта,2));
								КоличествоПараметровШрифта=СтрКоличествоСтрок(ОписаниеШрифта);

								Жирный=0;
								Наклонный=0;
								Подчеркивание=0;
								Зачеркивание=0;
								Если КоличествоПараметровШрифта>2 Тогда
									ЗначениеПараметраШрифта=СтрПолучитьСтроку(ОписаниеШрифта,3);
									Если ЗначениеПараметраШрифта<>"" Тогда
										Жирный=Число(ЗначениеПараметраШрифта);
									КонецЕсли;
								КонецЕсли;

								Если КоличествоПараметровШрифта>3 Тогда
									ЗначениеПараметраШрифта=СтрПолучитьСтроку(ОписаниеШрифта,4);
									Если ЗначениеПараметраШрифта<>"" Тогда
										Наклонный=Число(ЗначениеПараметраШрифта);
									КонецЕсли;
								КонецЕсли;

								Если КоличествоПараметровШрифта>4 Тогда
									ЗначениеПараметраШрифта=СтрПолучитьСтроку(ОписаниеШрифта,5);
									Если ЗначениеПараметраШрифта<>"" Тогда
										Подчеркивание=Число(ЗначениеПараметраШрифта);
									КонецЕсли;
								КонецЕсли;

								Если КоличествоПараметровШрифта>5 Тогда
									ЗначениеПараметраШрифта=СтрПолучитьСтроку(ОписаниеШрифта,6);
									Если ЗначениеПараметраШрифта<>"" Тогда
										Зачеркивание=Число(ЗначениеПараметраШрифта);
									КонецЕсли;
								КонецЕсли;


								АктивИкс.Объект.FontTextCaption.Name=Имя;
								АктивИкс.Объект.FontTextCaption.Size=Размер;
								АктивИкс.Объект.FontTextCaption.Bold=Жирный;
								АктивИкс.Объект.FontTextCaption.Italic=Наклонный;
								АктивИкс.Объект.FontTextCaption.Underline=Подчеркивание;
								АктивИкс.Объект.FontTextCaption.Strikethrough=Зачеркивание;




							ИначеЕсли ИмяПараметра=ВРЕГ("PictureVisible") Тогда

								АктивИкс.Объект.PictureVisible =Число(ЗначениеПараметра);

							ИначеЕсли ИмяПараметра=ВРЕГ("PicturePosition") Тогда

								АктивИкс.Объект.PicturePosition =Число(ЗначениеПараметра);

							ИначеЕсли ИмяПараметра=ВРЕГ("PictureXOffset") Тогда

								АктивИкс.Объект.PictureXOffset =Число(ЗначениеПараметра);

							ИначеЕсли ИмяПараметра=ВРЕГ("PictureYOffset") Тогда

								АктивИкс.Объект.PictureYOffset =Число(ЗначениеПараметра);

							ИначеЕсли ИмяПараметра=ВРЕГ("Hyperlink") Тогда

								АктивИкс.Объект.Hyperlink =ЗначениеПараметра;

							ИначеЕсли ИмяПараметра=ВРЕГ("Clickable") Тогда

								АктивИкс.Объект.Clickable =Число(ЗначениеПараметра);

							ИначеЕсли ИмяПараметра=ВРЕГ("UseAntialiasing") Тогда	//В документации написано про поле UseAntialiasing
								//В реальности есть поле UseAntialias

								АктивИкс.Объект.UseAntialias =Число(ЗначениеПараметра);

							ИначеЕсли ИмяПараметра=ВРЕГ("UseAntialias") Тогда

								АктивИкс.Объект.UseAntialias =Число(ЗначениеПараметра);

							ИначеЕсли ИмяПараметра=ВРЕГ("PictureTranspColor") Тогда

								АктивИкс.Объект.PictureTranspColor =Число(ЗначениеПараметра);
							ИначеЕсли ИмяПараметра=ВРЕГ("ProgressBarMin") Тогда
								АктивИкс.Объект.ProgressBarMin =Число(ЗначениеПараметра);
							ИначеЕсли ИмяПараметра=ВРЕГ("ProgressBarMax") Тогда
								АктивИкс.Объект.ProgressBarMax =Число(ЗначениеПараметра);
							ИначеЕсли ИмяПараметра=ВРЕГ("ProgressBarValue") Тогда
								АктивИкс.Объект.ProgressBarValue =Число(ЗначениеПараметра);
							ИначеЕсли ИмяПараметра=ВРЕГ("ProgressBarType") Тогда
								АктивИкс.Объект.ProgressBarType =Число(ЗначениеПараметра);
							ИначеЕсли ИмяПараметра=ВРЕГ("ProgressBarFillMode") Тогда
								АктивИкс.Объект.ProgressBarFillMode =Число(ЗначениеПараметра);


							ИначеЕсли ИмяПараметра=ВРЕГ("ProgressBarColor") Тогда

								АктивИкс.Объект.ProgressBarColor=ПолучитьЦвет(ЗначениеПараметра);

							ИначеЕсли ИмяПараметра=ВРЕГ("BackColor") Тогда
								АктивИкс.Объект.BackColor =ПолучитьЦвет(ЗначениеПараметра);
							ИначеЕсли ИмяПараметра=ВРЕГ("BackColorContainer ") Тогда
								АктивИкс.Объект.BackColorContainer  =ПолучитьЦвет(ЗначениеПараметра);
							ИначеЕсли ИмяПараметра=ВРЕГ("BackColorDisabled ") Тогда
								АктивИкс.Объект.BackColorDisabled  =ПолучитьЦвет(ЗначениеПараметра);
							ИначеЕсли ИмяПараметра=ВРЕГ("BackColorFocus ") Тогда
								АктивИкс.Объект.BackColorFocus =ПолучитьЦвет(ЗначениеПараметра);
							ИначеЕсли ИмяПараметра=ВРЕГ("BackColorInterior") Тогда
								АктивИкс.Объект.BackColorInterior =ПолучитьЦвет(ЗначениеПараметра);

							ИначеЕсли ИмяПараметра=ВРЕГ("BackColorMouseOver") Тогда
								АктивИкс.Объект.BackColorMouseOver =ПолучитьЦвет(ЗначениеПараметра);
							ИначеЕсли ИмяПараметра=ВРЕГ("BackColorPressed") Тогда
								АктивИкс.Объект.BackColorPressed =ПолучитьЦвет(ЗначениеПараметра);


							ИначеЕсли ИмяПараметра=ВРЕГ("ForeColor") Тогда
								АктивИкс.Объект.ForeColor =ПолучитьЦвет(ЗначениеПараметра);

							ИначеЕсли ИмяПараметра=ВРЕГ("ForeColorDisabled") Тогда
								АктивИкс.Объект.ForeColorDisabled =ПолучитьЦвет(ЗначениеПараметра);

							ИначеЕсли ИмяПараметра=ВРЕГ("ForeColorMouseOver") Тогда
								АктивИкс.Объект.ForeColorMouseOver =ПолучитьЦвет(ЗначениеПараметра);

							ИначеЕсли ИмяПараметра=ВРЕГ("ForeColorPressed") Тогда
								АктивИкс.Объект.ForeColorPressed =ПолучитьЦвет(ЗначениеПараметра);

							ИначеЕсли ИмяПараметра=ВРЕГ("HighlightColor") Тогда

								АктивИкс.Объект.HighlightColor =ПолучитьЦвет(ЗначениеПараметра);

							ИначеЕсли ИмяПараметра=ВРЕГ("PictureTranspColor") Тогда

								АктивИкс.Объект.PictureTranspColor =ПолучитьЦвет(ЗначениеПараметра);

							ИначеЕсли ИмяПараметра=ВРЕГ("ShadowColor") Тогда

								АктивИкс.Объект.ShadowColor =ПолучитьЦвет(ЗначениеПараметра);


							ИначеЕсли ИмяПараметра=ВРЕГ("SpecialEffect") Тогда
								АктивИкс.Объект.SpecialEffect =Число(ЗначениеПараметра);


							КонецЕсли;
						ИначеЕсли ВРЕГ(Стр)="ОПИСАНИЕ:" Тогда
							БылоОписание=1;
						КонецЕсли;
					КонецЕсли;
				Иначе
					ОписаниеКнопки=ОписаниеКнопки+?(ОписаниеКнопки="","",РазделительСтрок)+Стр;
				КонецЕсли;

			КонецЦикла;


			ОписаниеЭлемента=ОписаниеКнопки;

		КонецЕсли;

		ЦветВыделенный=АктивИкс.Объект.ForeColorMouseOver;
		ЦветНормальный=АктивИкс.Объект.ForeColor;
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьТекст(_Текст) Экспорт
	//Попытка
		АктивИкс.Объект.Caption=_Текст;
	//Исключение
	//КонецПопытки;
	//
КонецПроцедуры

Функция Прозрачность(_Прозрачность=-1) экспорт
	Если _Прозрачность=-1 Тогда
		АктивИкс.Объект.SurfaceTransparentFactor=_Прозрачность;
	КонецЕсли;
	Возврат АктивИкс.Объект.SurfaceTransparentFactor;
КонецФункции


Процедура УстановитьАтрибут(пКонтекстФормы,Идент,РежимПрорисовки=0) Экспорт

	Сам=Сам();
	Сам.УстановитьКонтекст(пКонтекстФормы);

	АктивИкс=СоздатьОбъект("АктивИкс");
	АктивИкс.ОбработкаСобытий = 1;
	АктивИкс.УстановитьАтрибут(пКонтекстФормы.Форма,Идент);
	АктивИкс.СоздатьЭУ("BTNENH.BtnEnhCtrl.4");


	Сам.Авторисование(0);

	Сам.ОбработатьПараметрыЭлемента(Идент);

	Если РежимПрорисовки=1 Тогда
		АктивИкс.Объект.SetAutomaticRefresh(1);
	КонецЕсли;
КонецПроцедуры


Процедура Нарисовать() Экспорт
	Попытка
		АктивИкс.Объект.Refresh();
	Исключение
	КонецПопытки;


КонецПроцедуры

//Режим=0/1
//0 - не отрисовывает объект при изменении свойств объекта
//Надо перерисовывать при помощи Нарисовать
//1 - автоматически перерисовывает при изменении свойств

Функция Авторисование(Режим=1) Экспорт
	Попытка
		АктивИкс.Объект.SetAutomaticRefresh(Режим);
	Исключение
	КонецПопытки;

КонецФункции

Процедура УстановитьФокус() Экспорт
	АктивИкс.УстановитьФокус();
	//Для обычных кнопок
	АктивИкс.Объект.ForeColor =ЦветВыделенный;

	//Для кнопок с эффектами Vista
	АктивИкс.Объект.VistaLook =VistaLookВыделенный;

КонецПроцедуры

Процедура СнятьФокус() Экспорт
	//Для обычных кнопок
	АктивИкс.Объект.ForeColor = ЦветНормальный;

	//Для кнопок с эффектами Vista
	АктивИкс.Объект.VistaLook = VistaLookНормальный;
КонецПроцедуры



Процедура ПриОткрытии()
//#if _NOW_PREPARE_CLASS
	Форма.Параметр._ПриОткрытии(); // для отладки класса
//#endif // _NOW_PREPARE_CLASS
КонецПроцедуры // ПриОткрытии

 // завершение класса Wizard1C++ !!
