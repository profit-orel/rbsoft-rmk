//Конфигурация для платформы "1С:Предприятие 7.7" РБ-Софт:Рабочее место кассира.
//Версия 4.57 от 05.06.11 23:24:52
//(c) Баинов Евгений, ООО "РБ-Софт" 2006-2011 г.Улан-Удэ, ул.Балтахинова,17Е,офис 215
//e-mail: bainov@rb-soft.ru  icq: 73718937, телефоны: (3012) 440-357, 278-228
//Сайт проекта: http://code.google.com/p/rbsoft-rmk/
//_______________________________________________________________________________________
//Экранная форма класса ПраваДоступа
//Имя формы : ФормаЗапросПароля
//_______________________________________________________________________________________
Перем лПользователь; //Структура-Пользователь
Перем лПарольВведен; //1 - если был введен пароль и нажат ОК
Перем стрРезультат;
Перем Объект;//Объект Права доступа
Перем СтруктураПараметров;
Перем Кнопки;//Объект Кнопки


//_____________________________________________________________________________
//Процедура ПроверкаПароля
//Назначение:
//
//Параметры:
//
//
Процедура ПроверкаПароля()
	ПарольДляПроверки=ВРЕГ(СокрЛП(Пароль));
	Если Объект.СравнитьПароль(ПарольДляПроверки,лПользователь.Пароль)=0 Тогда

		Если Объект.СравнитьПароль(ПарольДляПроверки,Объект.МастерКод,"Crypto")=1 Тогда
			лПарольВведен=1;

			СтруктураПараметров.Результат=1;
			Форма.Параметр=СтруктураПараметров;
			Форма.Закрыть();
		Иначе
			//Пароль="";
			стрРезультат="Неверный пароль";
			Форма.Обновить();

			//реализуем закрытие диалога с ошибочно введенным паролем
			лПарольВведен=1;

			глОбщиеФункции.Пауза(1000);

			СтруктураПараметров.Результат=0;
			Форма.Параметр=СтруктураПараметров;
			Форма.Закрыть();

		КонецЕсли;  //

	Иначе
		лПарольВведен=1;
		СтруктураПараметров.Результат=1;
		Форма.Параметр=СтруктураПараметров;
		Форма.Закрыть();
	КонецЕсли;  //
КонецПроцедуры //ПроверкаПароля

Процедура кнОК_Click()
	ПроверкаПароля();
КонецПроцедуры

//_____________________________________________________________________________
//Процедура ПриЗакрытии
//Назначение:
//
//Параметры:
//
//
Процедура ПриЗакрытии()
	Если лПарольВведен=0 Тогда
	    СтатусВозврата(0);
	КонецЕсли;
	Форма.Параметр=СтруктураПараметров;

КонецПроцедуры //ПриЗакрытии

Функция ПредставлениеПользователя()
	Попытка
		Если ПустаяСтрока(лПользователь.ФИО)=0 Тогда
			Возврат лПользователь.ФИО;
		КонецЕсли;
		Если ПустаяСтрока(лПользователь.Наименование)=0 Тогда
			Возврат лПользователь.Наименование;
		КонецЕсли;

		Возврат лПользователь.ИД;
	Исключение

	КонецПопытки;
	Возврат "Неизвестный пользователь";
КонецФункции

Процедура ПриОткрытии()
	Если ПустоеЗначение(Форма.Параметр)=1 Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	СтруктураПараметров=Форма.Параметр;
	Объект=СтруктураПараметров.Объект;

	лПользователь=СтруктураПараметров.Данные;

	Если ПустоеЗначение(лПользователь)=1 Тогда
	    Предупреждение("Не передали пользователя в форму запроса пароля");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ПослеСозданияФормы()

	Кнопки=СоздатьОбъект("Кнопки");
	Кнопки.КаталогКнопок(глСкин.КаталогСкина);
	Кнопки.УстановитьКонтекст(Контекст);
КонецПроцедуры

Процедура ПослеОткрытия()
	Кнопки.АвтоРисование(1);
КонецПроцедуры
//_____________________________________________________________________________
//Процедура ОбработкаВнешнегоСобытия
//Назначение:
//
//Параметры:
//
//
Процедура ОбработкаВнешнегоСобытия(Источник,Событие,Данные)
	//здесь реализовать авторизацию по магнитной карте, механическому ключу, проксимити,
	//штрихкодовой карте, может и по отпечатку пальца...

	глОбработкаВнешнегоСобытия(Контекст, Источник,Событие,Данные);
КонецПроцедуры


стрРезультат="";
лПарольВведен=0;
