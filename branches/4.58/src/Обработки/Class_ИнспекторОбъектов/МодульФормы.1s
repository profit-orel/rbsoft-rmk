//Конфигурация для платформы "1С:Предприятие 7.7" РБ-Софт:Рабочее место кассира.
//Версия 4.57 от 05.06.11 23:24:51
//(c) Баинов Евгений, ООО "РБ-Софт" 2006-2011 г.Улан-Удэ, ул.Балтахинова,17Е,офис 215
//e-mail: bainov@rb-soft.ru  icq: 73718937, телефоны: (3012) 440-357, 278-228
//Сайт проекта: http://code.google.com/p/rbsoft-rmk/
//_______________________________________________________________________________________
//Класс ИнспекторОбъектов
//_______________________________________________________________________________________
Перем Объект Экспорт;//Объект, который инспектруем
Перем ТипОтображения;
Перем СтруктураДляОтображения Экспорт;
Перем Описание Экспорт;


Функция Этот(Конт) 		Возврат Конт; 			КонецФункции
Функция Сам() 			Возврат Этот(Контекст) 	КонецФункции


Процедура Конструктор()
	Описание="";
КонецПроцедуры // Конструктор

//------------------------------------ ------------------------------------
Процедура Деструктор()

КонецПроцедуры // Деструктор


//******************************************************************************
//	НайтиПоследнееВхождение(Стр,Что)
//
//	Параметры:
//		Стр - строка в которой производится поиск, передается по значению
//		Что - искомая строка
//
//	Возвращаемое значение:
//		число - позиция в строке
//
//	Описание:
//		Функция возвращает позицию в которой находится последнее вхождение
//		подстроки Что в строке Стр
//
Функция НайтиПоследнееВхождение(Знач Стр, Что) Экспорт
	Поз = 0;
	Пока 1 = 1 Цикл
		ЛокПоз = Найти(Стр, Что);
		Если ЛокПоз = 0 Тогда
			Возврат Поз;
		КонецЕсли;
		Поз = Поз + ЛокПоз;
		Стр = Сред(Стр, ЛокПоз + 1);
	КонецЦикла;
КонецФункции

//******************************************************************************
//	КаталогФайла(ИмяФайла)
//
//	Параметры:
//		ИмяФайла - строка, полное имя файла, включая путь
//
//	Возвращаемое значение:
//		строка с наименованием каталога, в котором находится файл
//
//	Описание:
//		 из полного имени файла выделяет путь, по которому следует искать файл
//

Функция КаталогФайла(ИмяФайла) Экспорт
	Возврат Лев(ИмяФайла, НайтиПоследнееВхождение(ИмяФайла, "\"));
КонецФункции

Функция ПолучитьИмяОткрываемойФормы(ИДФормы="ОсновнаяФорма") Экспорт


	Возврат "Обработка.Class_ИнспекторОбъектов_"+ИДФормы+"#";

	//Сам=Сам();
	//ПутьКласса=Сам.ПолучитьПуть();
	//
	//
	//Если Найти(ПутьКласса,":")>0 Тогда
	//	ПутьКласса=КаталогФайла(ПутьКласса)+"Class_ИнспекторОбъектов_"+ИДФормы+".ert";
	//	Возврат ПутьКласса;
	//Иначе
	//	Возврат "Обработка.Class_ИнспекторОбъектов_"+ИДФормы+"#";
	//КонецЕсли;

КонецФункции

//ИДФормы - строка - имя формы объекта, которую надо открыть
//Данные - произвольные данные для передачи в окно диалога
//         через эту переменную можно и получить результат работы диалога
Функция ОткрытьФормуОбъектаМодально(ИДФормы="ОсновнаяФорма",Данные="",РежимВыбора=0) Экспорт
Перем Структура,_ИД;

	Попытка
		_ИД=ПолучитьИмяОткрываемойФормы(ИДФормы);

		Структура=СоздатьОбъект("Структура");
		Структура.Вставить("Объект",Сам());
		Структура.Вставить("Результат",0);
		Структура.Вставить("Данные",Данные);
		Структура.Вставить("РежимВыбора",РежимВыбора);


		Если Найти(_ИД,":")=0 Тогда
			ОткрытьФормуМодально(_ИД,Структура);
		Иначе
			Если ФС.СуществуетФайл(_ИД)=1 Тогда
				ОткрытьФормуМодально("Отчет",Структура,_ИД);
			Иначе
				Предупреждение("Нет файла формы: "+_ИД);
			КонецЕсли;
		КонецЕсли;

		Данные=Структура.Данные;
		Возврат Структура.Результат;
	Исключение
		Предупреждение(ОписаниеОшибки());
	КонецПопытки;

	Возврат 0;
КонецФункции

//******************************************************************************
// ПолучитьТаблицуАтрибутов()
//
// Параметры:
//
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
// Описание:
//  Возвращает таблицу атрибутов объекта
//
Функция ПолучитьТаблицуАтрибутов(Объект) Экспорт

	Информатор	= СоздатьОбъект("Информатор");
	Результат	= Информатор.ПолучитьТаблицуСвойств(Объект);
	Результат.НоваяКолонка("Индекс");
	Результат.ВыбратьСтроки();
	Пока Результат.ПолучитьСтроку() = 1 Цикл
		Результат.Индекс	= НРег(Результат.NameEng);
	КонецЦикла;

	Возврат Результат;
КонецФункции // ПолучитьТаблицуАтрибутов()



Функция ОпределитьТипОтображения() Экспорт
	Если ТипЗначенияСтр(Объект)="СписокЗначений" Тогда
		возврат "Таблица";
	ИначеЕсли (ТипЗначенияСтр(Объект)="ТаблицаЗначений")  Тогда
		возврат "Таблица";
	ИначеЕсли (ТипЗначенияСтр(Объект)="ИндексированнаяТаблица") Тогда
		возврат "Таблица";
	ИначеЕсли ТипЗначенияСтр(Объект)="Структура" Тогда
		возврат "Структура";
	ИначеЕсли ТипЗначенияСтр(Объект)="DynaValue" Тогда
		возврат "Структура";
	ИначеЕсли  ТипЗначенияСтр(Объект)="Документ"	Тогда
		возврат "Структура";
	ИначеЕсли  ТипЗначенияСтр(Объект)="Справочник"	Тогда
		возврат "Структура";
	ИначеЕсли  ТипЗначенияСтр(Объект)="Счет"	Тогда
		возврат "Структура";
	ИначеЕсли  ТипЗначенияСтр(Объект)="Строка"	Тогда
		возврат "Строка";
	ИначеЕсли  ТипЗначенияСтр(Объект)="Число"	Тогда
		возврат "Число";
	ИначеЕсли  ТипЗначенияСтр(Объект)="Дата"	Тогда
		возврат "Дата";
	ИначеЕсли  ТипЗначенияСтр(Объект)="Перечисление"	Тогда
		возврат "Перечисление";
	Иначе
		возврат "Структура";
	КонецЕсли;  //
КонецФункции


Процедура УстановитьОбъект(_Объект,_Описание="") Экспорт
	Объект=_Объект;
	Описание=_Описание+ " "+СокрЛП(Лев(Строка(Объект),200));
	ТипОтображения=ОпределитьТипОтображения();

КонецПроцедуры

//открывает окно для просмотра объекта
Процедура Открыть(_Объект,_Описание="") Экспорт



	УстановитьОбъект(_Объект,_Описание);



	Если ТипОтображения="Число" Тогда
		Предупреждение(Описание+"
		|"+Строка(Объект));
	ИначеЕсли ТипОтображения="Дата" Тогда
		Предупреждение(Описание+"
		|"+Строка(Объект));
	ИначеЕсли ТипОтображения="Строка" Тогда
		Предупреждение(Описание+"
		|"+Строка(Объект));
	ИначеЕсли ТипОтображения="Перечисление" Тогда
		Предупреждение(Описание+"
		|"+Строка(Объект));
	ИначеЕсли ТипОтображения="Структура" Тогда


		Если ТипЗначенияСтр(Объект)="Структура" Тогда
			СтруктураДляОтображения=Объект;
		ИначеЕсли ТипЗначенияСтр(Объект)="DynaValue" Тогда
			СтруктураДляОтображения=СоздатьОбъект("Структура");
			ЗначениеПоля="";ИмяПоля="";
			Объект.ВыбратьСвойства();
			Пока Объект.ПолучитьСвойство(ЗначениеПоля,ИмяПоля)=1 Цикл
				СтруктураДляОтображения.Вставить(ИмяПоля,ЗначениеПоля);
			КонецЦикла;

		ИначеЕсли ТипЗначенияСтр(Объект)="Документ" Тогда
			СтруктураДляОтображения=СоздатьОбъект("Структура");
			ЗначениеПоля="";ИмяПоля="";

			СтруктураДляОтображения.Вставить("ДатаДок",Объект.ДатаДок);
			СтруктураДляОтображения.Вставить("НомерДок",Объект.НомерДок);


			Для Инд=1 По Метаданные.ОбщийРеквизитДокумента() Цикл
				мдРеквизит=Метаданные.ОбщийРеквизитДокумента(Инд);
				ИмяПоля=мдРеквизит.Идентификатор;
				ЗначениеПоля=Объект.ПолучитьАтрибут(ИмяПоля);
				СтруктураДляОтображения.Вставить(ИмяПоля,ЗначениеПоля);
			КонецЦикла;

			мдДокумент=Метаданные.Документ(Объект.Вид());

			КоличествоРеквизитовШапки=мдДокумент.РеквизитШапки();
			Для Инд=1 По КоличествоРеквизитовШапки Цикл
				мдРеквизит=мдДокумент.РеквизитШапки(Инд);

				ИмяПоля=мдРеквизит.Идентификатор;
				ЗначениеПоля=Объект.ПолучитьАтрибут(ИмяПоля);
				СтруктураДляОтображения.Вставить(ИмяПоля,ЗначениеПоля);
			КонецЦикла;

			КоличествоКолонок=мдДокумент.РеквизитТабличнойЧасти();
			Если КоличествоКолонок>0 Тогда
				ТЗ=СоздатьОбъект("ТаблицаЗначений");
				Объект.ВыгрузитьТабличнуюЧасть(ТЗ);
				СтруктураДляОтображения.Вставить("ТабличнаяЧасть",ТЗ);
			КонецЕсли;

		ИначеЕсли ТипЗначенияСтр(Объект)="Справочник" Тогда
			СтруктураДляОтображения=СоздатьОбъект("Структура");
			ЗначениеПоля="";ИмяПоля="";

			мдСпр=Метаданные.Справочник(Объект.Вид());


			СтруктураДляОтображения.Вставить("Код",Объект.Код);
			СтруктураДляОтображения.Вставить("Наименование",Объект.Наименование);

			КоличествоРеквизитов=мдСпр.Реквизит();
			Для Инд=1 По КоличествоРеквизитов Цикл
				мдРеквизит=мдСпр.Реквизит(Инд);

				ИмяПоля=мдРеквизит.Идентификатор;
				ЗначениеПоля=Объект.ПолучитьАтрибут(ИмяПоля);
				СтруктураДляОтображения.Вставить(ИмяПоля,ЗначениеПоля);
			КонецЦикла;
		Иначе


			ТЗАтрибутов=ПолучитьТаблицуАтрибутов(Объект);

			// Для получения атрибутов используем ВыполняемыйМодуль
			ТекстМодуля	= "
			|Функция ПолучитьПоляОбъекта(СсылкаКонтекст)
			|   СтруктураРеквизитов=СоздатьОбъект(""Структура"");
			|";

			ТЗАтрибутов.ВыбратьСтроки();
			Пока ТЗАтрибутов.ПолучитьСтроку() = 1 Цикл
				Идентификатор	= ТЗАтрибутов.NameRus;
				Если Найти("0123456789",Лев(Идентификатор,1))>0 Тогда
					Идентификатор="_"+Идентификатор;
				КонецЕсли;
				ТекстМодуля	= ТекстМодуля + "
				|Попытка
				|   СтруктураРеквизитов.Вставить("""+Идентификатор +""",СсылкаКонтекст." + Идентификатор+");
				|Исключение
				|КонецПопытки;
				|";
			КонецЦикла;


			ТекстМодуля	= ТекстМодуля + "
			|	Возврат СтруктураРеквизитов;
			| КонецФункции
			|";


			АтрибутыОбъекта	= СоздатьОбъект("ВыполняемыйМодуль");
			АтрибутыОбъекта.НазначитьКонтекст(Контекст);
			АтрибутыОбъекта.УстановитьМодуль(ТекстМодуля);
			Если АтрибутыОбъекта.КомпилироватьМодуль() = 0 Тогда
				Предупреждение("Неудачная попытка компиляции модуля получения значений полей объектов!", 60);
				Возврат;
			КонецЕсли;
			АтрибутыОбъекта.ВыполнитьМодуль();
			АтрибутыОбъекта.ПрисоединитьТекущийМодуль();

			СтруктураДляОтображения=АтрибутыОбъекта.ПолучитьПоляОбъекта(Объект);

		КонецЕсли;  //



		ОткрытьФормуОбъектаМодально("ФормаСтруктура",СтруктураДляОтображения);
	ИначеЕсли ТипОтображения="Таблица" Тогда
		Если ТипЗначенияСтр(Объект)="СписокЗначений" Тогда
			СтруктураДляОтображения=СоздатьОбъект("ТаблицаЗначений");
			СтруктураДляОтображения.НоваяКолонка("Ключ","Строка");
			СтруктураДляОтображения.НоваяКолонка("Значение");

			Инд=0;

			Для Инд=1 по Объект.размерСписка() Цикл
				СтруктураДляОтображения.НоваяСтрока();
				Стр="";
				СтруктураДляОтображения.Значение=Объект.ПолучитьЗначение(Инд,Стр);
				СтруктураДляОтображения.Ключ=Стр;
			КонецЦикла;

		ИначеЕсли (ТипЗначенияСтр(Объект)="ТаблицаЗначений")  Тогда
			Объект.Выгрузить(СтруктураДляОтображения);
		ИначеЕсли (ТипЗначенияСтр(Объект)="ИндексированнаяТаблица") Тогда
			СтруктураДляОтображения=СоздатьОбъект("ТаблицаЗначений");
			Объект.Выгрузить(СтруктураДляОтображения);
		Иначе
			Предупреждение("Нет метода перевода объекта типа "+ТипЗначенияСтр(Объект)+" в таблицу значений.
			|Отображение в виде таблицы недоступно");
			Возврат;
		КонецЕсли;


		ОткрытьФормуОбъектаМодально("ФормаТаблица",СтруктураДляОтображения);

	КонецЕсли;

КонецПроцедуры


