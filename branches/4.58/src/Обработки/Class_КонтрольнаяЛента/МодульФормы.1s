//Конфигурация для платформы "1С:Предприятие 7.7" РБ-Софт:Рабочее место кассира.
//Версия 4.57 от 05.06.11 23:24:52
//(c) Баинов Евгений, ООО "РБ-Софт" 2006-2011 г.Улан-Удэ, ул.Балтахинова,17Е,офис 215
//e-mail: bainov@rb-soft.ru  icq: 73718937, телефоны: (3012) 440-357, 278-228
//Сайт проекта: http://code.google.com/p/rbsoft-rmk/
//_______________________________________________________________________________________
//Класс КонтрольнаяЛента
//_______________________________________________________________________________________
Перем _База Экспорт;
Перем КаталогТранзакций экспорт;
Перем ККМ Экспорт;


Функция Этот(Конт) Возврат Конт; КонецФункции
Функция Сам() Возврат Этот(Контекст) КонецФункции



Функция ИмяФайлаКонтрольнойЛенты() Экспорт
	Если ПустоеЗначение(ККМ)=1 Тогда
		Возврат КаталогТранзакций+"\KKM.log";
	Иначе
		Возврат КаталогТранзакций+"\KKM_"+ККМ.Данные.СерийныйНомер+".log";
	КонецЕсли;
КонецФункции	// глИмяФайлаКонтрольнойЛенты


Процедура Инит(_ККМ="") Экспорт

	Если ПустоеЗначение(_ККМ)=0 Тогда
		ККМ=_ККМ;
	КонецЕсли;
	Сам=Сам();
	_База.Инит(Сам.ИмяФайлаКонтрольнойЛенты());

КонецПроцедуры


Функция ДобавитьТэг(ИмяТэга,СтруктураАтрибутов) Экспорт
	Сам=Сам();

	Стр="";
	Для Инд=1 По СтруктураАтрибутов.Количество() Цикл
		ИмяПоля="";
		Значение=СтруктураАтрибутов.Получить(Инд,ИмяПоля);
		Стр=Стр+?(Стр="",""," ")+ИмяПоля+"="""+СтрЗаменить(Строка(Значение),РазделительСтрок,"{cr}")+"""";
	КонецЦикла;

	Сам.ЗаписатьТекст("<"+ИмяТэга+" "+Стр+">");

	Возврат 1;
КонецФункции //


Функция ЗакрытьТэг(ИмяТэга) Экспорт
	Сам=Сам();
	Сам.ЗаписатьТекст("</"+ИмяТэга+">");
КонецФункции //

//_____________________________________________________________________________
//Функция
//Назначение:
//Параметры:
//
//
//Возвращает:
//
Функция ЗаписатьПризнакНачалаЧека(ТипЧека) Экспорт
	Сам=Сам();

	Структура=СоздатьОбъект("Структура");
	Структура.Вставить("Type",ТипЧека);

	ДобавитьТэг("Check",Структура);

	Возврат 1;
КонецФункции //

Функция ЗаписатьПризнакКонцаЧека(Пробит=1) Экспорт
	Сам=Сам();
	Структура=СоздатьОбъект("Структура");
	Структура.Вставить("Status",Пробит);
	ДобавитьТэг("Close",Структура);
	ЗакрытьТэг("Close");

	Возврат 1;
КонецФункции //





//------------------------------------ ------------------------------------
Процедура ЗаписатьТекст(Текст,Закрывать=1) Экспорт
	Сам=Сам();
	Если Сам.Включен=1 Тогда

		Открывали=0;
		Если Сам.Открыт()=0 Тогда
			Инит();
			Открывали=1;
		КонецЕсли;


		_База.ЗаписатьТекст(Текст,0);


		Если (Закрывать=1)Или(Открывали=1) Тогда
			Сам.ЗакрытьФайл();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры



Функция ПодготовитьКаталогТранзакций(Ошибка="") Экспорт
	Попытка

		Стр=ТекущаяДата();
		Стр=СтрЗаменить(Стр,".",",");
		Сп=СоздатьОбъект("СписокЗначений");
		Сп.ИзСтрокиСРазделителями(Стр);
		Год=Число(Сп.ПолучитьЗначение(3));
		Месяц=Число(Сп.ПолучитьЗначение(2));
		День=Число(Сп.ПолучитьЗначение(1));
		Если Год<100 Тогда
			Год=Год+2000;
		КонецЕсли;
		ИмяКаталога=Строка(Год*10000+Месяц*100+День);

		КаталогБД=глОбработатьМакроСтроку("%DB%");
		Если ФС.СуществуетФайл(КаталогБД)=0 Тогда
			ФС.СоздатьКаталог(КаталогБД);
		КонецЕсли;

		КаталогТранзакций=глОбработатьМакроСтроку("%DB%\TRANS");
		Если ФС.СуществуетФайл(КаталогТранзакций)=0 Тогда
			ФС.СоздатьКаталог(КаталогТранзакций);
		КонецЕсли;

		КаталогТранзакций=глОбработатьМакроСтроку("%DB%\TRANS\"+ИмяКаталога);

		Если ФС.СуществуетФайл(КаталогТранзакций)=0 Тогда
			ФС.СоздатьКаталог(КаталогТранзакций);
		КонецЕсли;

		Если ФС.СуществуетФайл(КаталогТранзакций)=0 Тогда
			Ошибка="Неудачная попытка создания каталога транзакций.
			|"+КаталогТранзакций;
			возврат 0;
		КонецЕсли;
	Исключение
		Ошибка="Неудачная попытка создания каталога транзакций.
		|"+КаталогТранзакций+"
		|"+ОписаниеОшибки();
		возврат 0;
	КонецПопытки;

	возврат 1;
КонецФункции

//------------------------------------ ------------------------------------
Процедура Конструктор()
	_База = Этот(Контекст).ПолучитьБазовыйКласс("Файл.Лог");

	ТекстОшибки="";
	Если ПодготовитьКаталогТранзакций(ТекстОшибки)=0 Тогда
		глПредупреждение(ТекстОшибки);
	КонецЕсли;
КонецПроцедуры // Конструктор

//------------------------------------ ------------------------------------
Процедура Деструктор()

КонецПроцедуры // Деструктор

Процедура ПриОткрытии()
//#if _NOW_PREPARE_CLASS
	Форма.Параметр._ПриОткрытии(); // для отладки класса
//#endif // _NOW_PREPARE_CLASS
КонецПроцедуры // ПриОткрытии

 // завершение класса Wizard1C++ !!
