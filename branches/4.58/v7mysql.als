{"Shell",
{"Folder","AST","Внешняя компонента V7MySQL","",
{"Item","AST","Описание","","Описание","","Компонента реализует объекты доступа к MySQL базам

 Mysql is copyright by MySQL AB. Refer to their site ( http://www.mysql.com )
for licencing issues.
 Zlib is copyright by Jean-loup Gailly and Mark Adler. Refer to their site for
licencing issues. ( http://www.info-zip.org/pub/infozip/zlib/ )

Основано на библиотеке Cristian Nicola (n_cristian@hotmail.com)

Для работы НЕ нужна библиотека libmysql.dll

Кутовой Сергей 2003-2004"},
{"Folder","AST","AddIn.MySQLConnection","",
{"Folder","AST","Атрибуты","",
{"Item","AST","Сервер","Host","Сервер","Host","@Синтаксис:
Сервер
@Назначение:
Адрес MySQL сервера (Строка) (чтение/запись)"},
{"Item","AST","Пользователь","User","Пользователь","User","@Синтаксис:
Пользователь
@Назначение:
Имя пользователя (Строка) (чтение/запись)"},
{"Item","AST","Пароль","Password","Пароль","Password","@Синтаксис:
Пароль
@Назначение:
Пароль доступа к базам (Строка) (чтение/запись)"},
{"Item","AST","Порт","Port","Порт","Port","@Синтаксис:
Порт
@Назначение:
Порт сервера (Число) (чтение/запись)"},
{"Item","AST","БазаДанных","Db","БазаДанных","Db","@Синтаксис:
БазаДанных
@Назначение:
Начальная база данных (Строка) (чтение/запись)"},
{"Item","AST","ГнездоUnix","UnixSocket","ГнездоUnix","UnixSocket","@Синтаксис:
ГнездоUnix
@Назначение:
Гнездо Unix (Строка) (чтение/запись)"},
{"Item","AST","ПараметрыКлиента","ClientFlag","ПараметрыКлиента","ClientFlag","@Синтаксис:
ПараметрыКлиента
@Назначение:
Параметры клиента (Число) (чтение/запись)
@Замечание:
     //client flags      CLIENT_LONG_PASSWORD   = 1;      CLIENT_FOUND_ROWS      = 2;      CLIENT_LONG_FLAG       = 4;      CLIENT_CONNECT_WITH_DB = 8;      CLIENT_NO_SCHEMA       = 16;      CLIENT_COMPRESS        = 32;      CLIENT_ODBC            = 64;      CLIENT_LOCAL_FILES     = 128;      CLIENT_IGNORE_SPACE    = 256;      CLIENT_CHANGE_USER     = 512;      CLIENT_INTERACTIVE     = 1024;      CLIENT_SSL             = 2048;      CLIENT_IGNORE_SIGPIPE  = 4096;      CLIENT_TRANSACTIONS    = 8192;"},
{"Item","AST","НужноПереустановитьСоединение","ShouldReconnect","НужноПереустановитьСоединение","ShouldReconnect","@Синтаксис:
НужноПереустановитьСоединение
@Назначение:
Нужно ли переустанавливать соединение при обрыве (1/0)"},
{"Item","AST","ИспользоватьИменованныеКаналы","UseNamedPipe","ИспользоватьИменованныеКаналы","UseNamedPipe","@Синтаксис:
ИспользоватьИменованныеКаналы
@Назначение:
Использовать именованные каналы (1/0)"},
{"Item","AST","ИспользоватьГнезда","TrySockets","ИспользоватьГнезда","TrySockets","@Синтаксис:
ИспользоватьГнезда
@Назначение:
Использовать гнезда Unix (1/0)"},
{"Item","AST","Таймаут","ConnectTimeout","Таймаут","ConnectTimeout","@Синтаксис:
Таймаут
@Назначение:
Таймаут соединения в секундах (Число)"},
{"Item","AST","ИспользоватьСжатие","Compress","ИспользоватьСжатие","Compress","@Синтаксис:
ИспользоватьСжатие
@Назначение:
Использовать сжатие данных ""на лету"" (1/0)"},
{"Item","AST","НомерЗаписи","RecNo","НомерЗаписи","RecNo","@Синтаксис:
НомерЗаписи
@Назначение:
Порядковый номер записи"},
{"Item","AST","КоличествоПолей","FieldsCount","КоличествоПолей","FieldsCount","@Синтаксис:
КоличествоПолей
@Назначение:
Количество полей в запросе"},
{"Item","AST","КоличествоЗаписей","RowsCount","КоличествоЗаписей","RowsCount","@Синтаксис:
КоличествоЗаписей
@Назначение:
Количество записей в запросе
@Замечание:
Если запрос сохраняемый - общее количество, если нет - количество прочитанных"},
{"Item","AST","ТипЗапроса","ResultType","ТипЗапроса","ResultType","@Синтаксис:
ТипЗапроса
@Назначение:
0 - несохраняемый, 1 - сохраненный"}},
{"Folder","AST","Методы","",
{"Item","AST","Состояние","Status","Состояние(<?>)","Status(<?>)","@Синтаксис:
Состояние()
@Назначение:
Состояние соединения
@Возвращаемое значение:
(Число)  MYSQL_STATUS_READY, MYSQL_STATUS_GET_RESULT, MYSQL_STATUS_USE_RESULT"},
{"Item","AST","Идентификатор","ThreadId","Идентификатор(<?>)","ThreadId(<?>)","@Синтаксис:
Идентификатор()
@Назначение:
Идентификатор соединения
@Возвращаемое значение:
(Число)"},
{"Item","AST","КоличествоОбработанныхЗаписей","AffectedRows","КоличествоОбработанныхЗаписей(<?>)","AffectedRows(<?>)","@Синтаксис:
КоличествоОбработанныхЗаписей()
@Назначение:
Указывает количество записей, обработанных методом Выполнить
@Возвращаемое значение:
(Число)"},
{"Item","AST","ПоследнийИдентификатор","LastInsertId","ПоследнийИдентификатор(<?>)","LastInsertId(<?>)","@Синтаксис:
ПоследнийИдентификатор()
@Назначение:
Только для чтения - результат вызова ""select last_insert_id""
@Возвращаемое значение:
(Число)"},
{"Item","AST","ВерсияСервера","ServerVersion","ВерсияСервера(<?>)","ServerVersion(<?>)","@Синтаксис:
ВерсияСервера()
@Возвращаемое значение:
(Строка)  Строка версии cервера"},
{"Item","AST","ВерсияКлиента","ClientVersion","ВерсияКлиента(<?>)","ClientVersion(<?>)","@Синтаксис:
ВерсияКлиента()
@Возвращаемое значение:
(Строка)  Строка версии клиента"},
{"Item","AST","ВерсияПротокола","ProtocolVersion","ВерсияПротокола(<?>)","ProtocolVersion(<?>)","@Синтаксис:
ВерсияПротокола()
@Возвращаемое значение:
(Строка)  Строка версии протокола"},
{"Item","AST","ВозможностиСервера","ServerCapabilities","ВозможностиСервера(<?>)","ServerCapabilities(<?>)","@Синтаксис:
ВозможностиСервера()
@Возвращаемое значение:
(Число)"},
{"Item","AST","СостояниеСервера","ServerStatus","СостояниеСервера(<?>)","ServerStatus(<?>)","@Синтаксис:
СостояниеСервера()
@Возвращаемое значение:
(Число)  Состояние сервера"},
{"Item","AST","ЯзыкСервера","ServerLanguage","ЯзыкСервера(<?>)","ServerLanguage(<?>)","@Синтаксис:
ЯзыкСервера()
@Возвращаемое значение:
(Число)"},
{"Item","AST","ДополнительнаяИнформация","ExtraInfo","ДополнительнаяИнформация(<?>)","ExtraInfo(<?>)","@Синтаксис:
ДополнительнаяИнформация()
@Возвращаемое значение:
(Число)  Дополнительная информация"},
{"Item","AST","Информация","Info","Информация(<?>)","Info(<?>)","@Синтаксис:
Информация()
@Возвращаемое значение:
(Строка)  Информация"},
{"Item","AST","НомерПоследнейОшибки","LastErrorNo","НомерПоследнейОшибки(<?>)","LastErrorNo(<?>)","@Синтаксис:
НомерПоследнейОшибки()
@Возвращаемое значение:
(Число)  Числовой номер последней ошибки
@Замечание:
     ER_HASHCHK                            = 1000;      ER_NISAMCHK                           = 1001;      ER_NO                                 = 1002;      ER_YES                                = 1003;      ER_CANT_CREATE_FILE                   = 1004;      ER_CANT_CREATE_TABLE                  = 1005;      ER_CANT_CREATE_DB                     = 1006;      ER_DB_CREATE_EXISTS                   = 1007;      ER_DB_DROP_EXISTS                     = 1008;      ER_DB_DROP_DELETE                     = 1009;      ER_DB_DROP_RMDIR                      = 1010;      ER_CANT_DELETE_FILE                   = 1011;      ER_CANT_FIND_SYSTEM_REC               = 1012;      ER_CANT_GET_STAT                      = 1013;      ER_CANT_GET_WD                        = 1014;      ER_CANT_LOCK                          = 1015;      ER_CANT_OPEN_FILE                     = 1016;      ER_FILE_NOT_FOUND                     = 1017;      ER_CANT_READ_DIR                      = 1018;      ER_CANT_SET_WD                        = 1019;      ER_CHECKREAD                          = 1020;      ER_DISK_FULL                          = 1021;      ER_DUP_KEY                            = 1022;      ER_ERROR_ON_CLOSE                     = 1023;      ER_ERROR_ON_READ                      = 1024;      ER_ERROR_ON_RENAME                    = 1025;      ER_ERROR_ON_WRITE                     = 1026;      ER_FILE_USED                          = 1027;      ER_FILSORT_ABORT                      = 1028;      ER_FORM_NOT_FOUND                     = 1029;      ER_GET_ERRNO                          = 1030;      ER_ILLEGAL_HA                         = 1031;      ER_KEY_NOT_FOUND                      = 1032;      ER_NOT_FORM_FILE                      = 1033;      ER_NOT_KEYFILE                        = 1034;      ER_OLD_KEYFILE                        = 1035;      ER_OPEN_AS_READONLY                   = 1036;      ER_OUTOFMEMORY                        = 1037;      ER_OUT_OF_SORTMEMORY                  = 1038;      ER_UNEXPECTED_EOF                     = 1039;      ER_CON_COUNT_ERROR                    = 1040;      ER_OUT_OF_RESOURCES                   = 1041;      ER_BAD_HOST_ERROR                     = 1042;      ER_HANDSHAKE_ERROR                    = 1043;      ER_DBACCESS_DENIED_ERROR              = 1044;      ER_ACCESS_DENIED_ERROR                = 1045;      ER_NO_DB_ERROR                        = 1046;      ER_UNKNOWN_COM_ERROR                  = 1047;      ER_BAD_NULL_ERROR                     = 1048;      ER_BAD_DB_ERROR                       = 1049;      ER_TABLE_EXISTS_ERROR                 = 1050;      ER_BAD_TABLE_ERROR                    = 1051;      ER_NON_UNIQ_ERROR                     = 1052;      ER_SERVER_SHUTDOWN                    = 1053;      ER_BAD_FIELD_ERROR                    = 1054;      ER_WRONG_FIELD_WITH_GROUP             = 1055;      ER_WRONG_GROUP_FIELD                  = 1056;      ER_WRONG_SUM_SELECT                   = 1057;      ER_WRONG_VALUE_COUNT                  = 1058;      ER_TOO_LONG_IDENT                     = 1059;      ER_DUP_FIELDNAME                      = 1060;      ER_DUP_KEYNAME                        = 1061;      ER_DUP_ENTRY                          = 1062;      ER_WRONG_FIELD_SPEC                   = 1063;      ER_PARSE_ERROR                        = 1064;      ER_EMPTY_QUERY                        = 1065;      ER_NONUNIQ_TABLE                      = 1066;      ER_INVALID_DEFAULT                    = 1067;      ER_MULTIPLE_PRI_KEY                   = 1068;      ER_TOO_MANY_KEYS                      = 1069;      ER_TOO_MANY_KEY_PARTS                 = 1070;      ER_TOO_LONG_KEY                       = 1071;      ER_KEY_COLUMN_DOES_NOT_EXITS          = 1072;      ER_BLOB_USED_AS_KEY                   = 1073;      ER_TOO_BIG_FIELDLENGTH                = 1074;      ER_WRONG_AUTO_KEY                     = 1075;      ER_READY                              = 1076;      ER_NORMAL_SHUTDOWN                    = 1077;      ER_GOT_SIGNAL                         = 1078;      ER_SHUTDOWN_COMPLETE                  = 1079;      ER_FORCING_CLOSE                      = 1080;      ER_IPSOCK_ERROR                       = 1081;      ER_NO_SUCH_INDEX                      = 1082;      ER_WRONG_FIELD_TERMINATORS            = 1083;      ER_BLOBS_AND_NO_TERMINATED            = 1084;      ER_TEXTFILE_NOT_READABLE              = 1085;      ER_FILE_EXISTS_ERROR                  = 1086;      ER_LOAD_INFO                          = 1087;      ER_ALTER_INFO                         = 1088;      ER_WRONG_SUB_KEY                      = 1089;      ER_CANT_REMOVE_ALL_FIELDS             = 1090;      ER_CANT_DROP_FIELD_OR_KEY             = 1091;      ER_INSERT_INFO                        = 1092;      ER_INSERT_TABLE_USED                  = 1093;      ER_NO_SUCH_THREAD                     = 1094;      ER_KILL_DENIED_ERROR                  = 1095;      ER_NO_TABLES_USED                     = 1096;      ER_TOO_BIG_SET                        = 1097;      ER_NO_UNIQUE_LOGFILE                  = 1098;      ER_TABLE_NOT_LOCKED_FOR_WRITE         = 1099;      ER_TABLE_NOT_LOCKED                   = 1100;      ER_BLOB_CANT_HAVE_DEFAULT             = 1101;      ER_WRONG_DB_NAME                      = 1102;      ER_WRONG_TABLE_NAME                   = 1103;      ER_TOO_BIG_SELECT                     = 1104;      ER_UNKNOWN_ERROR                      = 1105;      ER_UNKNOWN_PROCEDURE                  = 1106;      ER_WRONG_PARAMCOUNT_TO_PROCEDURE      = 1107;      ER_WRONG_PARAMETERS_TO_PROCEDURE      = 1108;      ER_UNKNOWN_TABLE                      = 1109;      ER_FIELD_SPECIFIED_TWICE              = 1110;      ER_INVALID_GROUP_FUNC_USE             = 1111;      ER_UNSUPPORTED_EXTENSION              = 1112;      ER_TABLE_MUST_HAVE_COLUMNS            = 1113;      ER_RECORD_FILE_FULL                   = 1114;      ER_UNKNOWN_CHARACTER_SET              = 1115;      ER_TOO_MANY_TABLES                    = 1116;      ER_TOO_MANY_FIELDS                    = 1117;      ER_TOO_BIG_ROWSIZE                    = 1118;      ER_STACK_OVERRUN                      = 1119;      ER_WRONG_OUTER_JOIN                   = 1120;      ER_NULL_COLUMN_IN_INDEX               = 1121;      ER_CANT_FIND_UDF                      = 1122;      ER_CANT_INITIALIZE_UDF                = 1123;      ER_UDF_NO_PATHS                       = 1124;      ER_UDF_EXISTS                         = 1125;      ER_CANT_OPEN_LIBRARY                  = 1126;      ER_CANT_FIND_DL_ENTRY                 = 1127;      ER_FUNCTION_NOT_DEFINED               = 1128;      ER_HOST_IS_BLOCKED                    = 1129;      ER_HOST_NOT_PRIVILEGED                = 1130;      ER_PASSWORD_ANONYMOUS_USER            = 1131;      ER_PASSWORD_NOT_ALLOWED               = 1132;      ER_PASSWORD_NO_MATCH                  = 1133;      ER_UPDATE_INFO                        = 1134;      ER_CANT_CREATE_THREAD                 = 1135;      ER_WRONG_VALUE_COUNT_ON_ROW           = 1136;      ER_CANT_REOPEN_TABLE                  = 1137;      ER_INVALID_USE_OF_NULL                = 1138;      ER_REGEXP_ERROR                       = 1139;      ER_MIX_OF_GROUP_FUNC_AND_FIELDS       = 1140;      ER_NONEXISTING_GRANT                  = 1141;      ER_TABLEACCESS_DENIED_ERROR           = 1142;      ER_COLUMNACCESS_DENIED_ERROR          = 1143;      ER_ILLEGAL_GRANT_FOR_TABLE            = 1144;      ER_GRANT_WRONG_HOST_OR_USER           = 1145;      ER_NO_SUCH_TABLE                      = 1146;      ER_NONEXISTING_TABLE_GRANT            = 1147;      ER_NOT_ALLOWED_COMMAND                = 1148;      ER_SYNTAX_ERROR                       = 1149;      ER_DELAYED_CANT_CHANGE_LOCK           = 1150;      ER_TOO_MANY_DELAYED_THREADS           = 1151;      ER_ABORTING_CONNECTION                = 1152;      ER_NET_PACKET_TOO_LARGE               = 1153;      ER_NET_READ_ERROR_FROM_PIPE           = 1154;      ER_NET_FCNTL_ERROR                    = 1155;      ER_NET_PACKETS_OUT_OF_ORDER           = 1156;      ER_NET_UNCOMPRESS_ERROR               = 1157;      ER_NET_READ_ERROR                     = 1158;      ER_NET_READ_INTERRUPTED               = 1159;      ER_NET_ERROR_ON_WRITE                 = 1160;      ER_NET_WRITE_INTERRUPTED              = 1161;      ER_TOO_LONG_STRING                    = 1162;      ER_TABLE_CANT_HANDLE_BLOB             = 1163;      ER_TABLE_CANT_HANDLE_AUTO_INCREMENT   = 1164;      ER_DELAYED_INSERT_TABLE_LOCKED        = 1165;      ER_WRONG_COLUMN_NAME                  = 1166;      ER_WRONG_KEY_COLUMN                   = 1167;      ER_WRONG_MRG_TABLE                    = 1168;      ER_DUP_UNIQUE                         = 1169;      ER_BLOB_KEY_WITHOUT_LENGTH            = 1170;      ER_PRIMARY_CANT_HAVE_NULL             = 1171;      ER_TOO_MANY_ROWS                      = 1172;      ER_REQUIRES_PRIMARY_KEY               = 1173;      ER_NO_RAID_COMPILED                   = 1174;      ER_UPDATE_WITHOUT_KEY_IN_SAFE_MODE    = 1175;      ER_KEY_DOES_NOT_EXITS                 = 1176;      ER_CHECK_NO_SUCH_TABLE                = 1177;      ER_CHECK_NOT_IMPLEMENTED              = 1178;      ER_CANT_DO_THIS_DURING_AN_TRANSACTION = 1179;      ER_ERROR_DURING_COMMIT                = 1180;      ER_ERROR_DURING_ROLLBACK              = 1181;      ER_ERROR_DURING_FLUSH_LOGS            = 1182;      ER_ERROR_DURING_CHECKPOINT            = 1183;      ER_NEW_ABORTING_CONNECTION            = 1184;      ER_DUMP_NOT_IMPLEMENTED               = 1185;      ER_FLUSH_MASTER_BINLOG_CLOSED         = 1186;      ER_INDEX_REBUILD                      = 1187;      ER_MASTER                             = 1188;      ER_MASTER_NET_READ                    = 1189;      ER_MASTER_NET_WRITE                   = 1190;      ER_FT_MATCHING_KEY_NOT_FOUND          = 1191;      ER_LOCK_OR_ACTIVE_TRANSACTION         = 1192;      ER_UNKNOWN_SYSTEM_VARIABLE            = 1193;      ER_CRASHED_ON_USAGE                   = 1194;      ER_CRASHED_ON_REPAIR                  = 1195;      ER_WARNING_NOT_COMPLETE_ROLLBACK      = 1196;      ER_TRANS_CACHE_FULL                   = 1197;      ER_SLAVE_MUST_STOP                    = 1198;      ER_SLAVE_NOT_RUNNING                  = 1199;      ER_BAD_SLAVE                          = 1200;      ER_MASTER_INFO                        = 1201;      ER_SLAVE_THREAD                       = 1202;      ER_TOO_MANY_USER_CONNECTIONS          = 1203;      ER_SET_CONSTANTS_ONLY                 = 1204;      ER_ERROR_MESSAGES                     = 205;       CR_MIN_ERROR                          = 2000;      CR_MAX_ERROR                          = 2999;      CLIENT_ERRMAP                         = 2;       CR_UNKNOWN_ERROR                      = 2000;      CR_SOCKET_CREATE_ERROR                = 2001;      CR_CONNECTION_ERROR                   = 2002;      CR_CONN_HOST_ERROR                    = 2003;      CR_IPSOCK_ERROR                       = 2004;      CR_UNKNOWN_HOST                       = 2005;      CR_SERVER_GONE_ERROR                  = 2006;      CR_VERSION_ERROR                      = 2007;      CR_OUT_OF_MEMORY                      = 2008;      CR_WRONG_HOST_INFO                    = 2009;      CR_LOCALHOST_CONNECTION               = 2010;      CR_TCP_CONNECTION                     = 2011;      CR_SERVER_HANDSHAKE_ERR               = 2012;      CR_SERVER_LOST                        = 2013;      CR_COMMANDS_OUT_OF_SYNC               = 2014;      CR_NAMEDPIPE_CONNECTION               = 2015;      CR_NAMEDPIPEWAIT_ERROR                = 2016;      CR_NAMEDPIPEOPEN_ERROR                = 2017;      CR_NAMEDPIPESETSTATE_ERROR            = 2018;      CR_CANT_READ_CHARSET                  = 2019;      CR_NET_PACKET_TOO_LARGE               = 2020;"},
{"Item","AST","ПоследняяОшибка","LastError","ПоследняяОшибка(<?>)","LastError(<?>)","@Синтаксис:
ПоследняяОшибка()
@Возвращаемое значение:
(Строка)  Описание последней ошибки"},
{"Item","AST","Подключен","Connected","Подключен(<?>)","Connected(<?>)","@Синтаксис:
Подключен()
@Возвращаемое значение:
(Число)  1 - соединение установлено, 0 - нет"},
{"Item","AST","УстановитьСоединение","Connect","УстановитьСоединение(<?>)","Connect(<?>)","@Синтаксис:
УстановитьСоединение()
@Возвращаемое значение:
(Число)  1 - успешно, 0 - были ошибки"},
{"Item","AST","ПереустановитьСоединение","Reconnect","ПереустановитьСоединение(<?>)","Reconnect(<?>)","@Синтаксис:
ПереустановитьСоединение()
@Возвращаемое значение:
(Число)  1 - успешно, 0 - были ошибки"},
{"Item","AST","ЗакрытьСоединение","Close","ЗакрытьСоединение(<?>)","Close(<?>)","@Синтаксис:
ЗакрытьСоединение()
@Возвращаемое значение:
(Число)  1 - успешно, 0 - были ошибки"},
{"Item","AST","ВыбратьБазуДанных","SelectDb","ВыбратьБазуДанных(<?>)","SelectDb(<?>)","@Синтаксис:
ВыбратьБазуДанных(<БазаДанных>)
@Возвращаемое значение:
(Число)  1 - успешно, 0 - были ошибки
@Параметры:
<БазаДанных> - (Строка)  Передается по значению."},
{"Item","AST","СоздатьБазуДанных","CreateDb","СоздатьБазуДанных(<?>)","CreateDb(<?>)","@Синтаксис:
СоздатьБазуДанных(<БазаДанных>)
@Возвращаемое значение:
(Число)  1 - успешно, 0 - были ошибки
@Параметры:
<БазаДанных> - (Строка)  Передается по значению."},
{"Item","AST","УдалитьБазуДанных","DropDb","УдалитьБазуДанных(<?>)","DropDb(<?>)","@Синтаксис:
УдалитьБазуДанных(<БазаДанных>)
@Возвращаемое значение:
(Число)  1 - успешно, 0 - были ошибки
@Параметры:
<БазаДанных> - (Строка)  Передается по значению."},
{"Item","AST","УстановитьПользователя","ChangeUser","УстановитьПользователя(<?>)","ChangeUser(<?>)","@Синтаксис:
УстановитьПользователя(<ИмяПользователя>,<Пароль>,<БазаДанных>)
@Возвращаемое значение:
(Число)  1 - успешно, 0 - были ошибки
@Параметры:
<ИмяПользователя> - (Строка)  Передается по значению. 
<Пароль> - (Строка)  Передается по значению. 
<БазаДанных> -   Необязательный параметр.   Передается по значению."},
{"Item","AST","Обновить","Refresh","Обновить(<?>)","Refresh(<?>)","@Синтаксис:
Обновить(<Опции>)
@Возвращаемое значение:
(Число)  1 - успешно, 0 - были ошибки
@Параметры:
<Опции> - (Число)  Передается по значению.         //refresh flags      REFRESH_GRANT     = 1;      REFRESH_LOG       = 2;      REFRESH_TABLES    = 4;      REFRESH_HOSTS     = 8;      REFRESH_STATUS    = 16;      REFRESH_THREADS   = 32;      REFRESH_SLAVE     = 64;      REFRESH_MASTER    = 128;      REFRESH_READ_LOCK = 16384;      REFRESH_FAST      = 32768;"},
{"Item","AST","ЗавершитьПроцесс","Kill","ЗавершитьПроцесс(<?>)","Kill(<?>)","@Синтаксис:
ЗавершитьПроцесс(<ИдентификаторПроцесса>)
@Возвращаемое значение:
(Число)  1 - успешно, 0 - были ошибки
@Параметры:
<ИдентификаторПроцесса> - (Число)  Передается по значению."},
{"Item","AST","ПроверитьСоединение","Ping","ПроверитьСоединение(<?>)","Ping(<?>)","@Синтаксис:
ПроверитьСоединение()
@Возвращаемое значение:
(Число)  1 - успешно, 0 - были ошибки"},
{"Item","AST","ОстановитьСервер","Shutdown","ОстановитьСервер(<?>)","Shutdown(<?>)","@Синтаксис:
ОстановитьСервер()
@Возвращаемое значение:
(Число)  1 - успешно, 0 - были ошибки"},
{"Item","AST","Статистика","Stat","Статистика(<?>)","Stat(<?>)","@Синтаксис:
Статистика()
@Возвращаемое значение:
(Строка)"},
{"Item","AST","СписокПроцессов","ListProcesses","СписокПроцессов(<?>)","ListProcesses(<?>)","@Синтаксис:
СписокПроцессов()
@Замечание:
НЕ РЕАЛИЗОВАН"},
{"Item","AST","ВыполнитьЗапрос","Query","ВыполнитьЗапрос(<?>)","Query(<?>)","@Синтаксис:
ВыполнитьЗапрос(<СтрокаЗапроса>,<Параметры>,<ТипЗапроса>)
@Возвращаемое значение:
(Число)  1 - успешно, 0 - были ошибки
@Параметры:
<СтрокаЗапроса> - (Строка)  Передается по значению. 
<Параметры> - (СписокЗначений)  Необязательный параметр. 
<ТипЗапроса> - (Число)  Необязательный параметр.   Передается по значению."},
{"Item","AST","Выполнить","Execute","Выполнить(<?>)","Execute(<?>)","@Синтаксис:
Выполнить(<СтрокаЗапроса>,<Параметры>)
@Возвращаемое значение:
(Число)  -1 - были ошибки, >=0 - число обработанных записей
@Параметры:
<СтрокаЗапроса> - (Строка)  Передается по значению. 
<Параметры> - (СписокЗначений)  Необязательный параметр."},
{"Item","AST","ВКонце","EOF","ВКонце(<?>)","EOF(<?>)","@Синтаксис:
ВКонце()
@Возвращаемое значение:
(Число)"},
{"Item","AST","ВНачале","BOF","ВНачале(<?>)","BOF(<?>)","@Синтаксис:
ВНачале()
@Возвращаемое значение:
(Число)"},
{"Item","AST","ПолучитьПараметрыПоля","FieldDef","ПолучитьПараметрыПоля(<?>)","FieldDef(<?>)","@Синтаксис:
ПолучитьПараметрыПоля(<Индекс>,<ТипПоля>,<ДлинаПоля>,<Точность>,<Флаги>)
@Возвращаемое значение:
(Строка)  Имя поля
@Параметры:
<Индекс> - (Число)  Передается по значению. 
<ТипПоля> - (Число)  Переменная      // field types      FIELD_TYPE_DECIMAL     = 0;      FIELD_TYPE_TINY        = 1;      FIELD_TYPE_SHORT       = 2;      FIELD_TYPE_LONG        = 3;      FIELD_TYPE_FLOAT       = 4;      FIELD_TYPE_DOUBLE      = 5;      FIELD_TYPE_NULL        = 6;      FIELD_TYPE_TIMESTAMP   = 7;      FIELD_TYPE_LONGLONG    = 8;      FIELD_TYPE_INT24       = 9;      FIELD_TYPE_DATE        = 10;      FIELD_TYPE_TIME        = 11;      FIELD_TYPE_DATETIME    = 12;      FIELD_TYPE_YEAR        = 13;      FIELD_TYPE_NEWDATE     = 14;      FIELD_TYPE_ENUM        = 247;      FIELD_TYPE_SET         = 248;      FIELD_TYPE_TINY_BLOB   = 249;      FIELD_TYPE_MEDIUM_BLOB = 250;      FIELD_TYPE_LONG_BLOB   = 251;      FIELD_TYPE_BLOB        = 252;      FIELD_TYPE_VAR_STRING  = 253;      FIELD_TYPE_STRING      = 254;       FIELD_TYPE_CHAR        = FIELD_TYPE_TINY;      FIELD_TYPE_INTERVAL    = FIELD_TYPE_ENUM;
<ДлинаПоля> - (Число)
<Точность> - (Число)
<Флаги> - (Число)      //field flags      NOT_NULL_FLAG       = 1;      PRI_KEY_FLAG        = 2;      UNIQUE_KEY_FLAG     = 4;      MULTIPLE_KEY_FLAG   = 8;      BLOB_FLAG           = 16;      UNSIGNED_FLAG       = 32;      ZEROFILL_FLAG       = 64;      BINARY_FLAG         = 128;      ENUM_FLAG           = 256;      AUTO_INCREMENT_FLAG = 512;      TIMESTAMP_FLAG      = 1024;      SET_FLAG            = 2048;      NUM_FLAG            = 32768;      PART_KEY_FLAG       = 16384;      GROUP_FLAG          = 32768;      UNIQUE_FLAG         = 65536;"},
{"Item","AST","Следующая","Next","Следующая(<?>)","Next(<?>)","@Синтаксис:
Следующая()
@Возвращаемое значение:
(Число)  1 - успешно, 0 - были ошибки"},
{"Item","AST","Предыдущая","Prior","Предыдущая(<?>)","Prior(<?>)","@Синтаксис:
Предыдущая()
@Возвращаемое значение:
(Число)  1 - успешно, 0 - были ошибки"},
{"Item","AST","Первая","First","Первая(<?>)","First(<?>)","@Синтаксис:
Первая()
@Возвращаемое значение:
(Число)  1 - успешно, 0 - были ошибки"},
{"Item","AST","Последняя","Last","Последняя(<?>)","Last(<?>)","@Синтаксис:
Последняя()
@Возвращаемое значение:
(Число)  1 - успешно, 0 - были ошибки"},
{"Item","AST","Перейти","Locate","Перейти(<?>)","Locate(<?>)","@Синтаксис:
Перейти(<НомерЗаписи>)
@Возвращаемое значение:
(Число)  1 - успешно, 0 - были ошибки
@Параметры:
<НомерЗаписи> - (Число)  Передается по значению."},
{"Item","AST","ПолучитьЗначение","FetchValue","ПолучитьЗначение(<?>)","FetchValue(<?>)","@Синтаксис:
ПолучитьЗначение()"},
{"Item","AST","ПолучитьЗапись","FetchRow","ПолучитьЗапись(<?>)","FetchRow(<?>)","@Синтаксис:
ПолучитьЗапись(<Запись>)
@Возвращаемое значение:
(СписокЗначений)
@Параметры:
<Запись> - (СписокЗначений)  Необязательный параметр."},
{"Item","AST","ПолучитьВсе","FetchAll","ПолучитьВсе(<?>)","FetchAll(<?>)","@Синтаксис:
ПолучитьВсе(<Таблица>)
@Возвращаемое значение:
(ТаблицаЗначений)
@Параметры:
<Таблица> - (ТаблицаЗначений)  Необязательный параметр."},
{"Item","AST","ЗаполнитьВсе","FillAll","ЗаполнитьВсе(<?>)","FillAll(<?>)","@Синтаксис:
ЗаполнитьВсе(<Таблица>)
@Назначение:
Заполняет существующую таблицу
@Возвращаемое значение:
(ТаблицаЗначений)
@Параметры:
<Таблица> - (ТаблицаЗначений)"}},
{"Item","AST","Пример использования","","Пример использования","","Перем Клиент;

//*******************************************
Процедура открыть()
  Клиент.Сервер = Сервер;
  Клиент.Пользователь = Пользователь;
  Клиент.Пароль = Пароль;
  Клиент.Порт = Порт;
  Клиент.БазаДанных = БД;
  Клиент.НужноПереустановитьСоединение = 1;
  Клиент.ИспользоватьСжатие = 1;
  Если Клиент.УстановитьСоединение() = 1 Тогда
      Предупреждение(""ОК!"",60);
	  //Форма.ВерсияСервера.Заголовок(Клиент.ВерсияСервера());
  Иначе
      Предупреждение(""Плохо!"",60);
  КонецЕсли;
КонецПроцедуры

//*******************************************
Процедура закрыть()
	Если Клиент.Подключен() = 1 Тогда
	    Клиент.ЗакрытьСоединение();
        //Форма.ВерсияСервера.Заголовок("""");
	КонецЕсли;
    Предупреждение(""ОК!"",60);
КонецПроцедуры

//*******************************************
Процедура пинг()
	Если Клиент.Подключен() = 1 Тогда
	  Если Клиент.ПроверитьСоединение() = 1 Тогда
	      Предупреждение(""ОК!"",60);
	  Иначе
	      Предупреждение(""Плохо!"",60);
		  Ошибки = Клиент.ПоследняяОшибка() + ?(ПустаяСтрока(Ошибки) = 0,РазделительСтрок,"""") + Ошибки;
	  КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//*******************************************
Процедура убить()
	Если Клиент.Подключен() = 1 Тогда
	  Если Клиент.ОстановитьСервер() = 1 Тогда
	      Предупреждение(""ОК!"",60);
          //Форма.ВерсияСервера.Заголовок("""");
	  Иначе
	      Предупреждение(""Плохо!"",60);
		  Ошибки = Клиент.ПоследняяОшибка() + ?(ПустаяСтрока(Ошибки) = 0,РазделительСтрок,"""") + Ошибки;
	  КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//*****************************************************************
// 
Процедура Выборка()
Перем Т;
  	ВЗ = ВидЗапроса.ПолучитьЗначение(ВидЗапроса.ТекущаяСтрока());
  	Если ВЗ = 3 Тогда
  		Т = Клиент.ПолучитьВсе();
  	Иначе
  		Т = СоздатьОбъект(""ТаблицаЗначений"");
  		Колво = Клиент.КоличествоПолей;
  		Для Сч = 1 По Колво Цикл
  			Т.НоваяКолонка(Клиент.ПолучитьПараметрыПоля(Сч-1));
  		КонецЦикла;
  		Клиент.Первая();
  		Пока Клиент.ВКонце() = 0 Цикл
  			Т.НоваяСтрока();
  			Если ВЗ = 2 Тогда
  				Список = Клиент.ПолучитьЗапись();
		  		Для Сч = 1 По Колво Цикл
		  			Т.УстановитьЗначение(Т.НомерСтроки,Сч,ТипЗначенияСтр(Список.ПолучитьЗначение(Сч))+"":""+Список.ПолучитьЗначение(Сч));
		  		КонецЦикла;
  			Иначе
		  		Для Сч = 1 По Колво Цикл
		  			Т.УстановитьЗначение(Т.НомерСтроки,Сч,ТипЗначенияСтр(Клиент.ПолучитьЗначение(Сч-1))+"":""+Клиент.ПолучитьЗначение(Сч-1));
		  		КонецЦикла;
  			КонецЕсли;
  		    Клиент.Следующая();
  		КонецЦикла;
  	КонецЕсли;
  		Т.Выгрузить(Таб);
КонецПроцедуры //Выборка

//*****************************************************************
// 
Процедура Выборка2(Курсор)
Перем Т;
  	ВЗ = ВидЗапроса.ПолучитьЗначение(ВидЗапроса.ТекущаяСтрока());
  	Если ВЗ = 3 Тогда
  		Т = Курсор.ПолучитьВсе();
  	Иначе
  		Т = СоздатьОбъект(""ТаблицаЗначений"");
  		Колво = Курсор.КоличествоПолей;
  		Для Сч = 1 По Колво Цикл
  			Т.НоваяКолонка(Курсор.ПолучитьПараметрыПоля(Сч-1));
  		КонецЦикла;
  		Курсор.Первая();
  		Пока Курсор.ВКонце() = 0 Цикл
  			Т.НоваяСтрока();
  			Если ВЗ = 2 Тогда
  				Список = Курсор.ПолучитьЗапись();
		  		Для Сч = 1 По Колво Цикл
		  			Т.УстановитьЗначение(Т.НомерСтроки,Сч,Список.ПолучитьЗначение(Сч));
		  		КонецЦикла;
  			Иначе
		  		Для Сч = 1 По Колво Цикл
		  			Т.УстановитьЗначение(Т.НомерСтроки,Сч,Курсор.ПолучитьЗначение(Сч-1));
		  		КонецЦикла;
  			КонецЕсли;
  		    Курсор.Следующая();
  		КонецЦикла;
  	КонецЕсли;
  		Т.Выгрузить(Таб);
КонецПроцедуры //Выборка

//*******************************************
Процедура ВыполнитьЗапрос(Снова = 0)
	Если Клиент.Подключен() = 1 Тогда
		Если Версия2 = 0 Тогда
			Если Снова = 0 Тогда
			  Если Клиент.ВыполнитьЗапрос(Запрос,,Сохраняемый) = 1 Тогда
			  	Форма.КОЗ.Заголовок(""Количество обработанных записей: ""+Клиент.КоличествоОбработанныхЗаписей());
			  	Выборка();
		        Предупреждение(""ОК!"",60);
			  Иначе
			      Предупреждение(""Плохо!"",60);
				  Ошибки = Клиент.ПоследняяОшибка() + ?(ПустаяСтрока(Ошибки) = 0,РазделительСтрок,"""") + Ошибки;
			  КонецЕсли;
			Иначе
				Выборка();
		        Предупреждение(""ОК!"",60);
			КонецЕсли;
		Иначе
		    З = Клиент.ПодготовитьИВыполнитьЗапрос(Запрос,,Сохраняемый);
			Если З <> 0 Тогда
		  		Форма.КОЗ.Заголовок(""Количество обработанных записей: ""+Клиент.КоличествоОбработанныхЗаписей());
		  		Выборка2(З);
	        	Предупреждение(""ОК!"",60);
		  	Иначе
		      Предупреждение(""Плохо!"",60);
			  Ошибки = Клиент.ПоследняяОшибка() + ?(ПустаяСтрока(Ошибки) = 0,РазделительСтрок,"""") + Ошибки;
		  КонецЕсли;
		КонецЕсли;
    Иначе
	      Предупреждение(""Нет подключения!"",60);
	КонецЕсли;
КонецПроцедуры

//*****************************************************************
// 
Процедура ПриОткрытии()
	Если ЗагрузитьВнешнююКомпоненту(""v7mysql.dll"") = 0 Тогда
	    Статусвозврата(0);
		Предупреждение(""нет компоненты!"",60);
		Возврат;
	КонецЕсли;
	Клиент = СоздатьОбъект(""AddIn.MySQLConnection"");
	//Форма.ВерсияКлиента.Заголовок(Клиент.ВерсияКлиента());
	ВидЗапроса.ДобавитьЗначение(1,""ПолучитьЗначение()"");
	ВидЗапроса.ДобавитьЗначение(2,""ПолучитьЗапись()"");
	ВидЗапроса.ДобавитьЗначение(3,""ПолучитьВсе()"");
КонецПроцедуры //ПриОткрытии"}}}}