//Конфигурация для платформы "1С:Предприятие 7.7" РБ-Софт:Рабочее место кассира.
//Версия 4.57 от 05.06.11 23:24:51
//Назначение: Автоматизация POS-узлов в магазинах (Point of sale).
//(c) Баинов Евгений, ООО "РБ-Софт" 2006-2011 г.Улан-Удэ, ул.Балтахинова,17Е,офис 215
//e-mail: bainov@rb-soft.ru  icq: 73718937, телефоны: (3012) 440-357, 278-228
//Сайт проекта: http://code.google.com/p/rbsoft-rmk/
//---------------------------------------------------------------------------------------
//Данная программа является свободным программным обеспечением.
//Вы вправе распространять ее и/или модифицировать в соответствии с условиями версии 2
//либо по вашему выбору с условиями более поздней версии Стандартной Общественной Лицензии GNU,
//опубликованной Free Software Foundation.
//Мы распространяем данную программу в надежде на то, что она будет вам полезной,
//однако НЕ ПРЕДОСТАВЛЯЕМ НА НЕЕ НИКАКИХ ГАРАНТИЙ,
//в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
//и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ.
//Для получения более подробной информации ознакомьтесь со Стандартной Общественной Лицензией GNU.
//Вместе с данной программой вы должны были получить экземпляр Стандартной Общественной Лицензии GNU.
//Если вы его не получили, сообщите об этом в Free Software Foundation, Inc.,
//59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//_______________________________________________________________________________________

Перем Форма Экспорт;//для отладки классов 1С++
Перем НомерВерсии Экспорт; //Номер текущей версии конфигурации
Перем Debug экспорт;   //1- режим отладки. выводятся сообщения в окно сообщений
Перем DebugLog экспорт;//1- режим логирования сообщений выводимых функцией глДебаг в режиме отладки.
                       //сообщения пишутся в файл КаталогИБ\SYSLOG\Log_[Дата].txt
Перем глИмяPOS Экспорт;//Номер кассового компьютера

Перем глДиалоги экспорт;//ссылка на объект для работы с диалогами
Перем глОбщиеФункции  экспорт;//ссылка на объект Общие
Перем глСтроки экспорт;//ссылка на объект Общие.Строки
Перем глДрайверы экспорт; //Класс для работы с драйверами устройств

Перем глФабрикаОбъектов Экспорт; //объект для создания других объектов
Перем глБД Экспорт; //ссылка на класс для работы с базой данных
			       //работа с базой данных должна производиться только через этот объект
Перем глСкин Экспорт;
Перем глРМК Экспорт; //Объект РМК

Перем глПраваДоступа Экспорт; //Класс для контроля прав доступа
Перем глОбменДанными Экспорт; //Класс для организации обмена данными с внешними учетными системами
Перем глРегистраторСобытий Экспорт; //Класс для ведения журнала событий
Перем глНастройки Экспорт;//ссылка на объект ИниФайл с настройками программы

Перем глМенеджерСобытий Экспорт;//глобальный менеджер событий
Перем глМенеджерСобытийРегистратора Экспорт;

Перем глУниверсальныйОтчет Экспорт;

Перем глФайловаяСистема Экспорт;

Перем глЛицензирование Экспорт;


Перем   CR             Экспорт; //#13#10 Возврат каретки
Перем 	kbAltKeyCode   экспорт,
	    kbCtrlKeyCode  экспорт,
	    kbShiftKeyCode экспорт;


Перем
kbCtrlFlag  экспорт, kbAltFlag  экспорт, kbShiftFlag экспорт,
kbCtrl 		экспорт, kbAlt 		экспорт, kbShift 	 экспорт,

kbDelete 	экспорт,kbBackSpace экспорт, kbInsert 	 экспорт, kbHome    экспорт, kbEnd       экспорт,
kbPgUp 	    экспорт, kbPgDn 	экспорт, kbEnter 	 экспорт, kbEsc 	экспорт, kbSpace	 экспорт,

kbNumLock 	экспорт, kbPadPlus 	экспорт, kbPadMinus  экспорт, kbPadMul 	 экспорт, kbPadDiv 	 экспорт,
kbPadPoint 	экспорт, kbPad0 	экспорт,
kbPad1 		экспорт, kbPad2 	экспорт, kbPad3 	 экспорт, kbPad4 	 экспорт, kbPad5 	 экспорт,
kbPad6 		экспорт, kbPad7 	экспорт, kbPad8 	 экспорт, kbPad9 	 экспорт,

kbScroll 	экспорт, kbPause 	экспорт, kbPrnScr 	экспорт,
kbLeftWin 	экспорт, kbRightWin экспорт, kbProperty экспорт, kbCapsLock 	экспорт, kbTab 		экспорт,

kbВолна 	экспорт, kbЛеваяСкобка 	экспорт, kbПраваяСкобка 	экспорт,
kbДвоеточие	экспорт, kbКавычка 	экспорт, kbВертикальнаяПолоса   экспорт, kbОбратныйСлэш 	экспорт,
kbЗапятая 	экспорт, kbТочка 	экспорт, kbСлэш 	экспорт, kbМинус		экспорт, kbРавно	экспорт,


kb0 		экспорт, kb1 		экспорт, kb2 		 экспорт, kb3 		 экспорт, kb4 		 экспорт,
kb5 		экспорт, kb6 		экспорт, kb7 		 экспорт, kb8 		 экспорт, kb9 		 экспорт,
kbF1 		экспорт, kbF2 		экспорт, kbF3 		 экспорт, kbF4 		 экспорт, kbF5 		 экспорт,
kbF6 		экспорт, kbF7 		экспорт, kbF8 		 экспорт, kbF9 		 экспорт, kbF10 	 экспорт,
kbF11		экспорт, kbF12 		экспорт,

kbRight 	экспорт, kbLeft 	экспорт, kbDown 	 экспорт, kbUp 		 экспорт,

kbA         экспорт, kbB        экспорт, kbC         экспорт, kbD        экспорт, kbE        экспорт,
kbF         экспорт, kbG        экспорт, kbH         экспорт, kbI        экспорт, kbJ        экспорт,
kbK         экспорт, kbL        экспорт, kbM         экспорт, kbN        экспорт, kbO        экспорт,
kbP         экспорт, kbQ        экспорт, kbR         экспорт, kbS        экспорт, kbT        экспорт,
kbU         экспорт, kbV        экспорт, kbW         экспорт, kbX        экспорт, kbY        экспорт,
kbZ         экспорт;


Процедура Сообщить(Сообщ,Маркер="") Экспорт Далее

Функция ТребуемаяВерсия1СПП(в1=0,в2=0,в3=0,в4=0)   возврат в1*(256*256*256) + в2*(256*256)+в3*256+в4; КонецФункции
Функция ТребуемаяВерсияFormex(в1=0,в2=0,в3=0,в4=0) возврат в1*(256*256*256) + в2*(256*256)+в3*256+в4; КонецФункции
//функция для просмотра объектов типа ТаблицаЗначений, СписокЗначений, Структура, ИндексированнаяТаблица
//автоматически открывается просмотр вложенных объектов этих типов.
Процедура глБраузер(Объект) Экспорт
	Инспектор=СоздатьОбъект("ИнспекторОбъектов");
	Инспектор.Открыть(Объект);
КонецПроцедуры



//******************************************************************************
//  глФРМ(ЧислЗнач, Валюта="", ВыводНулевого=0, РаздТриад="'")
//
// Параметры:
//  ЧислЗнач		- число, которое мы хотим форматировать
//  Валюта			- валюта (элемент справочника "Валюты") или пустое
//                    значение
//  ВыводНулевого	- строка, режим вывода нулевых значений. Возможные значения:
//  				  "0" - подавить вывод нулевых значений (по умолчанию)
//	 			       ""  - вывод нулевых.
//	РаздТриад		- разделитель триад.
//
// Возвращаемое значение:
//  Отформатированная строка
//
// Описание:
// 	Это процедура стандартного для данной конфигурации форматирования цен и сумм.
// 	По умолчанию не выводит нулевые значения и разделяет триады символом "'".
//  Для вывода нулевых значений в параметр ВыводНулевого нужно передать пустую
//  строку. В параметр РаздТриад можно передать символ, разделитель триад.
//  Если триады разделять не нужно, то в этот параметр нужно передать пустую
//  строку.
//
Функция глФРМ(ЧислЗнач, Валюта="", ВыводНулевого="0", РаздТриад="") Экспорт
	возврат глСтроки.ФРМ(ЧислЗнач, Валюта, ВыводНулевого, РаздТриад);
КонецФункции // глФРМ()

//******************************************************************************
//  глФРМКоличество(Знач ЧислЗнач,ЧислоЗнаков="", РаздТриад=" ")
//
// Параметры:
//  ЧислЗнач  - число, которое мы хотим форматировать,
//  ЧислоЗнаков   - ,
//	РаздТриад - разделитель триад, по умолчанию - пробел.
//  РежимДробей - 0 не выводить дроби, 1 - выводить если есть
// Возвращаемое значение:
//  Отформатированная строка
//
// Описание:
//  Это процедура стандартного для данной конфигурации форматирования количества.
//
Функция глФРМКоличество(Знач ЧислЗнач,ЧислоЗнаков="0", РаздТриад=" ",РежимДробей=0) Экспорт
	возврат глСтроки.ФРМКоличество(ЧислЗнач, ЧислоЗнаков, РаздТриад, РежимДробей);
КонецФункции //глФРМКоличество()

Процедура ИнициализироватьКлавиатуру() Экспорт
	kbEnter=13;	kbEsc=27;	kbNumLock=144;kbPadPlus=107;kbPadMinus=109;kbPadMul=106;
	kbPadDiv=111;kbPadPoint=110;

	kbPad0=96;	kbPad1=97;	kbPad2=98;	kbPad3=99;	kbPad4=100;
	kbPad5=101;	kbPad6=102;	kbPad7=103;	kbPad8=104;	kbPad9=105;

	kb0=48; kb1=49;	kb2=50;	kb3=51;	kb4=52;
	kb5=53; kb6=54;	kb7=55;	kb8=56;	kb9=57;

	kbScroll=105;	kbPause=19; 	kbLeftWin=90;	kbRightWin=92;	kbProperty=93;
	kbCapsLock=20;	kbTab=9;		kbCtrl=17;		kbAlt=18;		kbShift=16;
	kbF1=112;		kbF2=113;		kbF3=114;		kbF4=115;		kbF5=116;
	kbF6=117;		kbF7=118;		kbF8=119;		kbF9=120;		kbF10=121;
	//идут дважды
	kbF11=122;   kbF12=123;



	kbAltFlag  = 100000;
	kbCtrlFlag = 1000000;
	kbShiftFlag= 10000000;

	kbAltKeyCode=kbAltFlag  +18;
	kbCtrlKeyCode=kbCtrlFlag +17;
	kbShiftKeyCode=kbShiftFlag+16;

	kbSpace     =32; kbPgUp   =33;
	kbPgDn      =34; kbEnd    =35;
	kbLeft      =37; kbUp     =38;
	kbRight     =39; kbDown   =40;
	kbDelete    =46; kbInsert =45;
	kbBackSpace =8;  kbHome   =36;

	kbA= 65; kbB= 66; kbC= 67; kbD= 68; kbE= 69; kbF= 70; kbG= 71; kbH= 72; kbI= 73; kbJ= 74;
	kbK= 75; kbL= 76; kbM= 77; kbN= 78; kbO= 79; kbP= 80; kbQ= 81; kbR= 82; kbS= 83; kbT= 84;
	kbU= 85; kbV= 86; kbW= 87; kbX= 88; kbY= 89; kbZ= 90;

	kbВолна=192;
	kbЛеваяСкобка= 219;
	kbПраваяСкобка= 221;
	kbДвоеточие	= 186; kbКавычка 	= 222; kbВертикальнаяПолоса	= 220;
	kbЗапятая 	= 188; kbТочка = 190; kbСлэш 	= 191;
	kbМинус		= 189; kbРавно = 187;
	kbОбратныйСлэш = 226;


	CR = Симв(13)+Симв(10);

КонецПроцедуры


//Создает объект заданного типа
//
Функция НовыйОбъект(ИмяТипа) Экспорт
	возврат глФабрикаОбъектов.Новый(ИмяТипа);
КонецФункции

//_____________________________________________________________________________
//Функция глВзятьКонтекст
//Назначение:
//Параметры:
//Конт    надо передать контекст
//
//Возвращает:
//Контекст
Функция глВзятьКонтекст(Конт) экспорт
	возврат Конт;
КонецФункции //глВзятьКонтекст

Процедура глОткрытьФормуСписка(ВидОбъектов,ИмяФормы,Параметры="") Экспорт

	Объект=СоздатьОбъект(ВидОбъектов);
	Объект.ОткрытьФормуОбъекта(ИмяФормы,Параметры);

КонецПроцедуры


//РАБОТА С СОБЫТИЯМИ
//Если ИмяМенеджера="Драйверы" то обработка должна производиться менеджером событий драйверов
//В противном случае обработка должна производиться глобальным обработчиком событий


Функция глПослатьСобытие(Издатель,Событие,ИмяМенеджера="",Адресат="") Экспорт

	Если ПустоеЗначение(Адресат)=1 Тогда
		Событие.Адресат=Адресат;
		Если ИмяМенеджера="" Тогда
			глМенеджерСобытий.ПослатьСобытие(Издатель,Событие);
		ИначеЕсли ИмяМенеджера="Регистратор" Тогда
			глМенеджерСобытийРегистратора.ПослатьСобытие(Издатель,Событие);
		КонецЕсли;
	Иначе
		Событие.Адресат=Адресат;
		Адресат.ВнешнееСобытие(Издатель,Событие);
	КонецЕсли;
	Возврат Событие;
КонецФункции

Процедура глСобытиеОбработано(Событие) Экспорт
	Попытка
		Событие.Обработано=1;
	Исключение
	КонецПопытки;
КонецПроцедуры

Процедура глПодписатьсяНаСобытия(КОП,ИмяМенеджера="") 		 Экспорт
	Если ИмяМенеджера="" Тогда
		глМенеджерСобытий.ДобавитьОбработчикСобытия(КОП,"ВнешнееСобытие");
	ИначеЕсли ИмяМенеджера="Регистратор" Тогда
		глМенеджерСобытийРегистратора.ДобавитьОбработчикСобытия(КОП,"ВнешнееСобытие");
	Иначе
		Сообщить("Неизвестный менеджер событий "+ИмяМенеджера,"!");
	КонецЕсли;
КонецПроцедуры

Процедура глОтписатьсяОтСобытий(КОП,ИмяМенеджера="") 		 Экспорт
	Если ИмяМенеджера="" Тогда
		глМенеджерСобытий.УдалитьОбработчикСобытия(КОП,"ВнешнееСобытие");
	ИначеЕсли ИмяМенеджера="Регистратор" Тогда
		глМенеджерСобытийРегистратора.УдалитьОбработчикСобытия(КОП,"ВнешнееСобытие");

	Иначе
		Сообщить("Неизвестный менеджер событий "+ИмяМенеджера,"!");
	КонецЕсли;
КонецПроцедуры

//создает событие типа Команда
Функция глПослатьКоманду(Издатель,ИмяКоманды,ДопДанные="",ИмяМенеджера="",Адресат="",ДопДанные1="",ДопДанные2="") Экспорт
	Событие= НовыйОбъект("СобытиеКоманда");
	Событие.Описатель.Команда=ИмяКоманды;
	Событие.Описатель.Данные=ДопДанные;
	Событие.Описатель.Данные1=ДопДанные1;
	Событие.Описатель.Данные2=ДопДанные2;

	глПослатьСобытие(Издатель,Событие,ИмяМенеджера,Адресат);
	Возврат Событие;
КонецФункции



//Выводит сообщенией в окно сообщений
//в режиме отладки еще и пишет их в файл
Процедура Сообщить(Сообщ,Маркер="") Экспорт
	Если (Debug=1)ИЛИ (DebugLog=1) Тогда
		глПослатьКоманду("Сообщить()","СообщитьСобытие",,"Регистратор",,Сообщ,Маркер);
	Иначе
		Message(Сообщ,Маркер);
	КонецЕсли;
КонецПроцедуры


Процедура глОчиститьПодписку(КОП="",ИмяМенеджера="") Экспорт
	Если ИмяМенеджера="" Тогда
		Если ПустоеЗначение(КОП)=1 Тогда
			глМенеджерСобытий.Очистить();
		Иначе
			глМенеджерСобытий.УдалитьОбработчикСобытия(КОП, "ВнешнееСобытие");
		КонецЕсли;
	ИначеЕсли ИмяМенеджера="Регистратор" Тогда
		Если ПустоеЗначение(КОП)=1 Тогда
			глМенеджерСобытийРегистратора.Очистить();
		Иначе
			глМенеджерСобытийРегистратора.УдалитьОбработчикСобытия(КОП, "ВнешнееСобытие");
		КонецЕсли;

	Иначе
		Сообщить("Неизвестный менеджер событий "+ИмяМенеджера,"!");
	КонецЕсли;

КонецПроцедуры


//Пишет события в лог-файл
//в режиме отладки выводит сообщения в окно сообщений
Процедура глЗаписатьСобытие(Источник,ОписаниеСобытия,ДопИнфо="") Экспорт
	глПослатьКоманду(Источник,"ЗаписатьСобытие",ОписаниеСобытия,"Регистратор",,ДопИнфо);
КонецПроцедуры


//Процедура Дебаг
//Назначение:
//В режиме отладки выводит отладочные сообщения. в рабочем режиме ничего не делает.
//После окончания отладки рекомендуется убрать вызовы процедуры из программных модулей
//Если не убирать, то тоже ничего страшного не произойдет.
//Параметры:
//Сообщ
//
Процедура глДебаг(Сообщ,Источник="") экспорт
	Если (Debug=1)ИЛИ (DebugLog=1) Тогда
		Если Источник="" Тогда
			глПослатьКоманду(,"СообщитьСобытие",Источник,"Регистратор",,Сообщ);
		Иначе
			глПослатьКоманду(,"ЗаписатьСобытие",Источник,"Регистратор",,Сообщ);
		КонецЕсли;

	КонецЕсли;  //
КонецПроцедуры //Дебаг



//вызывается после задержки при нажатими кнопки клавиатуры
Процедура ОбработкаКлавиатуры() Экспорт
	Попытка
		//глДрайверы.Клавиатура.ОтключитьПроверкуКлавиатуры();
		глДрайверы.Клавиатура.ОбработкаКлавиатуры();
	Исключение
		глДебаг(""+ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры


//_____________________________________________________________________________
//Функция
//Назначение:
//Параметры:
//  Путь к файлу с возможными макропеременными %ROOT% и %ETC%
//  %ROOT%=КаталогИб()
//  %ETC%=КаталогИБ()+"etc"
//Возвращает:
//
Функция глОбработатьМакроСтроку(Стр) Экспорт
Перем RootPath;
	RootPath=КаталогИб();
	RootPath=Лев(RootPath,СтрДлина(RootPath)-1);

	Рез=СтрЗаменить(Стр,"%VERSION%",Константа.НомерВерсии);
	Рез=СтрЗаменить(Рез,"%DATE%",ТекущаяДата());
	Рез=СтрЗаменить(Рез,"%DATE-%",СтрЗаменить(ТекущаяДата(),".","-"));
	Рез=СтрЗаменить(Рез,"%DATE<%",Формат(ТекущаяДата(),"ДГГГГММДД"));


	Если Найти(Рез,"%DATE<-%")>0 Тогда
		ДатаСтр=""+ДатаГод(ТекущаяДата())+"-"+Формат(ДатаМесяц(ТекущаяДата()),"Ч(0)2.0")+"-"+Формат(ДатаЧисло(ТекущаяДата()),"Ч(0)2.0");

		Рез=СтрЗаменить(Рез,"%DATE<-%",ДатаСтр);
	КонецЕсли;


	Рез=СтрЗаменить(Рез,"%TIME%",ТекущееВремя());
	Рез=СтрЗаменить(Рез,"%TIME-%",СтрЗаменить(ТекущееВремя(),":","-"));
	Рез=СтрЗаменить(Рез,"%MAIL%",Врег("online@rb-soft.ru"));
	Рез=СтрЗаменить(Рез,"%PHONE%","(3012)44-03-57");
	Рез=СтрЗаменить(Рез,"%ERT%","%ROOT%\ExtForms");

	Рез=СтрЗаменить(Рез,"%SKINS%","%ETC%\Skins");
	Рез=СтрЗаменить(Рез,"%ETC%","%ROOT%\Etc");
	Рез=СтрЗаменить(Рез,"%DB%","%ROOT%\DB");
	Рез=СтрЗаменить(Рез,"%TEMP%","%ROOT%\Temp");
	Рез=СтрЗаменить(Рез,"%DLL%","%ROOT%\Dll");
	Рез=СтрЗаменить(Рез,"%DOC%","%ROOT%\Doc");
	Рез=СтрЗаменить(Рез,"%INOUT%","%ROOT%\InOut");
	Рез=СтрЗаменить(Рез,"%SYSLOG%","%ROOT%\SYSLOG");
	Рез=СтрЗаменить(Рез,"%BACKUP%","%ROOT%\Backup");
	Рез=СтрЗаменить(Рез,"%CLASSES%","%ROOT%\Classes");
	Рез=СтрЗаменить(Рез,"%PICTURES%","%ROOT%\Pictures");
	Рез=СтрЗаменить(Рез,"%ROOT%",RootPath);
	Попытка
		НаименованиеПользователя=глПраваДоступа.ТекущийПользователь.Наименование;
	Исключение
		НаименованиеПользователя="Пользователь неизвестен";
	КонецПопытки;
	Рез=СтрЗаменить(Рез,"%USER%",НаименованиеПользователя);
	Возврат СокрП(Рез);
КонецФункции


//глПредупреждение(<Текст_сообщения>,<Таймаут>,<ТипИконки>,<ТекстЗаголовка>)
//Назначение:
//Вывести окно предупреждения (модальное).
//Параметры:
//<Текст_вопроса> - cтрока текста предупреждения;
//<Таймаут> - число секунд времени показа окна предупреждения (если опущен или 0, то без ограничения).
//ТипИконки - необязательный. Номер типа иконки
//			  0 - Information. По умолчанию
//			  1 - Exclamation
//            2 - Error
//            3 - Delete
//            4 - Question
//            5 - Restricted
//            6 - Stop
//ТекстЗаголовка - необязательный. Текст заголовка окна

Функция  глПредупреждение(ТекстСообщения,Таймаут=0,ТипИконки=0,ТекстЗаголовка="") Экспорт
	Попытка
		глДиалоги.ОкноПредупреждение(ТекстСообщения,Таймаут,ТипИконки,ТекстЗаголовка);
	Исключение
		DoMessageBox(ТекстСообщения,Таймаут);
	КонецПопытки;
КонецФункции


//глВопрос(<Текст_вопроса>,<Режим>,<Таймаут>,<ТипИконки>,<ТекстЗаголовка>)
//Назначение:
//Вывести окно вопроса и получить ответ.
//Возвращает ответную реакцию в виде числа или строки, в соответствии с заданием параметра <Режим>:
//-1 или 'Таймаут' ('Timeout'), если закончилось время ожидания ответа;
//1 или 'ОК' ('ОК'), если если нажата кнопка OK;
//2 или 'Отмена' ('Cancel'), если нажата кнопка Отмена;
//3 или 'Стоп' ('Abort'), если нажата кнопка Стоп;
//4 или 'Повтор' ('Retry'), если нажата кнопка Повтор;
//5 или 'Пропустить' ('Ignore'), если нажата кнопка Пропустить;
//6 или 'Да' ('Yes'), если нажата кнопка Да;
//7 или 'Нет' ('No'), если нажата кнопка Нет.
//Параметры:
//<Текст_вопроса> - cтрока текста вопроса;
//<Режим> - определяет набор кнопок диалога в виде числа или строки (в скобках английское написание):
//  0 или 'ОК' ('ОК') - кнопка OK;
//  1 или 'ОК+Отмена' ('OK+Cancel') - кнопки OK и Отмена;
//  2 или 'Стоп+Повтор+Пропустить' ('Abort+Retry+Ignore') - кнопки Стоп, Повтор, Пропустить;
//  3 или 'Да+Нет+Отмена' ('Yes+No+Cancel') - кнопки Да, Нет, Отмена;
//  4 или 'Да+Нет' ('Yes+No') - кнопки Да, Нет;
//  5 или 'Повтор+Отмена' ('Retry+Cancel') - кнопки Повтор, Отмена;
//  (любое другое значение или отсутствие параметра равносильно  0);
//<Таймаут> - число секунд времени ожидания ответа (если опущен или 0, то без ограничения).
//ТипИконки - необязательный. Номер типа иконки
//			  0 - Information
//			  1 - Exclamation
//            2 - Error
//            3 - Delete
//            4 - Question. По умолчанию
//            5 - Restricted
//            6 - Stop
//ТекстЗаголовка - необязательный. Текст заголовка окна

Функция глВопрос(ТекстСообщения,Режим="Да+Нет",Таймаут=0,ТипИконки=4,ТекстЗаголовка="",КнопкаПоУмолчанию="") Экспорт

	Попытка
		Возврат глДиалоги.ОкноВопрос(ТекстСообщения,Режим,Таймаут,ТипИконки,ТекстЗаголовка,КнопкаПоУмолчанию);
	Исключение
		Возврат DoQueryBox(ТекстСообщения,Режим,Таймаут);
	КонецПопытки;
КонецФункции


Процедура глЗаблокировать () экспорт
	//глОбменДанными.ОтключитьожиданиеЗагрузки();
	глПраваДоступа.Авторизация(1);
	//глОбменДанными.ВключитьОжиданиеЗагрузки();
КонецПроцедуры // Заблокировать

//процедура периодической проверки на поступление новых данных
Процедура ОжиданиеЗагрузки() Экспорт
	Если глОбменДанными.ЕстьДанныеДляЗагрузки()=1 Тогда
		глОбменДанными.ЗагрузкаДанных(1);
	КонецЕсли;
КонецПроцедуры //ОжиданиеЗагрузки


Процедура глПриНажатииКнопкиКлавиатуры(Конт,пКодКлавиши,Alt,Shift,Ctrl) Экспорт
	глДрайверы.Клавиатура.ДобавитьВБуфер(Конт,пКодКлавиши,Alt,Shift,Ctrl);
КонецПроцедуры


Процедура ПриНажатииКнопкиКлавиатуры(пКодКлавиши,Alt,Shift,Ctrl,пСимвол,пФлагСтандартнойОбработки) Экспорт
	пФлагСтандартнойОбработки=0;
	глПриНажатииКнопкиКлавиатуры(Контекст,пКодКлавиши,Alt,Shift,Ctrl);
КонецПроцедуры


Процедура глОбработкаВнешнегоСобытия(Конт,Источник,Событие,Данные) Экспорт
	глДрайверы.ОбработкаВнешнегоСобытия(Конт, Источник,Событие,Данные);
КонецПроцедуры


//******************************************************************************
// ОбработкаВнешнегоСобытия()
//
// Параметры:
//У нас у драйвера сканера установлено свойство OldVersion=FALSE
//Поэтому:
//
//Источник - строка с описанием типа устройства от которого пришло событие
//Возможные значения от драйвера сканера штрихкода:
//BarCodeScaner,MagneticStyripeCardReader,KeyPad,RadioReader
//
//Событие - Строка с описанием типа события
//Возможные значения
// BarCodeValue,MagneticStripeCardValue, ScanCode
//Данные  - Номер события в буфере драйвера сканера
//
//
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  ТекстОписания
//
Процедура ОбработкаВнешнегоСобытия(Источник,Событие,Данные)
	глОбработкаВнешнегоСобытия(Контекст, Источник,Событие,Данные);
КонецПроцедуры // ОбработкаВнешнегоСобытия()


Функция ВыбратьККМ(СписокККМ="") экспорт
	возврат глДрайверы.ВыбратьОбъект("ФормаВыбораККМ",СписокККМ);
КонецФункции

Процедура глРаботаСЯщиком(Режим) Экспорт



	Если Режим="Внесение" Тогда
		Попытка



			ККМ=ВыбратьККМ();
			Если ПустоеЗначение(ККМ)=0 Тогда
				Сумма=0;
				Если ВвестиЧисло(Сумма,"Введите сумму внесения",15,2)=1 Тогда
					Если Сумма>0 Тогда
						Если ККМ.Внесение(Сумма)=0 Тогда
							глПредупреждение("Сбой!
							|Устройство  : "+ККМ.ПоследняяОшибка()+"
							|Оборудование:"+ККМ.ИнтерфейсОборудования.ПоследняяОшибка());
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Исключение
			глДебаг(ОписаниеОшибки(),"Внесение");
		КонецПопытки;


	ИначеЕсли Режим="Выплата" Тогда
		Попытка


			ККМ=ВыбратьККМ();
			Если ПустоеЗначение(ККМ)=0 Тогда
				Сумма=0;
				Если ВвестиЧисло(Сумма,"Введите сумму внесения",15,2)=1 Тогда
					Если Сумма>0 Тогда
						Если ККМ.Выплата(Сумма)=0 Тогда
							глПредупреждение("Сбой!
							|Устройство  : "+ККМ.ПоследняяОшибка()+"
							|Оборудование:"+ККМ.ИнтерфейсОборудования.ПоследняяОшибка());
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Исключение
			глДебаг(ОписаниеОшибки(),"Выплата");
		КонецПопытки;

	ИначеЕсли Режим="Остаток" Тогда

		//пока делаем так. потом надо сделать покрасивей

		ТЗ=СоздатьОбъект("ТаблицаЗначений");
		ТЗ.НоваяКолонка("ККМ");
		ТЗ.НоваяКолонка("Остаток");

		СЗ=глДрайверы.ПолучитьСписокУстройств("Устройство.ККМ");
		Для Инд=1 По СЗ.РазмерСписка() Цикл
			ККМ=СЗ.ПолучитьЗначение(Инд);

			ТЗ.НоваяСтрока();
			ТЗ.ККМ = ККМ.Данные.Наименование;
			ТЗ.Остаток = ККМ.СуммаНаличности();

		КонецЦикла;

		глБраузер(ТЗ);
	ИначеЕсли Режим="ОткрытьЯщик" Тогда

		Попытка


			ККМ=ВыбратьККМ();
			Если ПустоеЗначение(ККМ)=0 Тогда

				Если ККМ.ОткрытьДенежныйЯщик()=0 Тогда
					глПредупреждение("Сбой!
					|Устройство  : "+ККМ.ПоследняяОшибка()+"
					|Оборудование:"+ККМ.ИнтерфейсОборудования.ПоследняяОшибка());
				КонецЕсли;

			КонецЕсли;
		Исключение
			глДебаг(ОписаниеОшибки(),"ОткрытьЯщик");
		КонецПопытки;


	КонецЕсли;

КонецПроцедуры



Процедура ОтчетПоПродажам() Экспорт
	Отчет=СоздатьОбъект("Отчеты.ОтчетПоПродажам");
	Отчет.ОткрытьФормуОбъектаМодально();

КонецПроцедуры

//_____________________________________________________________________________
//Процедура ОткрытьГлавноеМеню
//Назначение:
//
//Параметры:
//
//
Процедура ОткрытьГлавноеМеню()

	//включаем наш таймер на ожидание
	глОбменДанными.ВключитьОжиданиеЗагрузки();

	Парам=СоздатьОбъект("СписокЗначений");
	Окна=СоздатьОбъект("Окна");

	Если Debug=0 Тогда
		глОбщиеФункции.ЗакрытьОкноСообщений();
		Окна.НаПереднийПлан();
	КонецЕсли;


	Если глНастройки.ПолучитьКакЧисло("SETTINGS/MODALMODE")=1 Тогда
		Окна.ВключитьМодальныйРежим();
	КонецЕсли;



	Команда="";

	ГлавноеМеню=СоздатьОбъект("ГлавноеМеню");
	ГлавноеМеню.КаталогКнопок(глСкин.КаталогСкина);
	ГлавноеМеню.ОткрытьФормуОбъектаМодально("ОсновнаяФорма",Команда);
КонецПроцедуры


//Из общей таблицы Классы создает файл описаний классов и записывает в файл ИмяФайла
Функция СоздатьФайлОписанийКлассов(ИмяФайла,Описание)
	Попытка

		ТаблицаКлассов=СоздатьОбъект("Таблица");
		ТаблицаКлассов.ИсходнаяТаблица("Классы");
		ТаблицаКлассов.Вывести();
		ТекстОписанийКлассов=СоздатьОбъект("Текст");

		ЗакончилиЧитать=0;НомерСтроки=1;
		Пока ЗакончилиЧитать=0 Цикл
			Область=ТаблицаКлассов.Область(НомерСтроки,1,НомерСтроки,1);
			Стр=СокрЛП(Область.Текст);
			НомерСтроки=НомерСтроки+1;
			Если ПустаяСтрока(Стр)=1 Тогда
				Продолжить;
			КонецЕсли;

			Если ВРЕГ(Стр)="END" Тогда
				ЗакончилиЧитать=1;
			Иначе
				Если (нрег(Лев(Стр,6))="class ")или(нрег(Лев(Стр,6))="класс ") Тогда
					ТекстОписанийКлассов.ДобавитьСтроку(Стр);
					ТекстОписанийКлассов.ДобавитьСтроку("{}");
				ИначеЕсли Нрег(Лев(Стр,10))="//#include" Тогда

					ПутьКФайлуВключения=СокрЛП(СтрЗаменить(Стр,"//#include ",""));
					Если Лев(ПутьКФайлуВключения,1)="/" Тогда
						ПутьКФайлуВключения=КаталогИБ()+СтрЗаменить(Сред(ПутьКФайлуВключения,2),"/","\");
					КонецЕсли;

					Если ФС.СуществуетФайл(ПутьКФайлуВключения)=1 Тогда
						ТекстОписанийКлассов.ДобавитьСтроку(Стр);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		//Проверяем, есть ли необходимость в обновлении файла описаний классов

		Перезаписать=0;

		Если ФС.СуществуетФайл(ИмяФайла)=1 Тогда
			ТекстЗаписанный=СоздатьОбъект("Текст");
			ТекстЗаписанный.Открыть(ИмяФайла);

			Если ТекстОписанийКлассов.КоличествоСтрок()<>ТекстЗаписанный.КоличествоСтрок() Тогда
				Перезаписать=1;
			Иначе

				Для Инд=1 По ТекстОписанийКлассов.КоличествоСтрок() Цикл
					СтрНаЗапись=ТекстОписанийКлассов.ПолучитьСтроку(Инд);

					СтрЗаписанный=ТекстЗаписанный.ПолучитьСтроку(Инд);
					Если СтрЗаписанный<>СтрНаЗапись Тогда
						Перезаписать=1;
						Прервать;
					КонецЕсли;
				КонецЦикла;

			КонецЕсли;

		Иначе
			Перезаписать=1;
		КонецЕсли;

		ТекстЗаписанный=0;


		Если Перезаписать=1 Тогда
			ТекстОписанийКлассов.Записать(ИмяФайла);
		КонецЕсли;


		Возврат 1;
	Исключение
		Описание=ОписаниеОшибки();
		Возврат 0;
	КонецПопытки;

КонецФункции



Функция ПроверитьКаталог(_ИмяКаталога)
	ИмяКаталога=глОбработатьМакроСтроку(_ИмяКаталога);

	Рез=глФайловаяСистема.СоздатьКаталог(ИмяКаталога);
	Если Рез=0 Тогда
		глЗаписатьСобытие("ПроверитьКаталог","Не удалось создать каталог: "+ИмяКаталога,глФайловаяСистема.ПоследняяОшибка());
	ИначеЕсли Рез=1 Тогда
		глЗаписатьСобытие("ПроверитьКаталог","Создание каталога",ИмяКаталога);
	КонецЕсли;
	Возврат Рез;
КонецФункции

//Создает служебные каталоги в случае их отсутствия
Функция ПроверитьСлужебныеКаталоги()
	Возврат ПроверитьКаталог("%ETC%")
	*ПроверитьКаталог("%ETC%\PrnForms")
	*ПроверитьКаталог("%ETC%\PrnForms\Штрих-М")
	*ПроверитьКаталог("%ETC%\PrnForms\Штрих-Мини")
	*ПроверитьКаталог("%ETC%\PrnForms\Штрих-ФР")
	*ПроверитьКаталог("%ETC%\Skins")
	*ПроверитьКаталог("%ETC%\Skins\Default")
	*ПроверитьКаталог("%BACKUP%")
	*ПроверитьКаталог("%PICTURES%")
	*ПроверитьКаталог("%PICTURES%\QuickGoods")
	*ПроверитьКаталог("%DLL%")
	*ПроверитьКаталог("%DB%")
	*ПроверитьКаталог("%TEMP%")
	*ПроверитьКаталог("%CLASSES%")
	*ПроверитьКаталог("%DOC%");
КонецФункции


Функция ЗагрузитьАктивБатон()
	Попытка
		АктивБатон=СоздатьОбъект("BTNENH.BtnEnhCtrl.4");
	Исключение
		//Не установлена библиотека 3D Active Button Magic

		глЗаписатьСобытие("Старт","Начало установки библиотеки 3D Active Button Magic.");

		ФайлБиблиотеки=глОбработатьМакроСтроку("%DLL%\3dabm9u.ocx");
		Если ФС.СуществуетФайл(ФайлБиблиотеки)=0 Тогда

			глЗаписатьСобытие("Старт","Нет файла библиотеки ""3D Active Button Magic""",ФайлБиблиотеки);


			Предупреждение("Нет файла библиотеки ""3D Active Button Magic""
			|"+ФайлБиблиотеки);
			Возврат 0;
		КонецЕсли;
		ФС.КопироватьФайл(ФайлБиблиотеки,КаталогПрограммы()+"3dabm9u.ocx",1);
		ФС.УстТекКаталог(КаталогПрограммы());
		ЗапуститьПриложение("regsvr32.exe /i /s 3dabm9u.ocx");
		Попытка
			АктивБатон=СоздатьОбъект("BTNENH.BtnEnhCtrl.4");

			глЗаписатьСобытие("Старт","Установлена библиотека 3D Active Button Magic.");

			Предупреждение("Установлена библиотека 3D Active Button Magic.
			|"+КаталогПрограммы()+"3dabm9u.ocx",10);
		Исключение

			глЗаписатьСобытие("Старт","Не удалось установить библиотеку ""3D Active Button Magic""",ФайлБиблиотеки);

			Предупреждение("Не удалось установить библиотеку ""3D Active Button Magic""
			|"+ФайлБиблиотеки+"
			|Попробуйте установить вручную.");
			Возврат 0;

		КонецПопытки;

	КонецПопытки;
	возврат 1;
КонецФункции	// гл

//1.Проверяет наличие пользователя с именем Администратор. При необходимости создает пользователя Администратор
//2.Проверяет наличие пользователей с правом входа в программу и правом администрирования.
//3.При необходимости наделяет такими правами пользователя Администратор
Процедура глПроверкаПравПользователей() Экспорт
	//1.Проверяем наличие пользователя с ролью admin.
	//При необходимости создаем пользователя Администратор
	ТЗ=глБД.ПолучитьЗаписиИзТаблицы("USERS");
	ИД="";
	ИДПервогоАдмина="";
	ТЗ.ВыбратьСтроки();
	Пока ТЗ.ПолучитьСтроку() = 1 Цикл
		Если (СОКРЛП(ТЗ.IDRole)="admin")и(ТЗ.Active=1) Тогда
			ИД=ТЗ.ID;
			Прервать;
		Иначе
			Если (СОКРЛП(ТЗ.IDRole)="admin")И(ИДПервогоАдмина="") Тогда
				ИДПервогоАдмина=ТЗ.ID;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;



	Админ=СоздатьОбъект("Пользователь");
	Если ИД="" Тогда

		Если ИДПервогоАдмина="" Тогда
			//нет вообще админа
			//Создаем юзера-админа
			Админ.Данные.ИД="admin";
			Админ.Данные.Наименование="Администратор";
			Админ.Данные.ФИО="Администратор";
			Админ.Данные.Активный=1;
			Админ.Данные.Полномочия="admin";
			Админ.Данные.Пароль=глПраваДоступа.ЗашифроватьПароль("");
			Админ.Записать();
		Иначе
			//нет админа с правами кассира, но админ все таки есть
			Рез=Админ.Прочитать(ИДПервогоАдмина);
			Если ПустоеЗначение(Рез)=0 Тогда
				Если Админ.Данные.Активный=0 Тогда
					//Делаем его ативным
					Админ.Данные.Активный=1;
					Админ.Записать();

					глПредупреждение("Предоставлены права кассира пользователю "+Админ.Данные.ФИО+"
					|логин:"+Админ.Данные.ИД);
				КонецЕсли;

			Иначе
				//не может быть. сбой какой-то
			КонецЕсли;
		КонецЕсли;
	Иначе
		// нашли юзера админа с правами кассира
	КонецЕсли;


	//2.Проверяет наличие пользователей с правом входа в программу и правом администрирования.

	РольАдмин=СоздатьОбъект("Роль");
	Рез=РольАдмин.Прочитать("admin");

	Если Рез=0 Тогда

		РольАдмин.Данные.ИД="admin";
		РольАдмин.Данные.Наименование="Администратор";
		РольАдмин.УстановитьВсеПрава();
		РольАдмин.Записать();
	Иначе
		//у админской роли должны быть права по крайней мере настраивать программу и выключить программу

		НадоЗаписать=0;
		Если РольАдмин.ЕстьПраво("ЗавершениеРаботы.ВыходВОС")=0 Тогда
			РольАдмин.УстановитьПраво("ЗавершениеРаботы.ВыходВОС");
			НадоЗаписать=1;
		КонецЕсли;
		Если РольАдмин.ЕстьПраво("ЗавершениеРаботы.ВыходВ1С")=0 Тогда
			РольАдмин.УстановитьПраво("ЗавершениеРаботы.ВыходВ1С");
			НадоЗаписать=1;
		КонецЕсли;
		Если РольАдмин.ЕстьПраво("Настройка.Роли")=0 Тогда
			РольАдмин.УстановитьПраво("Настройка.Роли");
			НадоЗаписать=1;
		КонецЕсли;
		Если РольАдмин.ЕстьПраво("Настройка.Пользователи")=0 Тогда
			РольАдмин.УстановитьПраво("Настройка.Пользователи");
			НадоЗаписать=1;
		КонецЕсли;

		Если НадоЗаписать=1 Тогда
			РольАдмин.Записать();
		КонецЕсли;


	КонецЕсли;

КонецПроцедуры


Функция глПодключитьсяКБазеДанных() Экспорт
	Попытка
	//Читаем параметры базы данных

		ТипБазыДанных=глНастройки.Получить("SETTINGS/DATABASETYPE");
		Если ПустоеЗначение(ТипБазыДанных)=0 Тогда
			ТипБазыДанных=ВРЕГ(ТипБазыДанных);
		Иначе
			ТипБазыДанных="DBF";
		КонецЕсли;  //ПустоеЗначение(Значение)=1

		ИмяКласса="БД_"+ТипБазыДанных;
		глБД=СоздатьОбъект(ИмяКласса);


		ИмяФайлаОписанияБД=глНастройки.Получить("PROGRAMMING/DATABASESTRUCTUREFILE");
		Если ПустоеЗначение(ИмяФайлаОписанияБД)=0 Тогда

			ТипФайла=глНастройки.Получить("PROGRAMMING/DATABASESTRUCTUREFILETYPE");
			Если ПустоеЗначение(ТипФайла)=1 Тогда
				ТипФайла="txt";
			КонецЕсли;


			Попытка
				ПоказыватьНастройку=Число(глНастройки.Получить("PROGRAMMING/DATABASESTRUCTURESHOWFLAG"));
				Если ПоказыватьНастройку<>0 Тогда
					ПоказыватьНастройку=1;
				КонецЕсли;
			Исключение
				ПоказыватьНастройку=0;
				глЗаписатьСобытие("PROGRAMMING/DataBaseStructureShowFlag",ОписаниеОшибки(),"Неверный параметр. Принимаем значение по умолчанию - 0");
			КонецПопытки;

			глБД.ЗаписатьСтруктуруБазы(глОбработатьМакроСтроку(ИмяФайлаОписанияБД),ТипФайла,ПоказыватьНастройку);
		КонецЕсли;

	//Подключаем базу данных
		Если глБД.Подключение()=0 Тогда

			ТекстОшибки="Не удалось подключиться к базе данных.
			|ИмяКласса="+ИмяКласса+"
			|Строка подключения="+глБД.СтрокаПодключения+"
			|Код ошибка="+глБД.КодОшибки+"
			|Состояние ="+глБД.СостояниеПодключения+"
			|"+глБД.ПоследняяОшибка();
			глПредупреждение(ТекстОшибки+"
			|
			|Возможно не установлена библиотека Microsoft OLEDB Provider for Foxpro
			|или база заблокирована другой	программой.");
			глЗаписатьСобытие("глБД.Подключение()",ТекстОшибки);
			возврат 0;

		Иначе

			ВидОплатыНаличными=глБД.ПолучитьВидОплатыПоКоду("0");
			Если ПустоеЗначение(ВидОплатыНаличными)=1 Тогда
				ВидОплатыНаличными=глБД.НаличныйВидОплаты();
				глБД.ЗаписатьОбъект(ВидОплатыНаличными);
			КонецЕсли;
		КонецЕсли;
	Исключение
		СтатусВозврата(0);
		глПредупреждение("Экземпляр класса для работы с базой данных не создан.
		|класс "+ИмяКласса+"
		|"+ОписаниеОшибки());
		возврат 0;
	КонецПопытки;

	возврат 1;
КонецФункции

Процедура ПриНачалеРаботыСистемы()

	НомерВерсии=Прав(Метаданные.Идентификатор,4);


	//создадим файл описания классов
	//описание классов храним в конфигурации в общей таблице Классы

	ИмяФайла=КаталогИБ()+"DefCls.prm";
	Описание="";
	Если СоздатьФайлОписанийКлассов(ИмяФайла,Описание)=0 Тогда
		Предупреждение("Не удалось создать файл описаний классов "+ИмяФайла+"
		|Дальнейшая работа программы невозможна.
		|"+Описание);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;

	Если ЗагрузитьВнешнююКомпоненту(КаталогИБ()+"DLL\1CPP.dll") = 0 Тогда
		глПредупреждение("Обязательная компонента 1C++ не загружена.
		|Компонента должна находиться в каталоге:
		|"+КаталогИБ()+"\DLL");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;

	МетаИнфо = СоздатьОбъект("MetaInfoClasses");
	МетаИнфо.УстановитьТекУстановки(1, 0, 0);
	Версия1СПП = МетаИнфо.ПолучитьВерсию();

	Если Версия1СПП < ТребуемаяВерсия1СПП(3,2,2,0) Тогда
		глПредупреждение("Версия компоненты 1С++ должна быть не ниже 3.2.2.0");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;

	ИнициализироватьКлавиатуру();


	глМенеджерСобытий=СоздатьОбъект("МенеджерСобытий");
	глМенеджерСобытийРегистратора=СоздатьОбъект("МенеджерСобытий");


	Если ЗагрузитьВнешнююКомпоненту(КаталогИБ()+"DLL\FormEx.dll") = 0 Тогда
		глПредупреждение("Обязательная компонента FormEx не загружена.
		|Компонента должна находиться в каталоге:
		|"+КаталогИБ()+"DLL");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;

	Сервис=СоздатьОбъект("Сервис");


	Если  Сервис.ВерсияFormex()<ТребуемаяВерсияFormex(2,0,5,99) Тогда
		глПредупреждение("Версия компоненты Formex должна быть не ниже 2.0.5.99");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;

	ИмяФайлаНастройки=КаталогИБ()+"ETC\rmkconfig.ini";
	Текст=СоздатьОбъект("Текст");
	Если ФС.СуществуетФайл(ИмяФайлаНастройки)=0 Тогда
		//файла настройки нет
		ТаблицаНастроек=СоздатьОбъект("Таблица");
		ТаблицаНастроек.ИсходнаяТаблица("rmkconfig_ini");
		ТаблицаНастроек.Вывести();

		ТаблицаНастроек.Записать(ИмяФайлаНастройки,"TXT");
	Иначе
		Текст.Открыть(ИмяФайлаНастройки);
	КонецЕсли;



	Инд=0;
	ЧитаемСекцию=0;
	Для Инд=1 по Текст.КоличествоСтрок() Цикл
	    Стр=Текст.ПолучитьСтроку(Инд);
		Если ВРЕГ(СокрЛП(Стр))="[PROGRAMMING]" Тогда
			ЧитаемСекцию=1;
		ИначеЕсли ЧитаемСекцию=1 Тогда
			Если СтрЗаменить(ВРЕГ(СокрЛП(Стр))," ","")="DEBUG=1" Тогда
		    	Debug=1;
			КонецЕсли;  //

			Если СтрЗаменить(ВРЕГ(СокрЛП(Стр))," ","")="DEBUGLOG=1" Тогда
		    	DebugLog=1;
			КонецЕсли;  //
		КонецЕсли;  //
	КонецЦикла;



	глРегистраторСобытий=СоздатьОбъект("Файл.Лог");
	глРегистраторСобытий.Инит(глОбработатьМакроСтроку("%SYSLOG%\Log_%DATE-%.txt"));

	Если (DebugLog=1)Или(Debug=1) Тогда
		глРегистраторСобытий.ВыводВОкноСообщений=1;
	КонецЕсли;

	глОбщиеФункции=СоздатьОбъект("Общие");
	глСтроки=СоздатьОбъект("Общие.Строки");
	глФабрикаОбъектов = СоздатьОбъект("Фабрика");
	глФайловаяСистема=СоздатьОбъект("ФайловаяСистема");


	глПодписатьсяНаСобытия(глРегистраторСобытий,"Регистратор");
	глЗаписатьСобытие("Старт","Запуск программы");


	глЗаписатьСобытие("Старт","Проверка служебных каталогов");
	Если ПроверитьСлужебныеКаталоги()=0 Тогда
		СтатусВозврата(0);
		Предупреждение("Не удалось создать некоторые служебные каталоги.
		|Возможно, требуется запустить программу с правами администратора системы.
		|Подробности в файле "+глРегистраторСобытий.ИмяФайла);
		Возврат;
	КонецЕсли;

	Если ЗагрузитьАктивБатон()=0 Тогда
		СтатусВозврата(0);
		возврат;
	КонецЕсли;




	Если Константа.НомерВерсии<>НомерВерсии Тогда
		//
		//Вызвать обновление конфигурации
		//
		Константа.НомерВерсии=НомерВерсии;
	КонецЕсли;




	УправлениеНастройками=СоздатьОбъект("УправлениеНастройками");
	Если Debug=1 Тогда
		УправлениеНастройками.Установить("Отладка",1);
	Иначе
		УправлениеНастройками.Установить("Отладка",0);
	КонецЕсли;



	глУниверсальныйОтчет=СоздатьОбъект("Отчеты.УниверсальныйОтчет");

	Состояние("Чтение настроек РМК");

	//Читаем настройки программы

	глНастройки=СоздатьОбъект("НастройкиРМК");

	ИмяФайлаНастройкиПрограммы=глОбработатьМакроСтроку("%ETC%\rmkconfig.ini");
	Если глНастройки.ПрочитатьФайл(ИмяФайлаНастройкиПрограммы)=0 Тогда

		глПредупреждение("Не удалось прочитать настройки программы. Обратитесь к администратору.
		|__________________
		|"+глНастройки.ПоследняяОшибка());
		СтатусВозврата(0);
		возврат;
	КонецЕсли;

	Состояние("Загрузка драйверов...");

	глДрайверы=СоздатьОбъект("Драйверы");

	Если глДрайверы.ЗагрузитьКомпоненту("DialMail", "AddIn.DialMail", "DialMail.dll") = 0 Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;

	Если глДрайверы.ЗагрузитьКомпоненту("TableDoc", "AddIn.TableDoc", "TableDoc.dll") = 0 Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;


	глЛицензирование=СоздатьОбъект("Лицензирование.GNU");
	Если глЛицензирование.ЕстьПодтверждениеЛицензии()=0 Тогда
		Если глЛицензирование.ЗапроситьПодтверждениеЛицензии()=1 Тогда
			глЛицензирование.ЗаписатьПодтверждениеЛицензии();

			глЗаписатьСобытие("Старт","Лицензия подтверждена");
		Иначе
			глЗаписатьСобытие("Старт","Лицензия не подтверждена");
			СтатусВозврата(0);
			возврат;
		КонецЕсли;
	КонецЕсли;


	глИмяPOS=глНастройки.Получить("SETTINGS/POSNumber");

	//Загружаем систему отображения пользовательского интерфейса (скинов)

	Состояние("Чтение скина диалогов");
	глСкин=СоздатьОбъект("Скин");
	ИмяСкина=глНастройки.Получить("SETTINGS/SKIN");
	Если ПустоеЗначение(ИмяСкина)=0 Тогда
		глСкин.Инит(ИмяСкина);
	КонецЕсли;  //ПустоеЗначение(Значение)=1

	Окна=СоздатьОбъект("Окна");

	Если глНастройки.ПолучитьКакЧисло("SETTINGS/SHOWMENU1C")=0 Тогда
		глОбщиеФункции.ВидимостьМеню(0);
	ИначеЕсли глНастройки.ПолучитьКакЧисло("SETTINGS/SHOWMENU1C")=1 Тогда
		глОбщиеФункции.ВидимостьМеню(1);
	КонецЕсли;

	Если глНастройки.ПолучитьКакЧисло("SETTINGS/SHOWPANEL1C")=0 Тогда
		Окна.ПоказыватьПанели(0);
	ИначеЕсли глНастройки.ПолучитьКакЧисло("SETTINGS/SHOWPANEL1C")=1 Тогда
		Окна.ПоказыватьПанели(1);
	КонецЕсли;

	Если глНастройки.ПолучитьКакЧисло("SETTINGS/SHOWSTATUS1C")=0 Тогда
		Окна.ПоказыватьСтрокуСостояния(0);
	ИначеЕсли глНастройки.ПолучитьКакЧисло("SETTINGS/SHOWSTATUS1C")=1 Тогда
		Окна.ПоказыватьСтрокуСостояния(1);
	КонецЕсли;

	Если глНастройки.ПолучитьКакЧисло("SETTINGS/WINDOWMENU")=0 Тогда
		Окна.МенюОкна(,0,0,0,0);
	ИначеЕсли глНастройки.ПолучитьКакЧисло("SETTINGS/WINDOWMENU")=1 Тогда
		Окна.МенюОкна(,1,1,1,1);
	КонецЕсли;




	Если глНастройки.ПолучитьКакЧисло("SETTINGS/MODALMODE")=1 Тогда
		Окна.ВключитьМодальныйРежим();
	КонецЕсли;

	глСкин.ПоказатьОбои();


	глДиалоги=0;

	//Подключаем систему отображения диалогов

	глДиалоги=СоздатьОбъект("Диалоги");

    Состояние("Подключение к базе данных...");

	лОборудованиеПодключено=0;

	ТекстОшибки="";


	Если глПодключитьсяКБазеДанных()=0 Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;



	глДрайверы.Клавиатура.ОтключитьПроверкуКлавиатуры();

	Состояние("Загрузка драйверов...");

	//Загружаем все необходимые драйверы для работы с торговым и прочим оборудованием
	Если глДрайверы.Загрузить()=0 Тогда
	    глПредупреждение("Не все драйверы загружены.
		|"+глДрайверы.ПоследняяОшибка());

	//Настраиваем загруженные драйверы
	ИначеЕсли глДрайверы.НастроитьДрайверы()=0 Тогда
		глПредупреждение("Не все драйверы оборудования удалось настроить.
		|"+глДрайверы.ПоследняяОшибка());
	Иначе
		лОборудованиеПодключено=1;
	КонецЕсли;  //

	Месага="";

	//Загружаем систему обмена данными с бакофисом


	Попытка
		глОбменДанными=СоздатьОбъект("ОбменДанными");
	Исключение
		глДебаг(ОписаниеОшибки());
		глПредупреждение("Система обмена данными не запущена из-за сбоя.
		|"+ОписаниеОшибки());
		СтатусВозврата(0);
		ЗавершитьРаботуСистемы();
		Возврат;
	КонецПопытки;



	////Загружаем систему контроля прав доступа

	глПраваДоступа=СоздатьОбъект("ПраваДоступа");

	глПодписатьсяНаСобытия(глБД);
	глПодписатьсяНаСобытия(глПраваДоступа);
	глПодписатьсяНаСобытия(глОбменДанными);

	глПроверкаПравПользователей();

	глДрайверы.Клавиатура.ВключитьПроверкуКлавиатуры();



	ЗагружатьЧекиНаСервер=глНастройки.ПолучитьКакЧисло("EXCHANGE/CopyChecksToServer");
	Если ЗагружатьЧекиНаСервер=1 Тогда

		Состояние("Подключение к серверу чеков...");

		ЕстьПодключение=глДрайверы.ПодключитьсяКСерверуЧеков();
		Если ЕстьПодключение=0 Тогда
			глДебаг("Не подключен сервер чеков."+глДрайверы.ПоследняяОшибка());
			глПредупреждение("Не подключен сервер чеков.
			|"+глДрайверы.ПоследняяОшибка(),10);
		КонецЕсли;
	КонецЕсли;


	Если глНастройки.ПолучитькакЧисло("PROGRAMMING/SaveCodeStatistics")=1 Тогда
		Состояние("Запись статистики исходных текстов...");

		ФайловаяСистема=СоздатьОбъект("ФайловаяСистема.Файл");
		ФайловаяСистема.ЗаписатьСтатистикуИсходныхТекстов(1);
	КонецЕсли;



	//////////////COPYRIGHT////////////////////
	//Для установки копирайтов в текстовые файлы модулей необходимо:
	//1. Декомпилировать 1cv7.md командой gcomp -d
	//команду запускать из каталога базы данных
	//В результате файл конфигурации будет декомпилирован и помещен в <Каталог ИБ>/SRC
	//2. Раскомментировать вызов процедуры УстановитьКопирайты();
	//3. Запустить 1C. В результате исходные тексты программных модулей будет вставлен текст копирайта
	//4. Собрать обратно MD-файл и заменить 1cv7.md.
	//Для сборки файла 1cv7.md использовать команду gcomp -с
	//команду запускать из каталога базы данных
	//будет создан файл 1cv7.new.md в каталоге базы данных
	//который можно переименовать в 1cv7.md и запустить 1С с новым MD
	//
	////////// Раскомментировать для установки копирайтов в исходные тексты /////////////////
	//
	//глЛицензирование.УстановитьКопирайты();
	//Предупреждение("Копирайты установлены");
	//возврат;
	////////////Конец установки копирайтов///////////////////////////////////////////////////


	//////////////ТЕСТ////////////////////

	//ДисконтнаяСистема=СоздатьОбъект("ДисконтнаяСистема");
	//Процент=ДисконтнаяСистема.ПолучитьСкидкуПоСуммеЧека(3500,ТекущаяДата(),ТекущееВремя());


	//Автоскидка=СоздатьОбъект("Автоскидка");
	//Автоскидка.Прочитать("bf2a748e-6c54-11df-bc95-001cc4dbd0e9");
	//Автоскидка.ОткрытьФормуОбъекта();


	////////////Блок тестирования////////////////////////////


	//Прогрессор=СоздатьОбъект("Прогрессор");
	//
	//Прогрессор.НачатьПроцесс("Процесс тестирования...",0,10000);
	//
	//Для Инд=0 По 10000 Цикл
	//	Прогрессор.ПоказатьПрогресс(Инд,"Итерация "+Инд+" из "+Прогрессор.Максимум());
	//КонецЦикла;
	//
	//глПредупреждение("ОК!");
	//Прогрессор.ЗавершитьПроцесс();


	//глРМК=СоздатьОбъект("РМК.Магазин");
	//глРМК.ОткрытьФормуОбъекта();

	//ККМ=глДрайверы.ПолучитьУстройствоПоВиду("Устройство.ККМ","FR1");
	//ККМ.ОткрытьФормуОбъекта();
	//Возврат;

	//глБД.ОткрытьФормуОбъекта();

	//Чек=СоздатьОбъект("Чек");
	//Чек.Прочитать("555a6654-fddf-4536-acc8-325d5309beba");
	//Чек.ОткрытьФормуОбъекта();

	//тестирование
	//глПраваДоступа.Авторизация(1);
    //глБраузер(глПраваДоступа);
	//ОтчетПоПродавцам();

	//ГлавноеМеню=СоздатьОбъект("ГлавноеМеню");
	//Парам="";
	//Рез=ГлавноеМеню.ОткрытьФормуОбъектаМодально("ОсновнаяФорма",Парам);
	//Если Рез=1 Тогда
	//
	//	глБраузер(Парам);
	//	//Предупреждение("Данные = "+Парам.Данные);
	//
	//КонецЕсли;


	//ККМ=СоздатьОбъект("Устройство.ККМ");
	//глБраузер(ККМ);
	//ККМ.ОткрытьФормуОбъектаМодально("Наличность");




	//для рабочей версии

	глЗаписатьСобытие("Старт","Завершен запуск программы");
	////
	глПраваДоступа.Авторизация(1);
	////
	//глВключитьРабочийЦикл();


	////////////////////////////////


	глОбменДанными.ВключитьОжиданиеЗагрузки();

	Парам=СоздатьОбъект("СписокЗначений");
	Окна=СоздатьОбъект("Окна");

	Если Debug=0 Тогда
		глОбщиеФункции.ЗакрытьОкноСообщений();
		Окна.НаПереднийПлан();
	КонецЕсли;


	Если глНастройки.ПолучитьКакЧисло("SETTINGS/MODALMODE")=1 Тогда
		Окна.ВключитьМодальныйРежим();
	КонецЕсли;



	Команда="";

	ГлавноеМеню=СоздатьОбъект("ГлавноеМеню");
	ГлавноеМеню.КаталогКнопок(глСкин.КаталогСкина);

	Рез=ГлавноеМеню.ОткрытьФормуОбъектаМодально("ОсновнаяФорма",Команда);



КонецПроцедуры  //ПриНачалеРаботыСистемы()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриЗавершенииРаботыСистемы()


	глЗаписатьСобытие("Завершение работы","Начало");

	глОбменДанными=0;


	Попытка
		глБД.Отключение();
	Исключение
		глЗаписатьСобытие("Завершение работы","Сбой при отключении базы данных.",ОписаниеОшибки());
	КонецПопытки;
	глДрайверы=0;
	глБД=0;
	глСкин=0;
	глДиалоги=0;
	глОбщиеФункции=0;
	глРМК=0;
	глПраваДоступа=0;
	глОбменДанными=0;
	глНастройки=0;

	глЗаписатьСобытие("Завершение работы","ОК");

	глРегистраторСобытий=0;
КонецПроцедуры // ПриЗавершенииРаботыСистемы()

Функция глПолучитьСквознойНомерДокумента() Экспорт
	НачатьТранзакцию();
	Рез=Константа.СчетчикЧеков+1;
	Константа.СчетчикЧеков=Рез;

	ЗафиксироватьТранзакцию();

	Возврат Рез;
КонецФункции

Функция глПолучитьНовыйНомерОплаты() Экспорт
	НачатьТранзакцию();
	Рез=Константа.СчетчикОплаты+1;
	Константа.СчетчикОплаты=Рез;

	ЗафиксироватьТранзакцию();

	Возврат Рез;
КонецФункции




Функция глПровестиОплаты(Сам) Экспорт



	Сам.УстановитьРежим(Перечисление.РежимыРМК.ОплатаПоПлатежнойСистеме);

	Сам.ОбновитьТаблицуОплатыРМК();

	ТаблицаОплаты=Сам.ТаблицаОплаты;
	ТаблицаТоваров=Сам.ТаблицаТоваров;

	СуммаЧека=ТаблицаТоваров.Итог("Всего");

	СуммаОплатыПроведеныхПлатежей=0;

	СуммаБезнал=0;
	ТаблицаОплаты.ВыбратьСтроки();
	Пока ТаблицаОплаты.ПолучитьСтроку() = 1 Цикл
		Если ТаблицаОплаты.ИД="0" Тогда
			Продолжить;
		ИначеЕсли ТаблицаОплаты.Объект.Данные.ТипОплаты=0 Тогда
			Продолжить;
		Иначе
			СуммаБезнал=СуммаБезнал+ТаблицаОплаты.Сумма;
		КонецЕсли;

	КонецЦикла;

	Если СуммаБезнал>СуммаЧека Тогда
		глПредупреждение("Сумма безналичных оплат больше суммы чека.");

		Перейти ~Выход;
	КонецЕсли;




	ТаблицаОплаты.ВыбратьСтроки();





	Пока ТаблицаОплаты.ПолучитьСтроку()=1 Цикл
		Если ТаблицаОплаты.Сумма=0 Тогда
			Продолжить;
		Иначе
			ОбъектОплата=ТаблицаОплаты.Объект;

			Если ПустоеЗначение(ОбъектОплата)=1 Тогда
				ТаблицаОплаты.ОплатаПроведена=1;
			ИначеЕсли ПустаяСтрока(ОбъектОплата.Данные.ПлатежнаяСистема)=1 Тогда
				ТаблицаОплаты.ОплатаПроведена=1;
			Иначе
				//ТУТ НАДО ПРОВОДИТЬ ПО ПЛАТЕЖНОЙ СИСТЕМЕ
				//НО В ЭТОМ ЦИКЛЕ ПРОСТО ПОМЕЧАЕМ ТЕ ОПЛАТЫ ЧТО ПРОВЕДЕНЫ
				Если ВРЕГ(ОбъектОплата.Данные.ПлатежнаяСистема)="RBSOFT_CARDS" Тогда

				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ТаблицаОплаты.ОплатаПроведена=1 Тогда
			СуммаОплатыПроведеныхПлатежей=СуммаОплатыПроведеныхПлатежей+ТаблицаОплаты.Сумма;
		КонецЕсли;
	КонецЦикла;


	Если СуммаЧека<=СуммаОплатыПроведеныхПлатежей Тогда
		//сумма проведенных платежей уже покрывает сумму чека
		//не надо проводить по платежной системе
		возврат 1;
	КонецЕсли;


	//Сам=Сам();
	ОплатыПрошли=1;




	ТаблицаОплаты.ВыбратьСтроки();

	Пока ТаблицаОплаты.ПолучитьСтроку()=1 Цикл


		Если ТаблицаОплаты.Сумма=0 Тогда
			Продолжить;
		Иначе
			ОбъектОплата=ТаблицаОплаты.Объект;

			Если ПустоеЗначение(ОбъектОплата)=1 Тогда



			ИначеЕсли ПустаяСтрока(ОбъектОплата.Данные.ПлатежнаяСистема)=1 Тогда



			ИначеЕсли ТаблицаОплаты.ОплатаПроведена=0 Тогда

				//здесь сумма оплаты ненулевая и она еще не проведена

				ИДПлатежнойСистемы=ОбъектОплата.Данные.ПлатежнаяСистема;
				ПлатежнаяСистема=глДрайверы.ПолучитьУстройствоПоВиду("Устройство.ПлатежнаяСистема",ИДПлатежнойСистемы);



				Если ПустоеЗначение(ПлатежнаяСистема)=1 Тогда
					Если глВопрос("Требовалось провести платеж по системе "+ИДПлатежнойСистемы+"
					|Доступ к платежной системе не был произведен.
					|Считать платеж проведенным?","Да+Нет")="Да" Тогда

						ТаблицаОплаты.ОплатаПроведена=1;
					Иначе
						ТаблицаОплаты.ОплатаПроведена=0;
						ТаблицаОплаты.Сумма=0;
					КонецЕсли;

				Иначе

					//есть объект Платежная система

					НомерОперации=ПлатежнаяСистема.НачатьОперацию();

					Если НомерОперации=0 Тогда

						глПредупреждение("Не удалось начать операцию платежа.
						|"+ПлатежнаяСистема.ПоследняяОшибка());

					Иначе

						НаименованиеСистемы=ПлатежнаяСистема.Данные.Наименование;

						СуммаПрошла=0;

						Попытка
							РезультатОплаты=ПлатежнаяСистема.Оплатить(НомерОперации,,ТаблицаОплаты.Сумма,СуммаПрошла);
						Исключение
							РезультатОплаты=0;
							Сам.УстановитьОшибку("Сбой при оплате.",ОписаниеОшибки());
						КонецПопытки;

						РезультатЗавершения=0;

						Если РезультатОплаты=1 Тогда

							РезультатЗавершения=ПлатежнаяСистема.ЗавершитьОперацию(НомерОперации);

							Если РезультатЗавершения=0 Тогда
								глПредупреждение("Не удалось завершить операцию.
								|"+ПлатежнаяСистема.ПоследняяОшибка());
								ОплатыПрошли = 0;
							Иначе
								ТаблицаОплаты.ОплатаПроведена=1;
								ТаблицаОплаты.Сумма=СуммаПрошла;
								ТаблицаОплаты.НомерОперации=НомерОперации;
							КонецЕсли;
						КонецЕсли;

						Если (РезультатЗавершения=0)Или(РезультатОплаты=0) Тогда

							//Не удалось провести
							//Такой чек надо либо попытаться снова отменить и провести оплаты
							//Либо отложить до устранения технических неполадок


							Если ПлатежнаяСистема.ОтменитьОперацию(НомерОперации)=0 Тогда

								глЗаписатьСобытие("глПровестиОплаты()","Отмена операции оплаты по платежной системе","Не удалось отменить операцию №"+НомерОперации+" на сервере."+ПлатежнаяСистема.ПоследняяОшибка());
								глПредупреждение("Не удалось отменить операцию №"+НомерОперации+" на сервере.
								|Обратитесь к администратору
								|"+ПлатежнаяСистема.ПоследняяОшибка());
							Иначе
								//глПредупреждение("Оплата не произведена по системе платежей "+НаименованиеСистемы);
							КонецЕсли;
							ТаблицаОплаты.Сумма=0;
							ТаблицаОплаты.ОплатаПроведена=0;
						КонецЕсли;


						Если СуммаЧека<=СуммаОплатыПроведеныхПлатежей Тогда
							//сумма проведенных платежей уже покрывает сумму чека
							//не надо проводить по платежной системе
							ОплатыПрошли = 1;
							Перейти ~Выход;
						КонецЕсли;

					КонецЕсли;
				КонецЕсли;
				Если ТаблицаОплаты.ОплатаПроведена=1 Тогда
					СуммаОплатыПроведеныхПлатежей=СуммаОплатыПроведеныхПлатежей+СуммаПрошла;
				КонецЕсли;
			КонецЕсли;


		КонецЕсли;

	КонецЦикла;


	//глБраузер(ТаблицаОплаты);

	~Выход:

	Сам.ТабличноеПолеОплаты.Обновить();

	Сам.УстановитьРежим(Перечисление.РежимыРМК.Оплаты);

	Возврат ОплатыПрошли;

КонецФункции


Функция глОтменитьОплаты(Сам) Экспорт
	ПредыдущийРежим=Сам.Режим;


	Возврат 0;

КонецФункции



Функция  ЗакрытьПродажу(РМК) Экспорт

	Попытка
		Сам=РМК;

		глДрайверы.Клавиатура.ОтключитьПроверкуКлавиатуры();

		ТаблицаЧеков=Сам.ТаблицаЧеков;
		ТаблицаОплаты=Сам.ТаблицаОплаты;
		ТаблицаТоваров=Сам.ТаблицаТоваров;
		ДисконтнаяСистема=Сам.ДисконтнаяСистема;

		Инд=1;
		Пока Инд<=ТаблицаОплаты.КоличествоСтрок()  Цикл
			ТаблицаОплаты.ПолучитьСтрокуПоНомеру(Инд);
			Если (ТаблицаОплаты.ОплатаПроведена=0)Или(ТаблицаОплаты.Сумма=0) Тогда
				ТаблицаОплаты.УдалитьСтроку(Инд);
			Иначе
				Инд=Инд+1;
			КонецЕсли;
		КонецЦикла;







		Если ТаблицаОплаты.Итог("Сумма")<ТаблицаТоваров.Итог("Всего") Тогда
			глПредупреждение("Недостаточно суммы оплаты");
			Возврат 0;
		КонецЕсли;


		СуммаБезнал=0;
		ТаблицаОплаты.ВыбратьСтроки();
		Пока ТаблицаОплаты.ПолучитьСтроку() = 1 Цикл
			Если ТаблицаОплаты.ИД="0" Тогда
				Продолжить;
			ИначеЕсли ТаблицаОплаты.Объект.Данные.ТипОплаты=0 Тогда
				Продолжить;
			ИначеЕсли ТаблицаОплаты.Сумма=0 Тогда
				Продолжить;
			ИначеЕсли ТаблицаОплаты.ОплатаПроведена=0 Тогда
				глПредупреждение("Сумма безналичной оплаты не проведена по платежной системе.");
				Возврат 0;
			КонецЕсли;
		КонецЦикла;



		ТаблицаЧеков.УдалитьСтроки();
		СписокККМ=СоздатьОбъект("СписокЗначений");

		ВыбранККМ=0;
		ТаблицаТоваров.ВыбратьСтроки();
		Пока ТаблицаТоваров.ПолучитьСтроку()=1 Цикл

			ТаблицаТоваров.КодФирмы=ТаблицаТоваров.Товар.КодФирмы;

			Если ПустоеЗначение(ТаблицаТоваров.КодФирмы)=0 Тогда
				ТаблицаТоваров.ККМ=глДрайверы.ПолучитьККМПоКодуФирмы(ТаблицаТоваров.КодФирмы);

				Если ПустоеЗначение(ТаблицаТоваров.ККМ)=1 Тогда
					ТаблицаТоваров.КодФирмы=0;
					ТаблицаТоваров.ККМ=0;
				КонецЕсли;

			Иначе
				ТаблицаТоваров.ККМ=0;
			КонецЕсли;

			Чек=СписокККМ.Получить(ТаблицаТоваров.КодФирмы);

			Если ПустоеЗначение(Чек)=1 Тогда

				Если (ПустоеЗначение(ТаблицаТоваров.КодФирмы)=1)Или(ПустоеЗначение(ТаблицаТоваров.ККМ)=1) Тогда
					Если ПустоеЗначение(ВыбранККМ)=1 Тогда
						СЗ=глДрайверы.ПолучитьСписокУстройств("Устройство.ККМ");
						Стр=0;

						Если ПустоеЗначение(СЗ)=1 Тогда
							глПредупреждение("Нет настроенных ККМ.");
							Возврат 0;
						КонецЕсли;
						Если СЗ.РазмерСписка()=1 Тогда
							ВыбранККМ=СЗ.ПолучитьЗначение(1);
						Иначе
							ВыбранККМ=ВыбратьККМ(СЗ);
						КонецЕсли;

						Если ПустоеЗначение(ВыбранККМ)=1 Тогда

							Возврат 0
						Иначе
							ТаблицаТоваров.ККМ=глДрайверы.ПолучитьККМПоИД(ВыбранККМ.Данные.ИД);
							ТаблицаТоваров.КодФирмы=ВыбранККМ.Данные.КодФирмы;
						КонецЕсли;
					Иначе
						ТаблицаТоваров.ККМ=ВыбранККМ;
						ТаблицаТоваров.КодФирмы=ВыбранККМ.Данные.КодФирмы;
					КонецЕсли;
				КонецЕсли;


				Чек=СписокККМ.Получить(ТаблицаТоваров.КодФирмы);

				Если ПустоеЗначение(Чек)=1 Тогда

					ТаблицаЧеков.НоваяСтрока();

					ТаблицаЧеков.КодФирмы=ТаблицаТоваров.КодФирмы;
					ТаблицаЧеков.ККМ=ТаблицаТоваров.ККМ;
					ТаблицаЧеков.СтатусДокумента=Перечисление.СтатусыДокументов.Новый;


					Чек=СоздатьОбъект("Чек");
					СквознойНомер=глПолучитьСквознойНомерДокумента();
					Чек.ИД=СквознойНомер;
					Чек.Данные.Дата=ТекущаяДата();
					Чек.Данные.Время=ТекущееВремя();
					Чек.Данные.НомерККМ=ТаблицаЧеков.ККМ.Данные.СерийныйНомер;

					Чек.Данные.КодОперации=0;//продажа 1-возврат
					Чек.Данные.Статус=0;
					Чек.Данные.ПризнакВнешнегоЧека=0;


					Чек.Данные.ДисконтнаяКарта="";
					Чек.Данные.НаименованиеКлиента="";
					Если ДисконтнаяСистема.ЕстьКарта()=1 Тогда
						Чек.Данные.ДисконтнаяКарта=ДисконтнаяСистема.ДисконтнаяКарта.ИД;
						Чек.Данные.НаименованиеКлиента=ДисконтнаяСистема.ДисконтнаяКарта.НаименованиеКлиента;

					КонецЕсли;

					Попытка
						Чек.Данные.Кассир=глПраваДоступа.ТекущийПользователь.ИД;
						Чек.Данные.НаименованиеКассира=глПраваДоступа.ТекущийПользователь.ФИО;
					Исключение
						Чек.Данные.Кассир="";
						Чек.Данные.НаименованиеКассира="";

					КонецПопытки;


					Чек.Данные.Продавец="";
					Чек.Данные.НаименованиеПродавца="";

					Попытка
						Чек.Данные.Продавец=РМК.Продавец.ИД;
						Чек.Данные.НаименованиеПродавца=РМК.Продавец.ФИО;

					Исключение
					КонецПопытки;

					Чек.Данные.Заголовок="";

					ТаблицаЧеков.Чек=Чек;

					СписокККМ.Установить(ТаблицаЧеков.КодФирмы,Чек);
				КонецЕсли;
			КонецЕсли;

			//Чек здесь всегда инициализирован или новый чек или уже ранее добавленный
			Чек.Данные.Товары.НоваяСтрока();
			//Чек.Данные.Товары.ИД=
			Чек.Данные.Товары.Родитель=Чек.Данные.ИД;
			Чек.Данные.Товары.КодОперации=Чек.Данные.КодОперации;
			Чек.Данные.Товары.Товар=ТаблицаТоваров.Код;
			Чек.Данные.Товары.Наименование=ТаблицаТоваров.Наименование;
			Чек.Данные.Товары.Штрихкод=ТаблицаТоваров.Штрихкод;
			Чек.Данные.Товары.Количество=ТаблицаТоваров.Количество;
			Чек.Данные.Товары.Единица=ТаблицаТоваров.Единица;
			Чек.Данные.Товары.Коэффициент=ТаблицаТоваров.Коэффициент;
			Чек.Данные.Товары.Цена=ТаблицаТоваров.Цена;
			Чек.Данные.Товары.СуммаБезСкидки=ТаблицаТоваров.Сумма;
			Чек.Данные.Товары.СуммаСкидки=0;
			Чек.Данные.Товары.СуммаНаценки=0;
			Если ТаблицаТоваров.Скидка>0 Тогда
				Чек.Данные.Товары.СуммаСкидки = ТаблицаТоваров.Скидка;
			ИначеЕсли ТаблицаТоваров.Скидка<0 Тогда
				Чек.Данные.Товары.СуммаНаценки=-ТаблицаТоваров.Скидка;
			КонецЕсли;
			Чек.Данные.Товары.СуммаВсего=ТаблицаТоваров.Всего;


		КонецЦикла;



		ТаблицаЧеков.ВыбратьСтроки();
		Пока ТаблицаЧеков.ПолучитьСтроку()=1 Цикл

			Чек=ТаблицаЧеков.Чек;
			Чек.Данные.СуммаБезСкидки=Чек.Данные.Товары.Итог("СуммаБезСкидки");
			Чек.Данные.СуммаСкидки=Чек.Данные.Товары.Итог("СуммаСкидки");
			Чек.Данные.СуммаНаценки=Чек.Данные.Товары.Итог("СуммаНаценки");
			Чек.Данные.СуммаВсего=Чек.Данные.Товары.Итог("СуммаВсего");
		КонецЦикла;


		//Распределим безналичные оплаты по чекам

		ТЗНал=СоздатьОбъект("ТаблицаЗначений");
		ТЗНал.НоваяКолонка("Объект");
		ТЗНал.НоваяКолонка("ИД");
		ТЗНал.НоваяКолонка("Сумма");
		ТЗНал.НоваяКолонка("НомерОперации");

		ТЗБезНал=СоздатьОбъект("ТаблицаЗначений");
		ТЗБезНал.НоваяКолонка("Объект");
		ТЗБезНал.НоваяКолонка("ИД");
		ТЗБезНал.НоваяКолонка("Сумма");
		ТЗБезНал.НоваяКолонка("Распределили");
		ТЗБезНал.НоваяКолонка("НомерОперации");

		ТЗБезНалБезПривязкиКФирме=СоздатьОбъект("ТаблицаЗначений");
		ТЗБезНалБезПривязкиКФирме.НоваяКолонка("Объект");
		ТЗБезНалБезПривязкиКФирме.НоваяКолонка("ИД");
		ТЗБезНалБезПривязкиКФирме.НоваяКолонка("Сумма");
		ТЗБезНалБезПривязкиКФирме.НоваяКолонка("Распределили");
		ТЗБезНалБезПривязкиКФирме.НоваяКолонка("НомерОперации");



		ТаблицаОплаты.ВыбратьСтроки();
		Пока ТаблицаОплаты.ПолучитьСтроку() = 1 Цикл
			Если ТаблицаОплаты.ИД="0" Тогда
				ТЗНал.НоваяСтрока();
				ТЗНал.ИД=ТаблицаОплаты.ИД;
				ТЗНал.Сумма = ТаблицаОплаты.Сумма;
				ТЗНал.НомерОперации=ТаблицаОплаты.НомерОперации;
				Продолжить;
			ИначеЕсли ТаблицаОплаты.Объект.Данные.ТипОплаты=0 Тогда
				ТЗНал.НоваяСтрока();
				ТЗНал.ИД=ТаблицаОплаты.ИД;
				ТЗНал.Объект=ТаблицаОплаты.Объект;
				ТЗНал.Сумма = ТаблицаОплаты.Сумма;
				ТЗНал.НомерОперации=ТаблицаОплаты.НомерОперации;
				Продолжить;
			ИначеЕсли ПустаяСтрока(ТаблицаОплаты.КодФирмы)=1 Тогда
				ТЗБезНалБезПривязкиКФирме.НоваяСтрока();
				ТЗБезНалБезПривязкиКФирме.ИД=ТаблицаОплаты.ИД;
				ТЗБезНалБезПривязкиКФирме.Объект=ТаблицаОплаты.Объект;
				ТЗБезНалБезПривязкиКФирме.Сумма = ТаблицаОплаты.Сумма;
				ТЗБезНалБезПривязкиКФирме.Распределили=0;
				ТЗБезНалБезПривязкиКФирме.НомерОперации=ТаблицаОплаты.НомерОперации;
				Продолжить;
			Иначе
				ТЗБезНал.НоваяСтрока();
				ТЗБезНал.ИД=ТаблицаОплаты.ИД;
				ТЗБезНал.Объект=ТаблицаОплаты.Объект;
				ТЗБезНал.Сумма = ТаблицаОплаты.Сумма;
				ТЗБезНал.Распределили=0;
				ТЗБезНал.НомерОперации=ТаблицаОплаты.НомерОперации;
			КонецЕсли;

			КодФирмы=ТаблицаОплаты.КодФирмы;
			ТаблицаЧеков.ВыбратьСтроки();
			Пока ТаблицаЧеков.ПолучитьСтроку()=1 Цикл

				Если ТаблицаЧеков.КодФирмы=КодФирмы Тогда
					Чек=ТаблицаЧеков.Чек;
					Чек.Данные.Оплаты.НоваяСтрока();
					Чек.Данные.Оплаты.ВидОплаты=ТаблицаОплаты.Объект.Данные.ИД;
					Чек.Данные.Оплаты.Наименование=ТаблицаОплаты.Объект.Данные.Наименование;
					Чек.Данные.Оплаты.СуммаОплаты=ТаблицаОплаты.Сумма;
					Чек.Данные.Оплаты.Инфо=ТаблицаОплаты.НомерОперации;
					ТЗБезНал.Распределили=1;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		Если ТЗБезНал.Итог("Сумма")+ТЗБезНалБезПривязкиКФирме.Итог("Сумма")>ТаблицаТоваров.Итог("Всего") Тогда
			глПредупреждение("Сумма безналичных оплат больше суммы чека.");

			Возврат 0;
		КонецЕсли;

		ТЗБезНал.ВыбратьСтроки();
		Текст="";

		Пока ТЗБезНал.ПолучитьСтроку()=1 Цикл
			Если ТЗБезНал.Распределили=0 Тогда
				Текст=Текст+" "+ТЗБезНал.Объект.Данные.Наименование+РазделительСтрок;
			КонецЕсли;
		КонецЦикла;
		Если Текст<>"" Тогда
			Текст=Текст+"
			|Можно пробивать по ККМ:";
			ТаблицаЧеков.ВыбратьСтроки();
			Пока ТаблицаЧеков.ПолучитьСтроку()=1 Цикл
				Текст=Текст+"
				|    "+ТаблицаЧеков.ККМ.Данные.Наименование;
			КонецЦикла;

			Предупреждение("Некорректные виды оплаты.
			|Не совпадают код организации для вида оплаты и код организации-владельца ККМ
			|"+Текст);

			Возврат 0;
		КонецЕсли;

		//распределим безналичные оплаты без привязки к фирме


		ТаблицаЧеков.ВыбратьСтроки();
		Пока ТаблицаЧеков.ПолучитьСтроку()=1 Цикл

			Чек=ТаблицаЧеков.Чек;


			СуммаОплаты=Чек.Данные.Оплаты.Итог("СуммаОплаты");

			Если Чек.Данные.СуммаВсего>СуммаОплаты Тогда

				СуммаТребуется=Чек.Данные.СуммаВсего-СуммаОплаты;

				Если СуммаТребуется>0 Тогда

					ТЗБезНалБезПривязкиКФирме.ВыбратьСтроки();
					Пока (ТЗБезНалБезПривязкиКФирме.ПолучитьСтроку() = 1)И(СуммаТребуется>0) Цикл

						Если ТЗБезНалБезПривязкиКФирме.Сумма=0 Тогда
							Продолжить;
						КонецЕсли;

						СуммаБезнал=Мин(ТЗБезНалБезПривязкиКФирме.Сумма,СуммаТребуется);



						СуммаТребуется=СуммаТребуется-СуммаБезнал;
						ТЗБезНалБезПривязкиКФирме.Сумма=ТЗБезНалБезПривязкиКФирме.Сумма-СуммаБезнал;

						Чек.Данные.Оплаты.НоваяСтрока();
						Чек.Данные.Оплаты.ВидОплаты=ТЗБезНалБезПривязкиКФирме.ИД;
						Чек.Данные.Оплаты.Наименование=ТЗБезНалБезПривязкиКФирме.Объект.Данные.Наименование;
						Чек.Данные.Оплаты.СуммаОплаты=СуммаБезнал;
						Чек.Данные.Оплаты.Инфо=ТЗБезНалБезПривязкиКФирме.НомерОперации;

					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;


		//распределим наличные оплаты
		ТаблицаЧеков.ВыбратьСтроки();
		Пока ТаблицаЧеков.ПолучитьСтроку()=1 Цикл

			Чек=ТаблицаЧеков.Чек;


			СуммаОплаты=Чек.Данные.Оплаты.Итог("СуммаОплаты");

			Если Чек.Данные.СуммаВсего>СуммаОплаты Тогда

				СуммаНалТребуется=Чек.Данные.СуммаВсего-СуммаОплаты;

				Если СуммаНалТребуется>0 Тогда

					ТЗНал.ВыбратьСтроки();
					Пока (ТЗНал.ПолучитьСтроку() = 1)И(СуммаНалТребуется>0) Цикл

						Если ТЗНал.Сумма=0 Тогда
							Продолжить;
						КонецЕсли;


						Если ТаблицаЧеков.НомерСтроки=ТаблицаЧеков.КоличествоСтрок() Тогда
							СуммаНал=ТЗНал.Сумма;
						Иначе
							СуммаНал=Мин(ТЗНал.Сумма,СуммаНалТребуется);
						КонецЕсли;


						СуммаНалТребуется=СуммаНалТребуется-СуммаНал;
						ТЗНал.Сумма=ТЗНал.Сумма-СуммаНал;

						Чек.Данные.Оплаты.НоваяСтрока();
						Чек.Данные.Оплаты.ВидОплаты=ТЗНал.ИД;
						Если ТЗНал.ИД="0" Тогда
							Чек.Данные.Оплаты.Наименование="Наличные";
						Иначе
							Чек.Данные.Оплаты.Наименование=ТЗНал.Объект.Данные.Наименование;
						КонецЕсли;

						Чек.Данные.Оплаты.СуммаОплаты=СуммаНал;
						Чек.Данные.Оплаты.Инфо=ТЗНал.НомерОперации;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		//После всех распределений оказалось что все равно налички осталось
		//кинем ее всю на первый чек
		Если ТЗНал.Итог("Сумма")>0 Тогда
			Если ТаблицаЧеков.КоличествоСтрок()>0 Тогда
				ТаблицаЧеков.ПолучитьСтрокуПоНомеру(1);
				Чек=ТаблицаЧеков.Чек;

				ТЗНал.ВыбратьСтроки();
				Пока ТЗНал.ПолучитьСтроку()=1 Цикл
					Если ТЗНал.Сумма>0 Тогда

						Чек.Данные.Оплаты.НоваяСтрока();
						Чек.Данные.Оплаты.ВидОплаты=ТЗНал.ИД;

						Если ТЗНал.ИД="0" Тогда
							Чек.Данные.Оплаты.Наименование="Наличные";
						Иначе
							Чек.Данные.Оплаты.Наименование=ТЗНал.Объект.Данные.Наименование;
						КонецЕсли;

						Чек.Данные.Оплаты.СуммаОплаты=ТЗНал.Сумма;
						Чек.Данные.Оплаты.Инфо=ТЗНал.НомерОперации;
						ТЗНал.Сумма=0;
					КонецЕсли;
				КонецЦикла;


			КонецЕсли;

		КонецЕсли;

		ИтогиККМ=НовыйОбъект("ИтогиККМ");
		ИтогиККМ.Сумма=ТаблицаТоваров.Итог("Сумма");
		ИтогиККМ.Скидка=ТаблицаТоваров.Итог("Скидка");
		ИтогиККМ.Всего=ТаблицаТоваров.Итог("Всего");
		ИтогиККМ.Сдача=?(ТаблицаОплаты.Итог("Сумма")-ТаблицаТоваров.Итог("Всего")>0,ТаблицаОплаты.Итог("Сумма")-ТаблицаТоваров.Итог("Всего"),0);
		Попытка
			глПослатьКоманду(Сам,"Дисплей_ВывестиИтог",ИтогиККМ,"Оборудование");
		Исключение
		КонецПопытки;




		ТаблицаЧеков.ВыбратьСтроки();
		Пока ТаблицаЧеков.ПолучитьСтроку()=1 Цикл
			Чек=ТаблицаЧеков.Чек;

			Если ТаблицаЧеков.СтатусДокумента<>Перечисление.СтатусыДокументов.Закрыт Тогда


				Если Чек.Записать()=1 Тогда

					ТаблицаЧеков.СтатусДокумента=Перечисление.СтатусыДокументов.Записан;

					//Пробиваем чек непосредственно на фискальнике

					Если Чек.ПробитьЧек(ТаблицаЧеков.ККМ)=1 Тогда
						ТаблицаЧеков.СтатусДокумента=Перечисление.СтатусыДокументов.Закрыт;

						Если Чек.Записать()=0 Тогда
							глПредупреждение("Чек пробит на ККМ, но в базу данных не записан!
							|"+Чек.ПоследняяОшибка()+"
							|"+глБД.ПоследняяОшибка());

							Возврат 0;
						ИначеЕсли глНастройки.ПолучитьКакЧисло("EXCHANGE/CopyChecksToServer")=1 Тогда
							Если Чек.ОтправитьНаСервер()=0 Тогда


								глПредупреждение("Сбой при отправке на сервер чеков.
								|Ошибка:"+Чек.ПоследняяОшибка());
							КонецЕсли
						КонецЕсли;
					Иначе
						глПредупреждение("Чек не пробит!
						|"+ТаблицаЧеков.ККМ.ПоследняяОшибка()+"
						|"+глДрайверы.ПоследняяОшибка());

						Возврат 0;
					КонецЕсли;
				Иначе

					Текст=Чек.ПоследняяОшибка()+"
					|
					|"+глБД.ПоследняяОшибка();
					глПредупреждение(Текст);

					Возврат 0;
				КонецЕсли;
			Иначе
				//не надо его пробивать - уже пробили

			КонецЕсли;

		КонецЦикла;


		глОбменДанными.ВключитьОжиданиеЗагрузки();

		Возврат 1;

	Исключение

		Сам.Установитьошибку(ОписаниеОшибки());
		глПредупреждение(""+Сам.ПоследняяОшибка());
		Возврат 0;
	КонецПопытки;

КонецФункции


Функция  ЗакрытьВозврат(РМК) Экспорт
	Попытка
		Сам=РМК;

		глДрайверы.Клавиатура.ОтключитьПроверкуКлавиатуры();

		Сам.ОбновитьТаблицуОплатыРМК();

		ТаблицаЧеков=Сам.ТаблицаЧеков;
		ТаблицаОплаты=Сам.ТаблицаОплаты;
		ТаблицаТоваров=Сам.ТаблицаТоваров;
		ДисконтнаяСистема=Сам.ДисконтнаяСистема;

		Инд=1;
		Пока Инд<=ТаблицаОплаты.КоличествоСтрок()  Цикл
			ТаблицаОплаты.ПолучитьСтрокуПоНомеру(Инд);
			Если (ТаблицаОплаты.Сумма=0) Тогда
				ТаблицаОплаты.УдалитьСтроку(Инд);
			Иначе
				Инд=Инд+1;
			КонецЕсли;
		КонецЦикла;







		Если ТаблицаОплаты.Итог("Сумма")<>ТаблицаТоваров.Итог("Всего") Тогда
			глПредупреждение("Cумма выплаты не равна сумме возвращаемых товаров.
			|Оплаты: "+глФРМ(ТаблицаОплаты.Итог("Сумма"))+"
			|Сумма чека:"+глФРМ(ТаблицаТоваров.Итог("Сумма")));
			Возврат 0;
		КонецЕсли;


		СуммаБезнал=0;
		ТаблицаОплаты.ВыбратьСтроки();
		Пока ТаблицаОплаты.ПолучитьСтроку() = 1 Цикл
			Если ТаблицаОплаты.ИД="0" Тогда
				Продолжить;
			ИначеЕсли ТаблицаОплаты.Объект.Данные.ТипОплаты=0 Тогда
				Продолжить;
			ИначеЕсли ТаблицаОплаты.Сумма=0 Тогда
				Продолжить;
			ИначеЕсли ТаблицаОплаты.ОплатаПроведена=0 Тогда
				глПредупреждение("Сумма безналичной оплаты не проведена по платежной системе.");
				Возврат 0;
			КонецЕсли;
		КонецЦикла;



		ТаблицаЧеков.УдалитьСтроки();
		СписокККМ=СоздатьОбъект("СписокЗначений");

		ВыбранККМ=0;
		ТаблицаТоваров.ВыбратьСтроки();
		Пока ТаблицаТоваров.ПолучитьСтроку()=1 Цикл

			ТаблицаТоваров.КодФирмы=ТаблицаТоваров.Товар.КодФирмы;

			Если ПустоеЗначение(ТаблицаТоваров.КодФирмы)=0 Тогда
				ТаблицаТоваров.ККМ=глДрайверы.ПолучитьККМПоКодуФирмы(ТаблицаТоваров.КодФирмы);

				Если ПустоеЗначение(ТаблицаТоваров.ККМ)=1 Тогда
					ТаблицаТоваров.КодФирмы=0;
					ТаблицаТоваров.ККМ=0;
				КонецЕсли;

			Иначе
				ТаблицаТоваров.ККМ=0;
			КонецЕсли;

			Чек=СписокККМ.Получить(ТаблицаТоваров.КодФирмы);

			Если ПустоеЗначение(Чек)=1 Тогда

				Если (ПустоеЗначение(ТаблицаТоваров.КодФирмы)=1)Или(ПустоеЗначение(ТаблицаТоваров.ККМ)=1) Тогда
					Если ПустоеЗначение(ВыбранККМ)=1 Тогда
						СЗ=глДрайверы.ПолучитьСписокУстройств("Устройство.ККМ");
						Стр=0;

						Если ПустоеЗначение(СЗ)=1 Тогда
							глПредупреждение("Нет настроенных ККМ.");
							Возврат 0;
						КонецЕсли;
						Если СЗ.РазмерСписка()=1 Тогда
							ВыбранККМ=СЗ.ПолучитьЗначение(1);
						Иначе
							ВыбранККМ=ВыбратьККМ(СЗ);
						КонецЕсли;

						Если ПустоеЗначение(ВыбранККМ)=1 Тогда

							Возврат 0
						Иначе
							ТаблицаТоваров.ККМ=глДрайверы.ПолучитьККМПоИД(ВыбранККМ.Данные.ИД);
							ТаблицаТоваров.КодФирмы=ВыбранККМ.Данные.КодФирмы;
						КонецЕсли;
					Иначе
						ТаблицаТоваров.ККМ=ВыбранККМ;
						ТаблицаТоваров.КодФирмы=ВыбранККМ.Данные.КодФирмы;
					КонецЕсли;
				КонецЕсли;


				Чек=СписокККМ.Получить(ТаблицаТоваров.КодФирмы);

				Если ПустоеЗначение(Чек)=1 Тогда

					ТаблицаЧеков.НоваяСтрока();

					ТаблицаЧеков.КодФирмы=ТаблицаТоваров.КодФирмы;
					ТаблицаЧеков.ККМ=ТаблицаТоваров.ККМ;
					ТаблицаЧеков.СтатусДокумента=Перечисление.СтатусыДокументов.Новый;


					Чек=СоздатьОбъект("Чек");
					СквознойНомер=глПолучитьСквознойНомерДокумента();
					Чек.ИД=СквознойНомер;
					Чек.Данные.Дата=ТекущаяДата();
					Чек.Данные.Время=ТекущееВремя();
					Чек.Данные.НомерККМ=ТаблицаЧеков.ККМ.Данные.СерийныйНомер;

					Чек.Данные.КодОперации=1;//продажа 1-возврат
					Чек.Данные.Статус=0;
					Чек.Данные.ПризнакВнешнегоЧека=0;


					Чек.Данные.ДисконтнаяКарта="";
					Чек.Данные.НаименованиеКлиента="";
					Если ДисконтнаяСистема.ЕстьКарта()=1 Тогда
						Чек.Данные.ДисконтнаяКарта=ДисконтнаяСистема.ДисконтнаяКарта.ИД;
						Чек.Данные.НаименованиеКлиента=ДисконтнаяСистема.ДисконтнаяКарта.НаименованиеКлиента;

					КонецЕсли;

					Попытка
						Чек.Данные.Кассир=глПраваДоступа.ТекущийПользователь.ИД;
						Чек.Данные.НаименованиеКассира=глПраваДоступа.ТекущийПользователь.ФИО;
					Исключение
						Чек.Данные.Кассир="";
						Чек.Данные.НаименованиеКассира="";

					КонецПопытки;

					Чек.Данные.Продавец="";
					Чек.Данные.НаименованиеПродавца="";

					Попытка
						Чек.Данные.Продавец=РМК.Продавец.ИД;
						Чек.Данные.НаименованиеПродавца=РМК.Продавец.ФИО;

					Исключение
					КонецПопытки;

					Чек.Данные.Заголовок="";

					ТаблицаЧеков.Чек=Чек;

					СписокККМ.Установить(ТаблицаЧеков.КодФирмы,Чек);
				КонецЕсли;
			КонецЕсли;

			//Чек здесь всегда инициализирован или новый чек или уже ранее добавленный
			Чек.Данные.Товары.НоваяСтрока();
			//Чек.Данные.Товары.ИД=
			Чек.Данные.Товары.Родитель=Чек.Данные.ИД;
			Чек.Данные.Товары.КодОперации=Чек.Данные.КодОперации;
			Чек.Данные.Товары.Товар=ТаблицаТоваров.Код;
			Чек.Данные.Товары.Наименование=ТаблицаТоваров.Наименование;
			Чек.Данные.Товары.Штрихкод=ТаблицаТоваров.Штрихкод;
			Чек.Данные.Товары.Количество=ТаблицаТоваров.Количество;
			Чек.Данные.Товары.Единица=ТаблицаТоваров.Единица;
			Чек.Данные.Товары.Коэффициент=ТаблицаТоваров.Коэффициент;
			Чек.Данные.Товары.Цена=ТаблицаТоваров.Цена;
			Чек.Данные.Товары.СуммаБезСкидки=ТаблицаТоваров.Сумма;
			Чек.Данные.Товары.СуммаСкидки=0;
			Чек.Данные.Товары.СуммаНаценки=0;
			Если ТаблицаТоваров.Скидка>0 Тогда
				Чек.Данные.Товары.СуммаСкидки = ТаблицаТоваров.Скидка;
			ИначеЕсли ТаблицаТоваров.Скидка<0 Тогда
				Чек.Данные.Товары.СуммаНаценки=-ТаблицаТоваров.Скидка;
			КонецЕсли;
			Чек.Данные.Товары.СуммаВсего=ТаблицаТоваров.Всего;


		КонецЦикла;



		ТаблицаЧеков.ВыбратьСтроки();
		Пока ТаблицаЧеков.ПолучитьСтроку()=1 Цикл

			Чек=ТаблицаЧеков.Чек;
			Чек.Данные.СуммаБезСкидки=Чек.Данные.Товары.Итог("СуммаБезСкидки");
			Чек.Данные.СуммаСкидки=Чек.Данные.Товары.Итог("СуммаСкидки");
			Чек.Данные.СуммаНаценки=Чек.Данные.Товары.Итог("СуммаНаценки");
			Чек.Данные.СуммаВсего=Чек.Данные.Товары.Итог("СуммаВсего");
		КонецЦикла;


		//Распределим безналичные оплаты по чекам

		ТЗНал=СоздатьОбъект("ТаблицаЗначений");
		ТЗНал.НоваяКолонка("Объект");
		ТЗНал.НоваяКолонка("ИД");
		ТЗНал.НоваяКолонка("Сумма");

		ТЗБезНал=СоздатьОбъект("ТаблицаЗначений");
		ТЗБезНал.НоваяКолонка("Объект");
		ТЗБезНал.НоваяКолонка("ИД");
		ТЗБезНал.НоваяКолонка("Сумма");
		ТЗБезНал.НоваяКолонка("Распределили");

		ТЗБезНалБезПривязкиКФирме=СоздатьОбъект("ТаблицаЗначений");
		ТЗБезНалБезПривязкиКФирме.НоваяКолонка("Объект");
		ТЗБезНалБезПривязкиКФирме.НоваяКолонка("ИД");
		ТЗБезНалБезПривязкиКФирме.НоваяКолонка("Сумма");
		ТЗБезНалБезПривязкиКФирме.НоваяКолонка("Распределили");



		ТаблицаОплаты.ВыбратьСтроки();
		Пока ТаблицаОплаты.ПолучитьСтроку() = 1 Цикл
			Если ТаблицаОплаты.ИД="0" Тогда
				ТЗНал.НоваяСтрока();
				ТЗНал.ИД=ТаблицаОплаты.ИД;
				ТЗНал.Сумма = ТаблицаОплаты.Сумма;
				Продолжить;
			ИначеЕсли ТаблицаОплаты.Объект.Данные.ТипОплаты=0 Тогда
				ТЗНал.НоваяСтрока();
				ТЗНал.ИД=ТаблицаОплаты.ИД;
				ТЗНал.Объект=ТаблицаОплаты.Объект;
				ТЗНал.Сумма = ТаблицаОплаты.Сумма;
				Продолжить;
			ИначеЕсли ПустаяСтрока(ТаблицаОплаты.КодФирмы)=1 Тогда
				ТЗБезНалБезПривязкиКФирме.НоваяСтрока();
				ТЗБезНалБезПривязкиКФирме.ИД=ТаблицаОплаты.ИД;
				ТЗБезНалБезПривязкиКФирме.Объект=ТаблицаОплаты.Объект;
				ТЗБезНалБезПривязкиКФирме.Сумма = ТаблицаОплаты.Сумма;
				ТЗБезНалБезПривязкиКФирме.Распределили=0;
				Продолжить;
			Иначе
				ТЗБезНал.НоваяСтрока();
				ТЗБезНал.ИД=ТаблицаОплаты.ИД;
				ТЗБезНал.Объект=ТаблицаОплаты.Объект;
				ТЗБезНал.Сумма = ТаблицаОплаты.Сумма;
				ТЗБезНал.Распределили=0;
			КонецЕсли;

			КодФирмы=ТаблицаОплаты.КодФирмы;
			ТаблицаЧеков.ВыбратьСтроки();
			Пока ТаблицаЧеков.ПолучитьСтроку()=1 Цикл

				Если ТаблицаЧеков.КодФирмы=КодФирмы Тогда
					Чек=ТаблицаЧеков.Чек;
					Чек.Данные.Оплаты.НоваяСтрока();
					Чек.Данные.Оплаты.ВидОплаты=ТаблицаОплаты.Объект.Данные.ИД;
					Чек.Данные.Оплаты.Наименование=ТаблицаОплаты.Объект.Данные.Наименование;
					Чек.Данные.Оплаты.СуммаОплаты=ТаблицаОплаты.Сумма;
					ТЗБезНал.Распределили=1;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		Если ТЗБезНал.Итог("Сумма")+ТЗБезНалБезПривязкиКФирме.Итог("Сумма")>ТаблицаТоваров.Итог("Всего") Тогда
			глПредупреждение("Сумма безналичных оплат больше суммы чека.");

			Возврат 0;
		КонецЕсли;

		ТЗБезНал.ВыбратьСтроки();
		Текст="";

		Пока ТЗБезНал.ПолучитьСтроку()=1 Цикл
			Если ТЗБезНал.Распределили=0 Тогда
				Текст=Текст+" "+ТЗБезНал.Объект.Данные.Наименование+РазделительСтрок;
			КонецЕсли;
		КонецЦикла;
		Если Текст<>"" Тогда
			Текст=Текст+"
			|Можно пробивать по ККМ:";
			ТаблицаЧеков.ВыбратьСтроки();
			Пока ТаблицаЧеков.ПолучитьСтроку()=1 Цикл
				Текст=Текст+"
				|    "+ТаблицаЧеков.ККМ.Данные.Наименование;
			КонецЦикла;

			Предупреждение("Некорректные виды оплаты.
			|Не совпадают код организации для вида оплаты и код организации-владельца ККМ
			|"+Текст);

			Возврат 0;
		КонецЕсли;

		//распределим безналичные оплаты без привязки к фирме


		ТаблицаЧеков.ВыбратьСтроки();
		Пока ТаблицаЧеков.ПолучитьСтроку()=1 Цикл

			Чек=ТаблицаЧеков.Чек;


			СуммаОплаты=Чек.Данные.Оплаты.Итог("СуммаОплаты");

			Если Чек.Данные.СуммаВсего>СуммаОплаты Тогда

				СуммаТребуется=Чек.Данные.СуммаВсего-СуммаОплаты;

				Если СуммаТребуется>0 Тогда

					ТЗБезНалБезПривязкиКФирме.ВыбратьСтроки();
					Пока (ТЗБезНалБезПривязкиКФирме.ПолучитьСтроку() = 1)И(СуммаТребуется>0) Цикл

						Если ТЗБезНалБезПривязкиКФирме.Сумма=0 Тогда
							Продолжить;
						КонецЕсли;

						СуммаБезнал=Мин(ТЗБезНалБезПривязкиКФирме.Сумма,СуммаТребуется);



						СуммаТребуется=СуммаТребуется-СуммаБезнал;
						ТЗБезНалБезПривязкиКФирме.Сумма=ТЗБезНалБезПривязкиКФирме.Сумма-СуммаБезнал;

						Чек.Данные.Оплаты.НоваяСтрока();
						Чек.Данные.Оплаты.ВидОплаты=ТЗБезНалБезПривязкиКФирме.ИД;
						Чек.Данные.Оплаты.Наименование=ТЗБезНалБезПривязкиКФирме.Объект.Данные.Наименование;
						Чек.Данные.Оплаты.СуммаОплаты=СуммаБезнал;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;


		//распределим наличные оплаты
		ТаблицаЧеков.ВыбратьСтроки();
		Пока ТаблицаЧеков.ПолучитьСтроку()=1 Цикл

			Чек=ТаблицаЧеков.Чек;


			СуммаОплаты=Чек.Данные.Оплаты.Итог("СуммаОплаты");

			Если Чек.Данные.СуммаВсего>СуммаОплаты Тогда

				СуммаНалТребуется=Чек.Данные.СуммаВсего-СуммаОплаты;

				Если СуммаНалТребуется>0 Тогда

					ТЗНал.ВыбратьСтроки();
					Пока (ТЗНал.ПолучитьСтроку() = 1)И(СуммаНалТребуется>0) Цикл

						Если ТЗНал.Сумма=0 Тогда
							Продолжить;
						КонецЕсли;


						Если ТаблицаЧеков.НомерСтроки=ТаблицаЧеков.КоличествоСтрок() Тогда
							СуммаНал=ТЗНал.Сумма;
						Иначе
							СуммаНал=Мин(ТЗНал.Сумма,СуммаНалТребуется);
						КонецЕсли;


						СуммаНалТребуется=СуммаНалТребуется-СуммаНал;
						ТЗНал.Сумма=ТЗНал.Сумма-СуммаНал;

						Чек.Данные.Оплаты.НоваяСтрока();
						Чек.Данные.Оплаты.ВидОплаты=ТЗНал.ИД;
						Если ТЗНал.ИД="0" Тогда
							Чек.Данные.Оплаты.Наименование="Наличные";
						Иначе
							Чек.Данные.Оплаты.Наименование=ТЗНал.Объект.Данные.Наименование;
						КонецЕсли;

						Чек.Данные.Оплаты.СуммаОплаты=СуммаНал;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		//После всех распределений оказалось что все равно налички осталось
		//при возврате такого нельзя
		Если ТЗНал.Итог("Сумма")>0 Тогда
			глПредупреждение("Сумма возврата должна совпадать с суммой выплаты.");
			Возврат 0;
		КонецЕсли;

		ИтогиККМ=НовыйОбъект("ИтогиККМ");
		ИтогиККМ.Сумма=ТаблицаТоваров.Итог("Сумма");
		ИтогиККМ.Скидка=ТаблицаТоваров.Итог("Скидка");
		ИтогиККМ.Всего=ТаблицаТоваров.Итог("Всего");
		ИтогиККМ.Сдача=?(ТаблицаОплаты.Итог("Сумма")-ТаблицаТоваров.Итог("Всего")>0,ТаблицаОплаты.Итог("Сумма")-ТаблицаТоваров.Итог("Всего"),0);
		Попытка
			глПослатьКоманду(Сам,"Дисплей_ВывестиИтог",ИтогиККМ,"Оборудование");
		Исключение
		КонецПопытки;




		ТаблицаЧеков.ВыбратьСтроки();
		Пока ТаблицаЧеков.ПолучитьСтроку()=1 Цикл
			Чек=ТаблицаЧеков.Чек;

			Если ТаблицаЧеков.СтатусДокумента<>Перечисление.СтатусыДокументов.Закрыт Тогда


				Если Чек.Записать()=1 Тогда

					ТаблицаЧеков.СтатусДокумента=Перечисление.СтатусыДокументов.Записан;
					Если Чек.ПробитьЧек(ТаблицаЧеков.ККМ)=1 Тогда
						ТаблицаЧеков.СтатусДокумента=Перечисление.СтатусыДокументов.Закрыт;

						Чек.Данные.Статус=1;
						Если Чек.Записать()=0 Тогда
							глПредупреждение("Чек пробит на ККМ, но в базу данных не записан!
							|"+Чек.ПоследняяОшибка()+"
							|"+глБД.ПоследняяОшибка());

							Возврат 0;
						ИначеЕсли глНастройки.ПолучитьКакЧисло("EXCHANGE/CopyChecksToServer")=1 Тогда
							Если Чек.ОтправитьНаСервер()=0 Тогда
								глПредупреждение("Чек на сервер не отпарвлен.
								|Ошибка:"+Чек.ПоследняяОшибка());
							КонецЕсли
						КонецЕсли;
					Иначе
						глПредупреждение("Чек не пробит!
						|"+Чек.ПоследняяОшибка()+"
						|"+глДрайверы.ПоследняяОшибка());

						Возврат 0;
					КонецЕсли;
				Иначе

					Текст=Чек.ПоследняяОшибка()+"
					|
					|"+глБД.ПоследняяОшибка();
					глПредупреждение(Текст);

					Возврат 0;
				КонецЕсли;
			Иначе
				//не надо его пробивать - уже пробили

			КонецЕсли;

		КонецЦикла;


		глОбменДанными.ВключитьОжиданиеЗагрузки();

		Возврат 1;

	Исключение

		Сам.Установитьошибку(ОписаниеОшибки());
		глПредупреждение(""+Сам.ПоследняяОшибка());
		Возврат 0;
	КонецПопытки;
КонецФункции



DebugLog=1;
Debug=0;           //1-для отладки. выводятся сообщения/ прога запускается при ошибках в настройке
