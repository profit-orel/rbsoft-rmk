//Конфигурация для платформы "1С:Предприятие 7.7" РБ-Софт:Рабочее место кассира.
//Версия 4.43 от 19.07.10 20:54:19
//Назначение: Автоматизация POS-узлов в магазинах (Point of sale).
//(c) Баинов Евгений, ООО "РБ-Софт" 2006, г.Улан-Удэ, проспект 50-летия Октября,21А,офис 110 
//e-mail: bainov@rb-soft.ru  icq: 73718937, телефоны: (3012) 44-03-57, 44-76-42, 44-86-58
//---------------------------------------------------------------------------------------
//Данная программа является свободным программным обеспечением.
//Вы вправе распространять ее и/или модифицировать в соответствии с условиями версии 2 
//либо по вашему выбору с условиями более поздней версии Стандартной Общественной Лицензии GNU,
//опубликованной Free Software Foundation. 
//Мы распространяем данную программу в надежде на то, что она будет вам полезной, 
//однако НЕ ПРЕДОСТАВЛЯЕМ НА НЕЕ НИКАКИХ ГАРАНТИЙ, 
//в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
//и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ.
//Для получения более подробной информации ознакомьтесь со Стандартной Общественной Лицензией GNU.
//Вместе с данной программой вы должны были получить экземпляр Стандартной Общественной Лицензии GNU.
//Если вы его не получили, сообщите об этом в Free Software Foundation, Inc.,
//59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//_______________________________________________________________________________________
//Имя модуля:
// Класс Общие.Строки
//_______________________________________________________________________________________
//Разработчик: Баинов Евгений, e-mail: bainov@rb-soft.ru , icq: 73718937
//_______________________________________________________________________________________
//Назначение модуля:
// Библиотека процедур и функций для работы со строками
//
//_______________________________________________________________________________________
Перем ДлинаСамойБольшойСтроки Экспорт;

Функция Этот(Конт) Возврат Конт; КонецФункции

Функция Сам() Возврат Этот(Контекст) КонецФункции

Процедура Конструктор()
	ДлинаСамойБольшойСтроки = 480;
КонецПроцедуры	// Конструктор

Функция РазобратьСтрокуНаПодстроки(Стр, _ДлинаСамойБольшойСтроки=0) Экспорт
	лРезультат = "";

	Если _ДлинаСамойБольшойСтроки=0 Тогда
		_ДлинаСамойБольшойСтроки=ДлинаСамойБольшойСтроки;
	КонецЕсли;
	Для к=1 По СтрКоличествоСтрок(Стр) Цикл
		лСтрока = СтрПолучитьСтроку(Стр, к);
		Если к > 1 Тогда
			лРезультат = лРезультат + РазделительСтрок ;
		КонецЕсли;

		Если СтрДлина(лСтрока) <= _ДлинаСамойБольшойСтроки Тогда
			лРезультат1  = лСтрока ;
		Иначе
			лРезультат1  = "";
			лКоличествоПодстрок = Цел(СтрДлина(лСтрока) / _ДлинаСамойБольшойСтроки) + 1;

			Для н=1 По лКоличествоПодстрок Цикл

				Если н > 1 Тогда
					лРезультат1 = лРезультат1 + РазделительСтрок;
				КонецЕсли;
				лРезультат1 = лРезультат1 + Лев(лСтрока, _ДлинаСамойБольшойСтроки);


				лСтрока = Сред(лСтрока, _ДлинаСамойБольшойСтроки + 1);
			КонецЦикла;
			
		КонецЕсли;
		лРезультат = лРезультат + лРезультат1;
	КонецЦикла;

	Возврат лРезультат;
КонецФункции	// РазобратьСтрокуНаПодстроки

Процедура Сообщить(Сообщение, Маркер = "") Экспорт
	лСообщение = Сам().РазобратьСтрокуНаПодстроки(Сообщение);
	Message(лСообщение, Маркер);

КонецПроцедуры	// Сообщить

Процедура ДобавитьСтрокуВТекст(Текст, ДобавляемаяСтрока) Экспорт
	лСообщение = Сам().РазобратьСтрокуНаПодстроки(ДобавляемаяСтрока, ДлинаСамойБольшойСтроки);
	Текст.ДобавитьСтроку(лСообщение);
КонецПроцедуры	// ТекстПоказать----------------------------------------------------------------------


//******************************************************************************
//	РазделитьСтроку(Стр,Разделитель)
//
//	Параметры:
//		Стр			- строка, которую необходимо разложить на подстроки
//		Разделитель - строка-разделитель, по умолчанию - запятая
//
//	Возвращаемое значение:
//		Многострочная строка, составленная из подстрок
//
//	Описание:
//		Разбивает строку на многострочную строку по разделителю
//
Функция РазделитьСтроку(Знач Стр,Разделитель=",") Экспорт
	Если Разделитель=" " Тогда
		Пока Найти(Стр,"  ")>0 Цикл
			Стр = СтрЗаменить(Стр,"  "," ")
		КонецЦикла
	КонецЕсли;
	Возврат СтрЗаменить(Стр,Разделитель,РазделительСтрок)
КонецФункции	// РазделитьСтроку

//******************************************************************************
//	НайтиПоследнееВхождение(Стр,Что)
//
//	Параметры:
//		Стр - строка в которой производится поиск, передается по значению
//		Что - искомая строка
//
//	Возвращаемое значение:
//		число - позиция в строке
//
//	Описание:
//		Функция возвращает позицию в которой находится последнее вхождение
//		подстроки Что в строке Стр
//
Функция НайтиПоследнееВхождение(Знач Стр,Что) Экспорт
	Поз=0;
	Пока 1=1 Цикл
		ЛокПоз = Найти(Стр,Что);
		Если ЛокПоз=0 Тогда
			Возврат Поз;
		КонецЕсли;
		Поз = Поз+ЛокПоз;
		Стр = Сред(Стр,ЛокПоз+1);
	КонецЦикла;
КонецФункции	// НайтиПоследнееВхождение

//******************************************************************************
//	ИмяФайла(ИмяФайла)
//
//	Параметры:
//		ИмяФайла - строка, полное имя файла, включая путь
//
//	Возвращаемое значение:
//		строка с наименованием и расширением файла
//
//	Описание:
//		из полного имени файла выделяет собственно наименование и расширение
//
Функция ИмяФайла(ИмяФайла) Экспорт
	Стр = ИмяФайла;
	Пока Найти(Стр,"\")<>0 Цикл
		Стр = Сред(Стр,Найти(Стр,"\")+1);
	КонецЦикла;
	Возврат Стр;
КонецФункции	// ИмяФайла

//******************************************************************************
//	КаталогФайла(ИмяФайла)
//
//	Параметры:
//		ИмяФайла - строка, полное имя файла, включая путь
//
//	Возвращаемое значение:
//		строка с наименованием каталога, в котором находится файл
//
//	Описание:
// 		из полного имени файла выделяет путь, по которому следует искать файл
//
Функция КаталогФайла(ИмяФайла) Экспорт
	Возврат Лев(ИмяФайла,НайтиПоследнееВхождение(ИмяФайла,"\"));
КонецФункции	// КаталогФайла

//******************************************************************************
//	СтрокуВСписок(Стр,Разделитель, СписокЗначений)
//
//	Параметры:
//		Стр - 			строка, которую необходимо разложить на подстроки.
//						Параметр передается по значению.
//		Разделитель - 	строка-разделитель, по умолчанию - запятая.
//
//
//	Возвращаемое значение:
//		список значений, элементы которого - подстроки
//
//	Описание:
//		Функция "расщепляет" строку на подстроки, используя заданный
//		разделитель. Разделитель может иметь любую длину.
//		Если в качестве разделителя задан пробел, рядом стоящие пробелы
//		считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//		игнорируются.
//		Например,
//		СтрокуВСписок(",ку,,,му", ",") возвратит список значений из пяти элементов,
//		три из которых - пустые строки, а
//		СтрокуВСписок(" ку   му", " ") возвратит список значений из двух элементов
//
Функция СтрокуВСписок(Знач Стр, Разделитель = ",",СЗ = "") Экспорт

	Если ПустоеЗначение(СЗ)=0 Тогда
		СЗ.УдалитьВсе();
	Иначе
		СЗ = СоздатьОбъект("СписокЗначений");
	КонецЕсли;

	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				СЗ.ДобавитьЗначение(Стр);
				Возврат СЗ;
			КонецЕсли;
			СЗ.ДобавитьЗначение(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				СЗ.ДобавитьЗначение(Стр);
				Возврат СЗ;
			КонецЕсли;
			СЗ.ДобавитьЗначение(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
КонецФункции // СтрокуВСписок

//------------------------------------ ------------------------------------
Функция Форматировать(Знач ФорматнаяСтрока) Экспорт
	Попытка
		Список = Этот(Контекст).ПолучитьСписокПараметров("Форматировать");
	Исключение
		Список = СоздатьОбъект("СписокЗначений");;
	КонецПопытки;
    Возврат Этот(Контекст).ФорматироватьИзСЗ(ФорматнаяСтрока, Список);

КонецФункции //Форматировать
//------------------------------------ ------------------------------------
//ФорматироватьИзСЗ()
Функция ФорматироватьИзСЗ(Знач ФорматнаяСтрока, Знач Список) Экспорт

	Результат = ФорматнаяСтрока;
	//СтрокаИсключений = "Тип,ТипСообщения,ИзменениеУровняСообщения,ИзменениеУровня,Форма,Объект,Контрол,";
	ИндексНеопределенногоПараметра = 0;
	Для Индекс=1 По Список.РазмерСписка() Цикл
		НазваниеПараметра = "";
		Значение = Список.ПолучитьЗначение(Индекс, НазваниеПараметра);

		Индекс = Индекс + 1;
		ИндексНеопределенногоПараметра = ИндексНеопределенногоПараметра + 1;
		Если Индекс <= Список.РазмерСписка() Тогда
			ФорматЗначения = Список.ПолучитьЗначение(Индекс);
		Иначе
			ФорматЗначения = "";
		КонецЕсли;
		Если ПустоеЗначение(ФорматЗначения)=0 Тогда
	      	Значение = "" + Формат(Значение, ФорматЗначения);
	      Иначе
	      	Значение = "" + Значение;
	      КонецЕсли;
		Результат = СтрЗаменить(Результат, "%%"+СокрЛП(ИндексНеопределенногоПараметра), Значение);
	КонецЦикла;
	Возврат Результат;
КонецФункции //ФорматироватьИзСЗ

//*****************************************************************************
// ЗаменитьОдниСимволыДругими(Что,Где,НаЧто)
//
// Параметры
//    Что - строка, символы, которые будут заменены
//    Где - строка, в этой строке будут заменяться символы
//    НаЧто - строка, символы, на которые производится замена,
//          длины строк Что и НаЧто должны совпадать
//
// Возвращаемое значение
//    строка
//
// Описание
//    в переданной строке Где символы из строки Что заменяются
//    соответствующими по номерам символами из строки НаЧто
//
Функция ЗаменитьОдниСимволыДругими(Что,Где,НаЧто) Экспорт
  Рез = Где;
  Для Сч=1 По СтрДлина(Что) Цикл
    Рез = СтрЗаменить(Рез,Сред(Что,Сч,1),Сред(НаЧто,Сч,1));
  КонецЦикла;
  Возврат Рез;
КонецФункции // ЗаменитьОдниСимволыДругими


//******************************************************************************
// ДополнитьСтроку(Знач Парам, Длина, Символ = "0", Режим = 0)
//
// Параметры:
//		Парам - число или строка
//  	Длина - число (целое), длина строки.
//		Символ - символ, которым будет дополняться строка до нужной длины
//		Режим - число - режим дополнения: 0 - слева, 1 - справа
//
// Возвращаемое значение:
//      строка
//
// Описание:
//      пример использования:
//      глДополнитьСтроку(8,2) = "08"
//      глДополнитьСтроку("стр", 5, "-") = "--стр"
//      глДополнитьСтроку(12,4,"0",1) = "1200"
//
Функция ДополнитьСтроку(Знач Парам, Длина, Символ = "0", Режим = 0) Экспорт
	Парам = ""+Парам;  // превращаем параметр в строку
	Добавить = Длина - СтрДлина(Парам);
	Если Добавить>0  Тогда
		Добавок="";
		Для Сч = 1 По Добавить  Цикл
			Добавок=Добавок+Символ
		КонецЦикла;
		Возврат ?(Режим=0,Добавок+Парам, Парам+Добавок);
	Иначе
		Возврат	Парам;
	КонецЕсли;
КонецФункции // ДополнитьСтроку()

//******************************************************************************
// глДополнитьСтрокуЛ(Стр,Чем,Длина)
//
// Параметры:
//  Стр   - исходная строка
//  Чем   - символ, которым дополняем строку
//  Длина - длина, до которой заполняем строку
//
// Возвращаемое значение:
//  Результирующая строка
//
// Описание:
//  Дополняет передаваемую строку Стр символами Чем до строки длиной Длина
//  слева
//
Функция ДополнитьСтрокуЛ(Стр,Чем,Длина) Экспорт
	Добавить=Длина-СтрДлина(Стр);
	Добавок="";
	Для Сч = 1 По Добавить  Цикл
		Добавок=Добавок+Чем;
	КонецЦикла;
	Возврат Добавок+Стр;
КонецФункции //глДополнитьСтрокуЛ()

//******************************************************************************
// глДополнитьСтрокуП(Стр,Чем,Длина)
//
// Параметры:
//  Стр   - исходная строка
//  Чем   - символ, которым дополняем строку
//  Длина - длина, до которой заполняем строку
//
// Возвращаемое значение:
//  Результирующая строка
//
// Описание:
//  Дополняет передаваемую строку Стр символами Чем до строки длиной Длина
//  справа
//
Функция ДополнитьСтрокуП(Стр,Чем,Длина) Экспорт
	Добавить=Длина-СтрДлина(Стр);
	Добавок="";
	Для Сч = 1 По Добавить  Цикл
		Добавок=Добавок+Чем;
	КонецЦикла;
	Возврат Стр+Добавок;
КонецФункции //глДополнитьСтрокуП()

Функция ОтделитьРазделителем(Стр, Разделитель, Режим=0) Экспорт

	ПраваяЧасть			=	"";
	ПозРазделителя		=	Найти(Стр, Разделитель);
	ДлинаРазделителя	=	СтрДлина(Разделитель);
	Если ПозРазделителя > 0 Тогда
		ПраваяЧасть	=	Сред(Стр,		ПозРазделителя + ?(Режим=2, 0, ДлинаРазделителя));
		Стр			=	СокрЛП(Лев(Стр,	ПозРазделителя - ?(Режим=1, -ДлинаРазделителя+1, 1)));
	КонецЕсли;

	Возврат(ПраваяЧасть);

КонецФункции		//	ОтделитьРазделителем()

Процедура ДобавитьРеквизит(Стр, Предлог, Реквизит) Экспорт
	Если ПустоеЗначение(Реквизит) = 0 Тогда
		Стр = Стр + Предлог + СокрП(Реквизит);
	КонецЕсли;
КонецПроцедуры //глДобавитьРеквизит



//******************************************************************************
// СтрокаВЦифры(Стр)
//
// Параметры:
//  Стр - строка символов
//
// Возвращаемое значение:
//  Строку, сосотоящую только из символов цифр
//
// Описание:
//  Из исходной строки переносит в результирующую строку символы, при этом,
//  если символ не является цифровым, то в результирующую строку переносится
//  символ цифры, который является самым правым в коде символа исходной строки
//
Функция СимволыВЦифры(СтрСимв) Экспорт

	СтрЦифр = "";

	Для Индекс = 1 По СтрДлина(СтрСимв) Цикл
		ТекСимв = Сред(СтрСимв, Индекс, 1);

		Если Найти("1234567890", ТекСимв) = 0 Тогда
			// преобразуем символ
			ТекСимв = Строка(КодСимв(ТекСимв) % 10);
		КонецЕсли;

		СтрЦифр = СтрЦифр + ТекСимв;
	КонецЦикла;

	Возврат СтрЦифр;

КонецФункции // СтрокаВЦифры()

//_____________________________________________________________________________
Функция ЧислоПрописью(ЗначЧисло) Экспорт
	Перем Возвр;
	Перем ЦелЧасть, ДробЧасть;
	Перем Дробная;
	Перем Окончание;
	Перем ПоследнееСлово;

	ЦелЧасть = Цел(ЗначЧисло);
	ДробЧасть = Окр(ЗначЧисло - ЦелЧасть, 3);

	Если ДробЧасть=Окр(ДробЧасть,0) Тогда
		ДробЧасть = 0;
		Дробная = "";

	ИначеЕсли ДробЧасть = Окр(ДробЧасть, 1) Тогда
		ДробЧасть = Окр(ДробЧасть, 1) * 10;
		Дробная = "десят";

	ИначеЕсли ДробЧасть = Окр(ДробЧасть, 2) Тогда
		ДробЧасть = Окр(ДробЧасть, 2) * 100;
		Дробная = "сот";
	Иначе
		ДробЧасть = ДробЧасть * 1000;
		Дробная = "тысячн";
	КонецЕсли;

	Возвр = "";
	Возвр = Возвр + ?(ПустоеЗначение(ЦелЧасть) = 1, "Ноль", СокрЛП(Формат(ЦелЧасть, "ЧП")));

	Если Дробная <> "" Тогда // есть дробная часть
		// теперь займемся окончанием последнего слова целой части
		ПоследнееСлово = "";
		Окончание = "";

		Пока (Возвр <> "") И (Возвр = СокрП(Возвр)) Цикл // последний символ в строке не пробел
			ПоследнееСлово = Прав(Возвр, 1) + ПоследнееСлово; // добавляем последнюю букву
			Возвр = Лев(Возвр, СтрДлина(Возвр) - 1); // отрезаем последнюю букву
		КонецЦикла;

		Если Врег(ПоследнееСлово) = "ОДИН" Тогда
			// первую букву слова оставляем
			ПоследнееСлово = Лев(ПоследнееСлово, 1) + "дна";
			Окончание = "ая";
		Иначе
			Если (Врег(ПоследнееСлово) = "ДВА") Тогда
				ПоследнееСлово = Лев(ПоследнееСлово, 1) + "ве";
			КонецЕсли;
			Окончание = "ых";
		КонецЕсли;

		Возвр = Возвр + ПоследнееСлово + " цел" + Окончание + " " + НРег(СокрЛП(Формат(ДробЧасть, "ЧП")));

		// теперь займемся окончанием последнего слова дробной части
		ПоследнееСлово = "";
		Окончание = "";

		Пока Возвр = СокрП(Возвр) Цикл // последний символ в строке не пробел
			ПоследнееСлово = Прав(Возвр, 1) + ПоследнееСлово; // добавляем последнюю букву
			Возвр = Лев(Возвр, СтрДлина(Возвр) - 1); // отрезаем последнюю букву
		КонецЦикла;

		Если Врег(ПоследнееСлово) = "ОДИН" Тогда
			// первую букву слова оставляем
			ПоследнееСлово = Лев(ПоследнееСлово, 1) + "дна";
			Окончание = "ая";
		Иначе
			Если (Врег(ПоследнееСлово) = "ДВА") Тогда
				ПоследнееСлово = Лев(ПоследнееСлово, 1) + "ве";
			КонецЕсли;

			Окончание = "ых";
		КонецЕсли;

		Возвр = Возвр + ПоследнееСлово + " " + Дробная + Окончание;
	КонецЕсли;

	Возврат Возвр;
КонецФункции

////////////////////////////////////////////////////////////////////////////////////


Функция ОбрезатьСтрокиДо(ТекстСообщения,МаксимальнаяДлина) Экспорт
	СтрокаСОбрезанием="";
	Текст=СоздатьОбъект("Текст");
	Текст.ДобавитьСтроку(ТекстСообщения);
	Инд=0;
	Для Инд=1 по Текст.КоличествоСтрок() Цикл
		Стр=Текст.ПолучитьСтроку(Инд);
		Пока СтрДлина(Стр)>МаксимальнаяДлина Цикл
			СтрокаСОбрезанием=СтрокаСОбрезанием+?(СтрокаСОбрезанием="","",РазделительСтрок)+Лев(Стр,МаксимальнаяДлина);
			Стр=СокрЛ(Сред(Стр,МаксимальнаяДлина+1));
		КонецЦикла;
		Если Стр<>"" Тогда
			СтрокаСОбрезанием=СтрокаСОбрезанием+?(СтрокаСОбрезанием="","",РазделительСтрок)+СокрЛ(Стр);
		КонецЕсли;
	КонецЦикла;

	Возврат СтрокаСОбрезанием;
КонецФункции



//******************************************************************************
// глКонтрольныйСимволEAN(ШтрКод, Тип)
//
// Параметры:
//  ШтрКод - 12-символьный штрих-код (без контрольной цифры)
//  Тип    - тип штрихкода: 13 - EAN13, 8 - EAN8
//
// Возвращаемое значение:
//  Контрольный символ
//
// Описание:
//  Функция вычисляет контрольный символ кода EAN
//
Функция КонтрольныйСимволEAN(ШтрКод, Тип) Экспорт

	Четн = 0;
	Нечетн = 0;

	Если Тип = 13 Тогда
		КолвоИтераций = 6;
	Иначе
		КолвоИтераций = 4;
	КонецЕсли;

	Для Индекс = 1 По КолвоИтераций Цикл
		Четн = Четн + Сред(ШтрКод, 2 * Индекс, 1);
		Нечетн = Нечетн + Сред(ШтрКод, 2 * Индекс - 1, 1);
	КонецЦикла;

	Если Тип = 13 Тогда
		Четн = Четн * 3;
	Иначе
		Нечетн = Нечетн * 3;
	КонецЕсли;

	КонтЦифра = 10 - (Четн + Нечетн) % 10;

	Возврат ?(КонтЦифра = 10, "0", Строка(КонтЦифра));

КонецФункции // глКонтрольныйСимволEAN()


//******************************************************************************
// СформироватьШтрихкод(ПредвКод, ТипКода=13)
//
// Параметры:
//  ПредвКод - строка, содержащая символы из которых нужно сформировать штрих-код для EAN13 длина строки до 12 символов
//	ТипКода  - тип формируемого штрихкода. Возможные значения:
//		       13 - для формирования EAN 13 (по умолчанию)
//		        8  - для формирования EAN 8
// Возвращаемое значение:
//  Нет
//
// Описание:
//  На основании кода Номенклатуры и кода ОКЕИ формирует штрихкод в формате EAN
//
Функция СформироватьШтрихкод(ПредвКод, ТипКода=13) Экспорт

	Если ТипКода = 8 Тогда
		ИспКолво = 7;
	Иначе
		ИспКолво = 12;
	КонецЕсли;

	Штрихкод = Прав(СокрЛП(ПредвКод), ИспКолво);
	Штрихкод = ДополнитьСтрокуЛ(Штрихкод, "0", ИспКолво);
	Возврат Штрихкод + КонтрольныйСимволEAN(Штрихкод, ТипКода);
КонецФункции // глСформироватьШтрихкод()


//Получает строку Стр и длину результирующей строки Длина
//на выход получаем список значений со строками с длиной не более чем параметр Длина
//строки получаются обрубанием строки Стр на строки с длиной Длина

Функция РазбитьСтроку(Стр,Длина) экспорт
	сп=СоздатьОбъект("СписокЗначений");
	Пока СтрДлина(Стр)>Длина Цикл
		Стр1=Лев(Стр,Длина);
		Сп.ДобавитьЗначение(Стр1);
		Стр=Прав(Стр,СтрДлина(Стр)-Длина);
	КонецЦикла;
	Если СтрДлина(Стр)>0 Тогда
		Сп.ДобавитьЗначение(Стр);
	Иначе
		Если Сп.РазмерСписка()=0 Тогда
			Сп.ДобавитьЗначение(Стр);
		КонецЕсли;
	КонецЕсли;
	возврат Сп;
КонецФункции	// РазбитьСтроку


//******************************************************************************
//  ФРМ(ЧислЗнач, Валюта="", ВыводНулевого=0, РаздТриад="'")
//
// Параметры:
//  ЧислЗнач		- число, которое мы хотим форматировать
//  Валюта			- валюта (элемент справочника "Валюты") или пустое
//                    значение
//  ВыводНулевого	- строка, режим вывода нулевых значений. Возможные значения:
//  				  "0" - подавить вывод нулевых значений (по умолчанию)
//	 			       ""  - вывод нулевых.
//	РаздТриад		- разделитель триад.
//
// Возвращаемое значение:
//  Отформатированная строка
//
// Описание:
// 	Это процедура стандартного для данной конфигурации форматирования цен и сумм.
// 	По умолчанию не выводит нулевые значения и разделяет триады символом "'".
//  Для вывода нулевых значений в параметр ВыводНулевого нужно передать пустую
//  строку. В параметр РаздТриад можно передать символ, разделитель триад.
//  Если триады разделять не нужно, то в этот параметр нужно передать пустую
//  строку.
//
Функция ФРМ(ЧислЗнач, Валюта="", ВыводНулевого="0", РаздТриад="") Экспорт
	Перем РезСтрока, ФрмСтрока;

	РезСтрока = СокрЛ(Формат(ЧислЗнач, "Ч" + ВыводНулевого + "15.2." + РаздТриад));

	Если (ПустоеЗначение(РезСтрока) = 0) И (ПустоеЗначение(Валюта) = 0) Тогда
		РезСтрока = РезСтрока + " " + СокрП(Валюта.Наименование);
	КонецЕсли;

	Возврат РезСтрока;

КонецФункции // глФРМ()

//******************************************************************************
//  ФРМКоличество(Знач ЧислЗнач,ЧислоЗнаков="", РаздТриад=" ")
//
// Параметры:
//  ЧислЗнач  - число, которое мы хотим форматировать,
//  ЧислоЗнаков   - ,
//	РаздТриад - разделитель триад, по умолчанию - пробел.
//  РежимДробей - 0 не выводить дроби, 1 - выводить если есть
// Возвращаемое значение:
//  Отформатированная строка
//
// Описание:
//  Это процедура стандартного для данной конфигурации форматирования количества.
//
Функция ФРМКоличество(Знач ЧислЗнач,ЧислоЗнаков="0", РаздТриад=" ",РежимДробей=0) Экспорт

	Если РежимДробей=0 Тогда
		Стр=СокрЛ(Формат(ЧислЗнач,"Ч015."+Строка(ЧислоЗнаков)+"." +  РаздТриад));
	Иначе
		//выводим дроби если есть
		Если Цел(ЧислЗнач)=ЧислЗнач Тогда
		    Стр=СокрЛ(Формат(ЧислЗнач,"Ч015.0." +  РаздТриад));
		Иначе
			Стр=СокрЛ(Формат(ЧислЗнач,"Ч015."+Строка(ЧислоЗнаков)+"." +  РаздТриад));
		КонецЕсли;
	КонецЕсли;

	Возврат Стр;

КонецФункции //глФРМКоличество()


//******************************************************************************
// глСтр_ФРМ(Стр)
//
// Параметры:
//  Стр
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  заменяет спецсимволы до кода 32 на комбинацию ~хх~ где хх - код символа
//  Если хх<10 то выводится в формате 0х
Функция Стр_ФРМ(СтрИсточник) экспорт
	Перем Инд,Рез,Стр;
	Инд = 0;Рез=""; Стр=СокрЛП(СтрИсточник);
	Для Инд = 1 По СтрДлина(Стр) Цикл
		Символ=Сред(Стр,Инд,1);
		Если КодСимв(Символ)<32 Тогда
			Символ="~"+Формат(КодСимв(Символ),"Ч(0)2.0")+"~";
		КонецЕсли;
		Рез=Рез+Символ;
	КонецЦикла;
	возврат Рез;
КонецФункции //

//******************************************************************************
// ФРМ_Стр()
//
// Параметры:
//
//
// Возвращаемое значение:
//  строка исходная
//
// Описание:
//  восстанавливает строку из закодированной
//
Функция ФРМ_Стр(Стр) экспорт
	Перем Инд,Рез;
	Инд = 0;Рез=Стр;
	Для Инд = 0 По 32 Цикл
		Подстрока="~"+Формат(Инд,"Ч(0)2.0")+"~";                  ;
		Символ=Симв(Инд);
		Рез=СтрЗаменить(Рез,Подстрока,Символ);
	КонецЦикла;
	возврат Рез;
КонецФункции // ()


//делает список значений из строки с разделителями
//_Источник - строка с описанием списка
//_Разделитель - символ-разделитель

Функция ПолучитьСписокИзСтроки(_Источник,_Разделитель=";") Экспорт
Перем Текст,Стр,СЗ,Инд;
	 Текст=СоздатьОбъект("Текст");
	 Стр=СтрЗаменить(_Источник,_Разделитель,РазделительСтрок);
	 Текст.ДобавитьСтроку(Стр);
	 СЗ=СоздатьОбъект("СписокЗначений");
	 Для Инд=1 По Текст.КоличествоСтрок() Цикл
	 	Стр=СокрЛП(Текст.ПолучитьСтроку(Инд));
	 	СЗ.ДобавитьЗначение(Стр);
	 КонецЦикла;
	 возврат СЗ;
КонецФункции



//_____________________________________________________________________________
//Функция СравнитьСтроки
//Назначение:
//Параметры:
// две строки - если параметр Строго<>0 то сравниваются строки без учета регистров и длины
//иначе сравниваются чисто по символам (ПРИ ЭТОМ ЕСЛИ ДАЖЕ ОТЛИЧАЮТСЯ ТОЛЬКО В ПРАВЫХ ПРОБЕЛАХ ТО ВСЕ РАВНО НЕ РАВНЫЕ!)
//
//Возвращает:
//
Функция СравнитьСтроки(пСтрока1,пСтрока2,пСтрого=0) экспорт
	Перем лСтрока1,лСтрока2;
	лСтрока1=Строка(пСтрока1);
	лСтрока2=Строка(пСтрока2);

	Попытка
		Если пСтрого<>0 Тогда
			Если лСтрока1<>лСтрока2 Тогда
				возврат 0;
			Иначе
				возврат 1;
			КонецЕсли;  //
		Иначе
			Если ВРЕГ(СокрЛП(лСтрока1))<>ВРЕГ(СокрЛП(лСтрока2)) Тогда
				возврат 0;
			Иначе
				возврат 1;
			КонецЕсли;  //
		КонецЕсли;  //Строго=1
	Исключение
	КонецПопытки;

	возврат 0;

КонецФункции //глСравнитьСтроки


//На вход идет строка вида ггггммдд или дд.мм.гггг или дд.мм.гг
//на выход значение типа дата
//при некорректной строке на выходе идет пустая дата
Функция ДатаИзСтроки(Стр) Экспорт
	Попытка
		РазделителиДаты=".-/";
		
		Разделитель=Сред(Стр,3,1);//для случая 01.01.10
		ФорматДаты=2;
		Если Найти(РазделителиДаты,Разделитель)>0 Тогда
			ФорматДаты=1;
		Иначе
			Разделитель=Сред(Стр,2,1);//для случая 1.01.10
			Если Найти(РазделителиДаты,Разделитель)>0 Тогда
				ФорматДаты=1;
			КонецЕсли;	
		КонецЕсли;
		
		Если ФорматДаты=1 Тогда
			СтрокаПарсинг=Стр;
			
			Для Инд=1 По СтрДлина(РазделителиДаты) Цикл
				СимволРазделитель=Сред(РазделителиДаты,Инд,1);
				СтрокаПарсинг=СтрЗаменить(СтрокаПарсинг,СимволРазделитель,РазделительСтрок);
			КонецЦикла; 
			
			
			Попытка
				День=Число(СтрПолучитьСтроку(СтрокаПарсинг,1));
				Месяц=Число(СтрПолучитьСтроку(СтрокаПарсинг,2));
				Год=Число(СтрПолучитьСтроку(СтрокаПарсинг,3));
				Если Год<99 Тогда
					Год=2000+Год;
				КонецЕсли;
	
				Если День>31 Тогда
					Возврат ПолучитьПустоеЗначение("Дата");
				ИначеЕсли (Месяц=0)ИЛИ(Месяц>12) Тогда
					Возврат ПолучитьПустоеЗначение("Дата");
				КонецЕсли;
			Исключение
				//кривой формат
				Возврат ПолучитьПустоеЗначение("Дата");
			КонецПопытки;

			возврат Дата(Год,месяц,день);
		Иначе
			Год=Число(Лев(Стр,4));
			Месяц=Число(Сред(Стр,5,2));
			день=Число(Сред(Стр,7));
			возврат Дата(Год,месяц,день);
		КонецЕсли;
	Исключение
		Возврат ПолучитьПустоеЗначение("Дата");
	КонецПопытки;
КонецФункции	// ДатаИзСтроки

//Форматирование строки времени
//На вход идет строка вида ЧЧММСС и строка форматирования
//на выход строка вида ЧЧ:ММ:СС или ЧЧ:ММ
//в зависимость от строки форматирования
//СтрокаФормата - возможные значения строки
//ЧЧ - подставляется значение часов
//ММ - подставляется значение минут
//СС - подставляется значение секунд
//остальные символы остаются как есть
Функция ФРМ_Время(Стр,СтрокаФормата="ЧЧ:ММ:СС") Экспорт
	Часы=Формат(Число(Лев(Стр,2)),"Ч(0)2.0");
	Минуты=Формат(Число(Сред(Стр,3,2)),"Ч(0)2.0");
	Секунды=Формат(Число(Сред(Стр,6,2)),"Ч(0)2.0");
	возврат СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрокаФормата,"ЧЧ",Часы),"ММ",Минуты),"СС",Секунды);
КонецФункции


Функция ПодготовитьСтрокуДляВыгрузки(Стр) Экспорт
	возврат СокрЛП(СтрЗаменить(СтрЗаменить(Стр,РазделительСтрок,"%ПС%"),",","%ЗПТ%"));
КонецФункции
