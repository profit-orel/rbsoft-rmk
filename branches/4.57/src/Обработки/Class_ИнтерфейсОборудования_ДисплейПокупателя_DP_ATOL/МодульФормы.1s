//Конфигурация для платформы "1С:Предприятие 7.7" РБ-Софт:Рабочее место кассира.
//Версия 4.43 от 19.07.10 20:54:19
//Назначение: Автоматизация POS-узлов в магазинах (Point of sale).
//(c) Баинов Евгений, ООО "РБ-Софт" 2006, г.Улан-Удэ, проспект 50-летия Октября,21А,офис 110 
//e-mail: bainov@rb-soft.ru  icq: 73718937, телефоны: (3012) 44-03-57, 44-76-42, 44-86-58
//---------------------------------------------------------------------------------------
//Данная программа является свободным программным обеспечением.
//Вы вправе распространять ее и/или модифицировать в соответствии с условиями версии 2 
//либо по вашему выбору с условиями более поздней версии Стандартной Общественной Лицензии GNU,
//опубликованной Free Software Foundation. 
//Мы распространяем данную программу в надежде на то, что она будет вам полезной, 
//однако НЕ ПРЕДОСТАВЛЯЕМ НА НЕЕ НИКАКИХ ГАРАНТИЙ, 
//в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
//и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ.
//Для получения более подробной информации ознакомьтесь со Стандартной Общественной Лицензией GNU.
//Вместе с данной программой вы должны были получить экземпляр Стандартной Общественной Лицензии GNU.
//Если вы его не получили, сообщите об этом в Free Software Foundation, Inc.,
//59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//_______________________________________________________________________________________
//Имя модуля:
// <Вставить имя модуля>
//_______________________________________________________________________________________
//Разработчик: Баинов Евгений, e-mail: bainov@rb-soft.ru , icq: 73718937
//_______________________________________________________________________________________
//Назначение модуля:
// <Вставить описание модуля>
//
//_______________________________________________________________________________________
Перем _База Экспорт;

Функция Этот(Конт) Возврат Конт; КонецФункции
Функция Сам() Возврат Этот(Контекст) КонецФункции





//------------------------------------ ------------------------------------
Процедура Конструктор()
	_База = Этот(Контекст).ПолучитьБазовыйКласс("ИнтерфейсОборудования.ДисплейПокупателя");
	Сам=Сам();
	Сам.СовместимыеВерсииДрайвера="6.2.3.252/6.7.2.392";
КонецПроцедуры // Конструктор

//------------------------------------ ------------------------------------
Процедура Деструктор()
КонецПроцедуры // Деструктор


Функция ПолучитьВерсиюДрайвера() Экспорт
	Сам=Сам();
	Возврат Сам.Драйвер.Версия;
КонецФункции

Функция ПолучитьПараметрыУстройства(ОбъектУстройство=0) Экспорт
	Сам=Сам();
	Если ПустоеЗначение(ОбъектУстройство)=1 Тогда
		лУстройство=Сам.Устройство;
	Иначе
		лУстройство=ОбъектУстройство;
	КонецЕсли;
	Сам.СделатьТекущим(лУстройство);

	Сам.Параметры.КоличествСтолбцовДисплея=Сам.Драйвер.КолвоСтолбцовДисплея;
	Сам.Параметры.КоличествСтрокДисплея=Сам.Драйвер.КолвоСтрокДисплея ;
	Сам.Параметры.Модель=Сам.Драйвер.Модель;

	Сам.Параметры.ЕстьМигание=Сам.Драйвер.ЕстьМигание;
	Сам.Параметры.ЕстьЯркость=Сам.Драйвер.ЕстьЯркость;
	Сам.Параметры.ЕстьСтатус=Сам.Драйвер.ЕстьСтатус;
	Сам.Параметры.КоличествоОкон=Сам.Драйвер.КолвоОкон;
	Сам.Параметры.ЕстьСамотестирование=Сам.Драйвер.ЕстьСамотестирование;
	Сам.Параметры.ЕстьЗагрузкаШрифтов=Сам.Драйвер.ЕстьЗагрузкаШрифтов;
	Сам.Параметры.ЕстьЗадержкаМеждуСимволами=Сам.Драйвер.ЕстьЗадержкаМеждуСимволами;
	Сам.Параметры.ЕстьВертикальнаяБегущаяСтрока=Сам.Драйвер.ЕстьВертикБегСтрока;
	Сам.Параметры.ЕстьГоризонтальнаяБегущаяСтрока=Сам.Драйвер.ЕстьГоризБегСтрока;
	Сам.Параметры.ЕстьДескрипторы=Сам.Драйвер.ЕстьДескрипторы;
	Сам.Параметры.КоличествоДескрипторов=Сам.Драйвер.КолвоДескрипторов;

	возврат 1;
КонецФункции

//!!!
Функция СделатьТекущим(ОбъектУстройство=0) Экспорт
	Сам=Сам();

	Если ПустоеЗначение(ОбъектУстройство)=1 Тогда
		Сам.Драйвер.НомерТекущегоУстройства=Сам.НомерЛУ;
	Иначе
		Сам.Драйвер.НомерТекущегоУстройства=ОбъектУстройство.НомерЛУ;
	КонецЕсли;
	Возврат Сам.ПроверкаОшибокДрайвера();
КонецФункции
//!!!
Функция ВключениеОборудования(ОбъектУстройство) Экспорт
	Сам=Сам();

	Если Сам.СделатьТекущим()=0 Тогда
		Возврат 0;
	ИначеЕсли Сам.Драйвер.УстройствоВключено=0 Тогда
		Сам.Драйвер.УстройствоВключено=1;
	КонецЕсли;
	Возврат Сам.ПроверкаОшибокДрайвера();
КонецФункции
//!!!
Функция ОтключениеОборудования(ОбъектУстройство) Экспорт
	Сам=Сам();
	Если Сам.СделатьТекущим()=0 Тогда
		Возврат 0;
	ИначеЕсли Сам.Драйвер.УстройствоВключено=1 Тогда
		Сам.Драйвер.УстройствоВключено=0;
		КодОшибки=Сам.КодОшибкиДрайвера();
	КонецЕсли;
	Возврат Сам.ПроверкаОшибокДрайвера();
КонецФункции


//!!!должна удалить все настройки драйвера оборудования
Функция УдалитьНастройкиДрайвера() Экспорт

	Сам=Сам();

	Попытка

		Пока Сам.Драйвер.КоличествоУстройств>1 Цикл
			Сам.Драйвер.ИндексТекущегоУстройства=1;
			Сам.Драйвер.УдалитьУстройство();
			Если Сам.ПроверкаОшибокДрайвера()=0 Тогда
				Возврат 0;
			КонецЕсли;
		КонецЦикла;

	Исключение
		Сам.УстановитьКодИОшибку(10000,"Сбой при очистке списка логических устройств драйвера ФР.
		|"+ОписаниеОшибки()+"
		|Состояние драйвера:"+Сам.ОписаниеОшибкиДрайвера());
		Возврат 0;
	КонецПопытки;


	Возврат 1;
КонецФункции

//!!!должна возвражщать ИД драйвера.
//ИД задается в секции DRIVERS файла rmkconfig
Функция ИдентификаторДрайвера() Экспорт
	Возврат "DP_ATOL";
КонецФункции

//!!!количество логических устройств
Функция КоличествоЛУ() Экспорт
	Сам=Сам();
	возврат Сам.Драйвер.КоличествоУстройств;
КонецФункции

////!!!_____________________________________________________________________________
//Функция ПолучитьНомерПорта
//Назначение:
//Параметры:
//Порт
//
//Возвращает:
//
Функция ПолучитьНомерПорта(Порт)  Экспорт

	Если Порт.ТипПорта="RS" Тогда
	    Возврат Порт.НомерПорта();
	//ИначеЕсли Порт.ТипПорта="KEYBOARD" Тогда
	//	Возврат 100;
	//
	//ИначеЕсли Порт.ТипПорта="USB" Тогда
	//	Возврат Порт.НомерПорта();
	КонецЕсли;
	Возврат -1;

КонецФункции //ПолучитьНомерПорта

////!!!_____________________________________________________________________________
//Функция ПолучитьНомерСкоростиОбмена
//Назначение:
//Параметры:
//ТипДрайвера="ШтрихМ" номер скорости для драйвера ФР от Штриха
//иначе номер скорости для драйверов Атол
//Скорость
//
//Возвращает:
//
Функция ПолучитьНомерСкоростиОбмена(Скорость)

	//1 – 300 бод
	//2 – 600 бод
	//3 – 1200 бод
	//4 – 2400 бод
	//5 – 4800 бод
	//7 – 9600 бод
	//9 – 14400 бод
	//10 – 19200 бод
	//12 – 38400 бод
	//14 – 57600 бод
	//18 – 115200 бод
	Если Скорость=300 Тогда
		возврат 1;
	ИначеЕсли Скорость=600 Тогда
		возврат 2;
	ИначеЕсли Скорость=1200 Тогда
		возврат 3;
	ИначеЕсли Скорость=2400 Тогда
		возврат 4;
	ИначеЕсли Скорость=4800 Тогда
		возврат 5;
	ИначеЕсли Скорость=9600 Тогда
		возврат 7;
	ИначеЕсли Скорость=14400 Тогда
		возврат 9;
	ИначеЕсли Скорость=19200 Тогда
		возврат 10;
	ИначеЕсли Скорость=38400 Тогда
		возврат 12;
	ИначеЕсли Скорость=57600 Тогда
		возврат 14;
	ИначеЕсли Скорость=115200 Тогда
		возврат 18;
	КонецЕсли;  //
КонецФункции //ПолучитьНомерСкоростиОбмена


////!!!_____________________________________________________________________________
//Функция глПолучитьНомерЧетности
//Назначение:
//Параметры:
//
//
//Возвращает:
//
Функция ПолучитьНомерЧетности(пЧетность)

	Четность=ВРЕГ(пЧетность);
	Если Четность="NONE" Тогда
		возврат 0;
	ИначеЕсли Четность="ODD" Тогда
		возврат 1;
	ИначеЕсли Четность="EVEN" Тогда
		возврат 2;
	ИначеЕсли Четность="MARK" Тогда
		возврат 3;
	ИначеЕсли Четность="SPACE" Тогда
		возврат 4;
	КонецЕсли;  //
	возврат 0;
КонецФункции //глПолучитьНомерЧетности
///!!!
Функция ПолучитьНомерСтопБитов(СтопБитов)
	Если СтопБитов=2 Тогда
		Возврат 2;
	КонецЕсли;
	Возврат 0;
КонецФункции

///!!!
Функция ПолучитьНомерБитовДанных(БитовДанных)
	Если БитовДанных=7 Тогда
		Возврат 3;
	КонецЕсли;
	Возврат 4;
КонецФункции


Функция ПолучитьНомерМодели()
//Значение
//0 	Datecs DPD-201
//1 	EPSON (Firich, POSIFLEX, NCR и др.)
//2  	Меркурий ДП-01
//3  	Меркурий ДП-02
//4  	Меркурий ДП-03
//5 	Flytech
//6 	GIGATEK DSP800/850
//7  	Штрих-FrontMaster
//8 	EPSON USA (POSIFLEX-PD302C и др.)
//9 	POSIFLEX USB (POSIFLEX-PD2300)
//10	IPC
//11 	GIGATEK DSP
//12 	TEC LIUST51
//255 	Демо-дисплей

	Сам=Сам();
	Данные=Сам.Устройство.Данные;

	возврат Данные.Модель;
КонецФункции

Функция УстановитьПараметрыУстройства(ОбъектУстройство) Экспорт
	Сам=Сам();
	Если ПустоеЗначение(ОбъектУстройство)=0 Тогда
		Сам.НомерЛУ=ОбъектУстройство.НомерЛУ;
		Сам.Устройство=ОбъектУстройство;
	КонецЕсли;

	Если Сам.СделатьТекущим()=0 Тогда
		Возврат 0;
	КонецЕсли;

	НомерПорта=ПолучитьНомерПорта(ОбъектУстройство.Данные.Порт);
	Если НомерПорта<0 Тогда
		Сам.УстановитьКодИОшибку(10000,"Некорректный номер порта для ККМ "+ОбъектУстройство.Данные.Наименование);
		возврат 0;
	КонецЕсли;


	Сам.Драйвер.УстройствоВключено=0;
	Сам.Драйвер.НаименованиеТекущегоУстройства=ОбъектУстройство.Данные.Наименование;
	Сам.Драйвер.НомерПорта = НомерПорта;
	Сам.Драйвер.СкоростьОбмена = ПолучитьНомерСкоростиОбмена(ОбъектУстройство.Данные.Порт.Скорость);
	Сам.Драйвер.Четность = ПолучитьНомерЧетности(ОбъектУстройство.Данные.Порт.Четность);
	Сам.Драйвер.БитыДанных= ПолучитьНомерБитовДанных(ОбъектУстройство.Данные.Порт.Четность);
	Сам.Драйвер.СтопБиты=ПолучитьНомерБитовДанных(ОбъектУстройство.Данные.Порт.БитовДанных);
	Сам.Драйвер.Модель=ПолучитьНомерМодели();

	Сам.Драйвер.УстройствоВключено=1;

	Если Сам.ПроверкаОшибокДрайвера()=0 Тогда
		Сам.УстановитьКодИОшибку(10000,"Не удалось установить параметры оборудования."+Сам.ПоследняяОшибка());
		Возврат 0;
	КонецЕсли;

	Пока Сам.КоличествоОкон()<>1 Цикл
		Сам.УдалитьОкно();
	КонецЦикла;

	Сам.СоздатьОкно (
	0,
	0,
	ОбъектУстройство.Данные.КоличествоСтрок,
	ОбъектУстройство.Данные.ДлинаСтрокиДП,
	ОбъектУстройство.Данные.КоличествоСтрок,
	ОбъектУстройство.Данные.ДлинаСтрокиДП);


	Сам.Драйвер.ClearViewPorts();
	Сам.Драйвер.AddViewPort(
	0,
	0,
	ОбъектУстройство.Данные.КоличествоСтрок,
	ОбъектУстройство.Данные.ДлинаСтрокиДП);

	возврат 1;
КонецФункции

//!!!
Функция ДобавитьУстройство() Экспорт
	Сам=Сам();

	Если Сам.Драйвер.AddDevice()=0 Тогда
		Возврат 1;
	КонецЕсли;
	Сам.УстановитьКодИОшибку(10000,"Не удалось добавить устройство дисплей покупателя");
	Возврат 0;
КонецФункции
//!!!
Функция КодОшибкиДрайвера() Экспорт
	Сам=Сам();
	возврат Сам.Драйвер.Результат;
КонецФункции

//!!!
Функция ОписаниеОшибкиДрайвера() Экспорт
	Сам=Сам();
	возврат Сам.Драйвер.ОписаниеРезультата;
КонецФункции

Процедура НастройкаСвойств() Экспорт
	Сам=Сам();
	Сам.Драйвер.ПоказатьСтраницуСвойств();
КонецПроцедуры

Процедура ПоказатьТекстПоз(У,Х,пСтрока,Атрибут) Экспорт
	Сам=Сам();
	Сам.Драйвер.ПоказатьТекстПоз(У,Х,пСтрока,Атрибут);
КонецПроцедуры

Процедура ПоказатьТекст(пСтрока,Атрибут=0) Экспорт
	Сам=Сам();
	Сам.Драйвер.ПоказатьТекст(пСтрока,Атрибут);
КонецПроцедуры


Процедура СоздатьОкно (Yобласти, Xобласти, Вобласти, Шобласти, Вокна, Шокна)  Экспорт
	Сам=Сам();
	Сам.Драйвер.СоздатьОкно(Yобласти, Xобласти, Вобласти, Шобласти, Вокна, Шокна);
КонецПроцедуры

Процедура УдалитьОкно() Экспорт
	Сам=Сам();
	Сам.Драйвер.УдалитьОкно();
КонецПроцедуры

Функция КоличествоОкон() Экспорт
	Сам=Сам();
	возврат Сам.Драйвер.КолвоОкон;
КонецФункции

Процедура ОчиститьТекст(НомерОкна=0) Экспорт
	Сам=Сам();
	Если НомерОкна<>0  Тогда
		Сам.ТекущееОкно=НомерОкна;
	КонецЕсли;
	Сам.Драйвер.ОчиститьТекст();
КонецПроцедуры


Процедура ОчиститьДисплей(НомерОкна=0) Экспорт
	Сам=Сам();
	Если НомерОкна<>0  Тогда
		Сам.ТекущееОкно=НомерОкна;
	КонецЕсли;
	Сам.Драйвер.Очистить();
КонецПроцедуры

//------------------------------------ ------------------------------------
Процедура ПриОткрытии()
//#if _NOW_PREPARE_CLASS
	Форма.Параметр._ПриОткрытии(); // для отладки класса
//#endif // _NOW_PREPARE_CLASS
КонецПроцедуры // ПриОткрытии

