//Конфигурация для платформы "1С:Предприятие 7.7" РБ-Софт:Рабочее место кассира.
//Версия 4.43 от 19.07.10 20:54:19
//Назначение: Автоматизация POS-узлов в магазинах (Point of sale).
//(c) Баинов Евгений, ООО "РБ-Софт" 2006, г.Улан-Удэ, проспект 50-летия Октября,21А,офис 110 
//e-mail: bainov@rb-soft.ru  icq: 73718937, телефоны: (3012) 44-03-57, 44-76-42, 44-86-58
//---------------------------------------------------------------------------------------
//Данная программа является свободным программным обеспечением.
//Вы вправе распространять ее и/или модифицировать в соответствии с условиями версии 2 
//либо по вашему выбору с условиями более поздней версии Стандартной Общественной Лицензии GNU,
//опубликованной Free Software Foundation. 
//Мы распространяем данную программу в надежде на то, что она будет вам полезной, 
//однако НЕ ПРЕДОСТАВЛЯЕМ НА НЕЕ НИКАКИХ ГАРАНТИЙ, 
//в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
//и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ.
//Для получения более подробной информации ознакомьтесь со Стандартной Общественной Лицензией GNU.
//Вместе с данной программой вы должны были получить экземпляр Стандартной Общественной Лицензии GNU.
//Если вы его не получили, сообщите об этом в Free Software Foundation, Inc.,
//59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//_______________________________________________________________________________________
//Имя модуля:
// <Вставить имя модуля>
//_______________________________________________________________________________________
//Разработчик: Баинов Евгений, e-mail: bainov@rb-soft.ru , icq: 73718937
//_______________________________________________________________________________________
//Назначение модуля:
// <Вставить описание модуля>
//
//_______________________________________________________________________________________
Перем _База Экспорт;

Функция Этот(Конт) Возврат Конт; КонецФункции
Функция Сам() Возврат Этот(Контекст) КонецФункции




//------------------------------------ ------------------------------------
Процедура Конструктор()
	_База = Этот(Контекст).ПолучитьБазовыйКласс("ИнтерфейсОборудования.Считыватель");
	Сам=Сам();
	Сам.СовместимыеВерсииДрайвера="6.4.1.359/6.8.1.461";
КонецПроцедуры // Конструктор

//------------------------------------ ------------------------------------
Процедура Деструктор()
КонецПроцедуры // Деструктор


Функция ПолучитьВерсиюДрайвера() Экспорт
	Сам=Сам();
	Возврат Сам.Драйвер.Версия;
КонецФункции

Функция НомерТекущегоУстройства() Экспорт
	Сам=Сам();
	Возврат Сам.Драйвер.НомерТекущегоУстройства;
КонецФункции


//!!!
Функция СделатьТекущим(ОбъектУстройство=0) Экспорт
	Сам=Сам();

	Если ПустоеЗначение(ОбъектУстройство)=1 Тогда
		Сам.Драйвер.НомерТекущегоУстройства=Сам.НомерЛУ;
	Иначе
		Сам.Драйвер.НомерТекущегоУстройства=ОбъектУстройство.НомерЛУ;
	КонецЕсли;
	Возврат Сам.ПроверкаОшибокДрайвера();
КонецФункции
//!!!
Функция ВключениеОборудования(ОбъектУстройство) Экспорт
	Сам=Сам();

	Если Сам.СделатьТекущим()=0 Тогда
		Возврат 0;
	ИначеЕсли Сам.Драйвер.УстройствоВключено=0 Тогда
		Сам.Драйвер.УстройствоВключено=1;
	КонецЕсли;
	Возврат Сам.ПроверкаОшибокДрайвера();
КонецФункции
//!!!
Функция ОтключениеОборудования(ОбъектУстройство) Экспорт
	Сам=Сам();
	Если Сам.СделатьТекущим()=0 Тогда
		Возврат 0;
	ИначеЕсли Сам.Драйвер.УстройствоВключено=1 Тогда
		Сам.Драйвер.УстройствоВключено=0;
		КодОшибки=Сам.КодОшибкиДрайвера();
	КонецЕсли;
	Возврат Сам.ПроверкаОшибокДрайвера();
КонецФункции


//!!!должна удалить все настройки драйвера оборудования
Функция УдалитьНастройкиДрайвера() Экспорт

	Сам=Сам();

	Попытка

		Пока Сам.Драйвер.КоличествоУстройств>1 Цикл
			Сам.Драйвер.ИндексТекущегоУстройства=1;
			Сам.Драйвер.УдалитьУстройство();
			Если Сам.ПроверкаОшибокДрайвера()=0 Тогда
				Возврат 0;
			КонецЕсли;
		КонецЦикла;

	Исключение
		Сам.УстановитьКодИОшибку(10000,"Сбой при очистке списка логических устройств драйвера ФР.
		|"+ОписаниеОшибки()+"
		|Состояние драйвера:"+Сам.ОписаниеОшибкиДрайвера());
		Возврат 0;
	КонецПопытки;


	Возврат 1;
КонецФункции

//!!!должна возвражщать ИД драйвера.
//ИД задается в секции DRIVERS файла rmkconfig
Функция ИдентификаторДрайвера() Экспорт
	Возврат "INPUT_ATOL";
КонецФункции

//!!!количество логических устройств
Функция КоличествоЛУ() Экспорт
	Сам=Сам();
	возврат Сам.Драйвер.КоличествоУстройств;
КонецФункции

////!!!_____________________________________________________________________________
//Функция ПолучитьНомерПорта
//Назначение:
//Параметры:
//Порт
//
//Возвращает:
//
Функция ПолучитьНомерПорта(Порт)  Экспорт

	Если Порт.ТипПорта="RS" Тогда
	    Возврат Порт.НомерПорта();
	ИначеЕсли Порт.ТипПорта="KEYBOARD" Тогда
		Возврат 100;
	//
	//ИначеЕсли Порт.ТипПорта="USB" Тогда
	//	Возврат Порт.НомерПорта();
	КонецЕсли;
	Возврат -1;

КонецФункции //ПолучитьНомерПорта

////!!!_____________________________________________________________________________
//Функция ПолучитьНомерСкоростиОбмена
//Назначение:
//Параметры:
//ТипДрайвера="ШтрихМ" номер скорости для драйвера ФР от Штриха
//иначе номер скорости для драйверов Атол
//Скорость
//
//Возвращает:
//
Функция ПолучитьНомерСкоростиОбмена(Скорость)

	//1 – 300 бод
	//2 – 600 бод
	//3 – 1200 бод
	//4 – 2400 бод
	//5 – 4800 бод
	//7 – 9600 бод
	//9 – 14400 бод
	//10 – 19200 бод
	//12 – 38400 бод
	//14 – 57600 бод
	//18 – 115200 бод
	Если Скорость=300 Тогда
		возврат 1;
	ИначеЕсли Скорость=600 Тогда
		возврат 2;
	ИначеЕсли Скорость=1200 Тогда
		возврат 3;
	ИначеЕсли Скорость=2400 Тогда
		возврат 4;
	ИначеЕсли Скорость=4800 Тогда
		возврат 5;
	ИначеЕсли Скорость=9600 Тогда
		возврат 7;
	ИначеЕсли Скорость=14400 Тогда
		возврат 9;
	ИначеЕсли Скорость=19200 Тогда
		возврат 10;
	ИначеЕсли Скорость=38400 Тогда
		возврат 12;
	ИначеЕсли Скорость=57600 Тогда
		возврат 14;
	ИначеЕсли Скорость=115200 Тогда
		возврат 18;
	КонецЕсли;  //
КонецФункции //ПолучитьНомерСкоростиОбмена


////!!!_____________________________________________________________________________
//Функция глПолучитьНомерЧетности
//Назначение:
//Параметры:
//
//
//Возвращает:
//
Функция ПолучитьНомерЧетности(пЧетность)

	Четность=ВРЕГ(пЧетность);
	Если Четность="NONE" Тогда
		возврат 0;
	ИначеЕсли Четность="ODD" Тогда
		возврат 1;
	ИначеЕсли Четность="EVEN" Тогда
		возврат 2;
	ИначеЕсли Четность="MARK" Тогда
		возврат 3;
	ИначеЕсли Четность="SPACE" Тогда
		возврат 4;
	КонецЕсли;  //
	возврат 0;
КонецФункции //глПолучитьНомерЧетности
///!!!
Функция ПолучитьНомерСтопБитов(СтопБитов)
	Если СтопБитов=2 Тогда
		Возврат 2;
	КонецЕсли;
	Возврат 0;
КонецФункции

///!!!
Функция ПолучитьНомерБитовДанных(БитовДанных)
	Если БитовДанных=7 Тогда
		Возврат 3;
	КонецЕсли;
	Возврат 4;
КонецФункции


Функция ПолучитьНомерМодели()
	//0 Сканер штрих-кода
	//1 Ридер магнитных карт
	//5 Клавиатура OT-201
	//6 Проксимити-считыватель СКД-ЕМ-1
	//7 Механический ключ
	//8 Проксимити-считыватель PERCo

	Сам=Сам();
	Данные=Сам.Устройство.Данные;
	//Если Данные.Модель=0 Тогда
	//	Возврат 0;
	//ИначеЕсли Данные.Модель=1 Тогда
	//	Возврат 1;
	//ИначеЕсли Данные.Модель=5 Тогда
	//	Возврат 5;
	//ИначеЕсли Данные.Модель=6 Тогда
	//	Возврат 6;
	//ИначеЕсли Данные.Модель=7 Тогда
	//	Возврат 7;
	//ИначеЕсли Данные.Модель=8 Тогда
	//	Возврат 8;
	//Иначе
	//	Сам.УстановитьКодИОшибку(10000,"Некорректный номер модели устройства ввода. Номер модели="+Данные.Модель);
	//КонецЕсли;
	возврат Данные.Модель;
КонецФункции

Функция УстановитьПараметрыУстройства(ОбъектУстройство) Экспорт
	Сам=Сам();
	Если ПустоеЗначение(ОбъектУстройство)=0 Тогда
		Сам.НомерЛУ=ОбъектУстройство.НомерЛУ;
		Сам.Устройство=ОбъектУстройство;
	КонецЕсли;

	Если Сам.СделатьТекущим()=0 Тогда
		Возврат 0;
	КонецЕсли;

	НомерПорта=ПолучитьНомерПорта(ОбъектУстройство.Данные.Порт);
	Если НомерПорта<0 Тогда
		Сам.УстановитьКодИОшибку(10000,"Некорректный номер порта для ККМ "+ОбъектУстройство.Данные.Наименование);
		возврат 0;
	КонецЕсли;

	//для отладки

	Сам.Драйвер.RaiseException=0;


	Сам.Драйвер.УстройствоВключено=0;
	Сам.Драйвер.НаименованиеТекущегоУстройства=ОбъектУстройство.Данные.Наименование;
	Сам.Драйвер.НомерПорта = НомерПорта;
	Сам.Драйвер.СкоростьОбмена = ПолучитьНомерСкоростиОбмена(ОбъектУстройство.Данные.Порт.Скорость);
	Сам.Драйвер.Четность = ПолучитьНомерЧетности(ОбъектУстройство.Данные.Порт.Четность);
	Сам.Драйвер.БитыДанных= ПолучитьНомерБитовДанных(ОбъектУстройство.Данные.Порт.Четность);
	Сам.Драйвер.СтопБиты=ПолучитьНомерБитовДанных(ОбъектУстройство.Данные.Порт.БитовДанных);

	//В некоторых версиях драйверов Атол ошибка в русском идентификаторе метода.
	//реализовано "Чуствительность" вместо "Чувствительность"
	//Программа завершается аварийно.
	//Поэтому используем только совместимые драйверы.

	Сам.Драйвер.Чувствительность=ОбъектУстройство.Данные.Порт.Чувствительность;

	Сам.Драйвер.Модель=ПолучитьНомерМодели();

	Сам.Драйвер.Префикс=Сам.ПарсерПрефикса(ОбъектУстройство.Данные.Префикс);
	Сам.Драйвер.Суффикс=Сам.ПарсерПрефикса(ОбъектУстройство.Данные.Суффикс);

	Сам.Драйвер.СтараяВерсия=0;

	Сам.Драйвер.УстройствоВключено=1;

	Если Сам.ПроверкаОшибокДрайвера()=0 Тогда
		Сам.УстановитьКодИОшибку(10000,"Не удалось установить параметры оборудования."+Сам.ПоследняяОшибка());
		Возврат 0;
	КонецЕсли;
	возврат 1;
КонецФункции

Функция ПолучитьПараметрыУстройства(ОбъектУстройство=0) Экспорт
	Сам=Сам();
	Если ПустоеЗначение(ОбъектУстройство)=1 Тогда
		лУстройство=Сам.Устройство;
	Иначе
		лУстройство=ОбъектУстройство;
	КонецЕсли;
	Сам.СделатьТекущим(лУстройство);

	Попытка
		Сам.Параметры.Результат=Сам.Драйвер.Результат;
	Исключение
		сообщить("Ошибка:"+ОписаниеОшибки());
	КонецПопытки;
	Попытка
		Сам.Параметры.ОписаниеРезультата=Сам.Драйвер.ОписаниеРезультата;
	Исключение
		сообщить("Ошибка:"+ОписаниеОшибки());
	КонецПопытки;

	Попытка
		Сам.Параметры.ГенерироватьИсключение=Сам.Драйвер.ГенерироватьИсключение;
	Исключение
		сообщить("Ошибка:"+ОписаниеОшибки());
	КонецПопытки;

	//Попытка
	//	Сам.Параметры.ApplicationHandle=Сам.Драйвер.ApplicationHandle;
	//Исключение
	//	сообщить("Ошибка:"+ОписаниеОшибки());
	//КонецПопытки;
	Попытка
		Сам.Параметры.Версия=Сам.Драйвер.Версия;
	Исключение
		сообщить("Ошибка:"+ОписаниеОшибки());
	КонецПопытки;
	Попытка
		Сам.Параметры.ДемонстрационныйРежим=Сам.Драйвер.ДемонстрационныйРежим;
	Исключение
		сообщить("Ошибка:"+ОписаниеОшибки());
	КонецПопытки;
	Попытка
		Сам.Параметры.ОписаниеДрайвера=Сам.Драйвер.ОписаниеДрайвера;
	Исключение
		сообщить("Ошибка:"+ОписаниеОшибки());
	КонецПопытки;
	Попытка
		Сам.Параметры.ПараметрыУстройств=Сам.Драйвер.ПараметрыУстройств;
	Исключение
		сообщить("Ошибка:"+ОписаниеОшибки());
	КонецПопытки;
	Попытка
		Сам.Параметры.ПараметрыУстройства=Сам.Драйвер.ПараметрыУстройства;
	Исключение
		сообщить("Ошибка:"+ОписаниеОшибки());
	КонецПопытки;
	Попытка
		Сам.Параметры.ИндексТекущегоУстройства=Сам.Драйвер.ИндексТекущегоУстройства;
	Исключение
		сообщить("Ошибка:"+ОписаниеОшибки());
	КонецПопытки;
	Попытка
		Сам.Параметры.НомерТекущегоУстройства=Сам.Драйвер.НомерТекущегоУстройства;
	Исключение
		сообщить("Ошибка:"+ОписаниеОшибки());
	КонецПопытки;
	Попытка
		Сам.Параметры.НаименованиеТекущегоУстройства=Сам.Драйвер.НаименованиеТекущегоУстройства;
	Исключение
		сообщить("Ошибка:"+ОписаниеОшибки());
	КонецПопытки;
	Попытка
		Сам.Параметры.КоличествоУстройств=Сам.Драйвер.КоличествоУстройств;
	Исключение
		сообщить("Ошибка:"+ОписаниеОшибки());
	КонецПопытки;

	Попытка
		Сам.Параметры.НомерПорта=Сам.Драйвер.НомерПорта;
	Исключение
		сообщить("Ошибка:"+ОписаниеОшибки());
	КонецПопытки;
	Попытка
		Сам.Параметры.ОписаниеПорта=Сам.Драйвер.ОписаниеПорта;
	Исключение
		сообщить("Ошибка:"+ОписаниеОшибки());
	КонецПопытки;
	Попытка
		Сам.Параметры.Четность=Сам.Драйвер.Четность;
	Исключение
		сообщить("Ошибка:"+ОписаниеОшибки());
	КонецПопытки;
	Попытка
		Сам.Параметры.БитыДанных=Сам.Драйвер.БитыДанных;
	Исключение
		сообщить("Ошибка:"+ОписаниеОшибки());
	КонецПопытки;
	Попытка
		Сам.Параметры.СтопБиты=Сам.Драйвер.СтопБиты;
	Исключение
		сообщить("Ошибка:"+ОписаниеОшибки());
	КонецПопытки;
	Попытка
		Сам.Параметры.Чувствительность=Сам.Драйвер.Чувствительность;
	Исключение
		сообщить("Ошибка:"+ОписаниеОшибки());
	КонецПопытки;
	Попытка
		Сам.Параметры.Модель=Сам.Драйвер.Модель;
	Исключение
		сообщить("Ошибка:"+ОписаниеОшибки());
	КонецПопытки;
	Попытка
		Сам.Параметры.Суффикс=Сам.Драйвер.Суффикс;
	Исключение
		сообщить("Ошибка:"+ОписаниеОшибки());
	КонецПопытки;
	Попытка
		Сам.Параметры.Префикс=Сам.Драйвер.Префикс;
	Исключение
		сообщить("Ошибка:"+ОписаниеОшибки());
	КонецПопытки;
	Попытка
		Сам.Параметры.ОписаниеУстройства=Сам.Драйвер.ОписаниеУстройства;
	Исключение
		сообщить("Ошибка:"+ОписаниеОшибки());
	КонецПопытки;
	Попытка
		Сам.Параметры.МодельГруппа=Сам.Драйвер.МодельГруппа;
	Исключение
		сообщить("Ошибка:"+ОписаниеОшибки());
	КонецПопытки;
	Попытка
		Сам.Параметры.УстройствоВключено=Сам.Драйвер.УстройствоВключено;
	Исключение
		сообщить("Ошибка:"+ОписаниеОшибки());
	КонецПопытки;
	//Попытка
	//	Сам.Параметры.УстройствоВключеноПриСтарте=Сам.Драйвер.УстройствоВключеноПриСтарте;
	//Исключение
	//	сообщить("Ошибка:"+ОписаниеОшибки());
	//КонецПопытки;
	Попытка
		Сам.Параметры.НомерСообщения=Сам.Драйвер.НомерСообщения;
	Исключение
		сообщить("Ошибка:"+ОписаниеОшибки());
	КонецПопытки;

	Попытка
		Сам.Параметры.ЧислоДанныхВОчереди=Сам.Драйвер.ЧислоДанныхВОчереди;
	Исключение
		сообщить("Ошибка:"+ОписаниеОшибки());
	КонецПопытки;
	Попытка
		Сам.Параметры.ПосылкаДанных=Сам.Драйвер.ПосылкаДанных;
	Исключение
		сообщить("Ошибка:"+ОписаниеОшибки());
	КонецПопытки;
	//Попытка
	//	Сам.Параметры.DeviceEnableOnStart=Сам.Драйвер.DeviceEnableOnStart;
	//Исключение
	//	сообщить("Ошибка:"+ОписаниеОшибки());
	//КонецПопытки;
	Попытка
		Сам.Параметры.Данные=Сам.Драйвер.Данные;
	Исключение
		сообщить("Ошибка:"+ОписаниеОшибки());
	КонецПопытки;
	Попытка
		Сам.Параметры.Трек1=Сам.Драйвер.Трек1;
	Исключение
		сообщить("Ошибка:"+ОписаниеОшибки());
	КонецПопытки;
	Попытка
		Сам.Параметры.Трек2=Сам.Драйвер.Трек2;
	Исключение
		сообщить("Ошибка:"+ОписаниеОшибки());
	КонецПопытки;
	Попытка
		Сам.Параметры.Трек3=Сам.Драйвер.Трек3;
	Исключение
		сообщить("Ошибка:"+ОписаниеОшибки());
	КонецПопытки;
	Попытка
		Сам.Параметры.СтараяВерсия=Сам.Драйвер.СтараяВерсия;
	Исключение
		сообщить("Ошибка:"+ОписаниеОшибки());
	КонецПопытки;

	Возврат Сам.ПроверкаОшибокДрайвера();
КонецФункции

Процедура СоздатьСтруктуруПараметров() Экспорт
	Сам=Сам();
	Сам.Параметры.Вставить("Результат",0);
	Сам.Параметры.Вставить("ОписаниеРезультата","");
	Сам.Параметры.Вставить("ГенерироватьИсключение",0);

	//Сам.Параметры.Вставить("ApplicationHandle",0);
	Сам.Параметры.Вставить("Версия",0);
	Сам.Параметры.Вставить("ДемонстрационныйРежим",0);
	Сам.Параметры.Вставить("ОписаниеДрайвера","");
	Сам.Параметры.Вставить("ПараметрыУстройств","");
	Сам.Параметры.Вставить("ПараметрыУстройства","");
	Сам.Параметры.Вставить("ИндексТекущегоУстройства",0);
	Сам.Параметры.Вставить("НомерТекущегоУстройства",0);
	Сам.Параметры.Вставить("НаименованиеТекущегоУстройства","");
	Сам.Параметры.Вставить("КоличествоУстройств",0);
	Сам.Параметры.Вставить("НомерПорта",0);
	Сам.Параметры.Вставить("ОписаниеПорта","");
	Сам.Параметры.Вставить("СкоростьОбмена",0);
	Сам.Параметры.Вставить("Четность",0);
	Сам.Параметры.Вставить("БитыДанных",0);
	Сам.Параметры.Вставить("СтопБиты",0);
	Сам.Параметры.Вставить("Чувствительность",0);
	Сам.Параметры.Вставить("Модель",0);
	Сам.Параметры.Вставить("Суффикс","");
	Сам.Параметры.Вставить("Префикс","");
	Сам.Параметры.Вставить("ОписаниеУстройства","");
	Сам.Параметры.Вставить("МодельГруппа",0);
	Сам.Параметры.Вставить("УстройствоВключено",0);
	//Сам.Параметры.Вставить("DeviceEnableOnStart",0);
	Сам.Параметры.Вставить("НомерСообщения",0);
	Сам.Параметры.Вставить("ЧислоДанныхВОчереди",0);
	Сам.Параметры.Вставить("ПосылкаДанных",0);
	Сам.Параметры.Вставить("Автоотключение",0);
	Сам.Параметры.Вставить("Данные","");
	Сам.Параметры.Вставить("Трек1","");
	Сам.Параметры.Вставить("Трек2","");
	Сам.Параметры.Вставить("Трек3","");
	Сам.Параметры.Вставить("СтараяВерсия",0);

КонецПроцедуры
//!!!
Функция ДобавитьУстройство() Экспорт
	Сам=Сам();

	Если Сам.Драйвер.AddDevice()=0 Тогда
		Возврат 1;
	КонецЕсли;
	Сам.УстановитьКодИОшибку(10000,"Не удалось добавить устройство-считыватель");
	Возврат 0;
КонецФункции
//!!!
Функция КодОшибкиДрайвера() Экспорт
	Сам=Сам();
	возврат Сам.Драйвер.Результат;
КонецФункции

//!!!
Функция ОписаниеОшибкиДрайвера() Экспорт
	Сам=Сам();
	возврат Сам.Драйвер.ОписаниеРезультата;
КонецФункции


//преобразовывает сырые данные драйвера в реальную информацию для дальнейшей обработки
Функция ПолучитьДанные(Событие,ДанныеДрайвера) Экспорт
	возврат "";
КонецФункции

Процедура НастройкаСвойств() Экспорт
	Сам=Сам();
	Сам.Драйвер.ПоказатьСтраницуСвойств();
КонецПроцедуры


//Вызывается при обработке внешнего события от устройств ввода
//определяет источник события по содержимому параметров процедуры ОбработкаВнешнегоСобытия
//возвращает:
//Сканер - событие пришло от сканера штрихкода
//Ридер - событие пришло от ридера магнитных карт
//Ключ - событие от механического ключа
//Радиоридер - событие от считывателя проксимити

Функция ПолучитьИсточникВнешнегоСобытия(Источник,Событие="",ДанныеДрайвера="") Экспорт
    Если Источник="BarCodeScaner" Тогда
		возврат "Сканер";
	ИначеЕсли Источник="MagneticStripeCardReader" Тогда
		возврат "Ридер";
	ИначеЕсли Источник="KeyPad" Тогда
		возврат "Ключ";
	ИначеЕсли Источник="RadioReader" Тогда
		возврат "Радиоридер";
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции


//абстрактная функция
Функция ПолучитьДанныеСканера(Событие,ДанныеДрайвера) Экспорт

	Сам=Сам();

	Описатель=глФабрикаОбъектов.Новый("ОписательСобытияСканера");
	Описатель.ТипОбъекта="Штрихкод";

	Сам.Драйвер.EventNumber=ДанныеДрайвера;
	Описатель.Данные=Сам.Драйвер.ScanData;

	возврат Описатель;
КонецФункции

//абстрактная функция
Функция ПолучитьДанныеРидера(Событие,ДанныеДрайвера) Экспорт

	Сам=Сам();

	Описатель=глФабрикаОбъектов.Новый("ОписательСобытияРидера");
	Описатель.ТипОбъекта="Карта";

	Сам.Драйвер.EventNumber=ДанныеДрайвера;
	Описатель.Данные=Сам.Драйвер.ScanData;

	лТрек1=Сам.Драйвер.Трек1;
	лТрек2=Сам.Драйвер.Трек2;
	лТрек3=Сам.Драйвер.Трек3;

	НомерЛУ=Сам.НомерТекущегоУстройства();

	//Блок для работы с клавиатурным ридером в режиме альт-кодов
	//Стр=0;
	//Если глТО.КэшСканеров.НайтиСтроку("НомерЛУ",НомерЛУ,,1)=1 Тогда
	//	Сканер=глТО.КэшСканеров.Сканер;
	//	Если Сканер.РежимАльтКодов=1 Тогда
	//		СтрокаMSR_ISO=Сам.ПолучитьСтрокуИзКодовANSI(Описатель.Данные);
	//		Сам.РаскодироватьMSR_ISO(СтрокаMSR_ISO,лТрек1,лТрек2,лТрек3);
	//		Описатель.Данные=СтрокаMSR_ISO;
	//	КонецЕсли;
	//КонецЕсли;

	Описатель.Дорожка1=Сам.ОбработатьШК(лТрек1);
	Описатель.Дорожка2=Сам.ОбработатьШК(лТрек2);
	Описатель.Дорожка3=Сам.ОбработатьШК(лТрек3);


	возврат Описатель;
КонецФункции

//абстрактная функция
Функция ПолучитьДанныеКлюча(Событие,ДанныеДрайвера) Экспорт
	Сам=Сам();

	Описатель=глФабрикаОбъектов.Новый("ОписательСобытияКлюча");
	Описатель.ТипОбъекта="Ключ";

	Сам.Драйвер.EventNumber=ДанныеДрайвера;
	Описатель.Данные=Сам.Драйвер.ScanData;

	возврат Описатель;
КонецФункции

//абстрактная функция
Функция ПолучитьДанныеРадиоРидера(Событие,ДанныеДрайвера) Экспорт
	Сам=Сам();

	Описатель=глФабрикаОбъектов.Новый("ОписательСобытияРадиоРидера");
	Описатель.ТипОбъекта="Радиоридер";

	Сам.Драйвер.EventNumber=ДанныеДрайвера;
	Описатель.Данные=Сам.Драйвер.ScanData;

	возврат Описатель;

КонецФункции

Функция ОчиститьОчередь() Экспорт
	Сам=Сам();
	Пока Сам.Драйвер.DataCount>0 Цикл
		Сам.Драйвер.EventNumber=1;
		Сам.Драйвер.DeleteEvent();
		Если Сам.ПроверкаОшибокДрайвера()=0 Тогда
			Сам.УстановитьКодИОшибку(10000,"Не удалось очистить очередь."+Сам.ПоследняяОшибка());
			Возврат 0;
		КонецЕсли;
	КонецЦикла;
	возврат 1;
КонецФункции


//возвращает 1 - если есть входные данные драйвера, требующие обработки
//           0 - входных данных нет
Функция ЕстьДанныеНаВходе(Источник,Событие,Данные) Экспорт
	Сам=Сам();
	Если Сам.Драйвер.DataCount>0 Тогда
		Если Сам.Драйвер.НомерТекущегоУстройства=Сам.НомерЛУ Тогда
			Возврат 1;
		КонецЕсли;
	КонецЕсли;

	возврат 0;
КонецФункции

//------------------------------------ ------------------------------------
Процедура ПриОткрытии()
//#if _NOW_PREPARE_CLASS
	Форма.Параметр._ПриОткрытии(); // для отладки класса
//#endif // _NOW_PREPARE_CLASS
КонецПроцедуры // ПриОткрытии

