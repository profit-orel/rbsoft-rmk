//Конфигурация для платформы "1С:Предприятие 7.7" РБ-Софт:Рабочее место кассира.
//Версия 4.43 от 19.07.10 20:54:19
//Назначение: Автоматизация POS-узлов в магазинах (Point of sale).
//(c) Баинов Евгений, ООО "РБ-Софт" 2006, г.Улан-Удэ, проспект 50-летия Октября,21А,офис 110 
//e-mail: bainov@rb-soft.ru  icq: 73718937, телефоны: (3012) 44-03-57, 44-76-42, 44-86-58
//---------------------------------------------------------------------------------------
//Данная программа является свободным программным обеспечением.
//Вы вправе распространять ее и/или модифицировать в соответствии с условиями версии 2 
//либо по вашему выбору с условиями более поздней версии Стандартной Общественной Лицензии GNU,
//опубликованной Free Software Foundation. 
//Мы распространяем данную программу в надежде на то, что она будет вам полезной, 
//однако НЕ ПРЕДОСТАВЛЯЕМ НА НЕЕ НИКАКИХ ГАРАНТИЙ, 
//в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
//и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ.
//Для получения более подробной информации ознакомьтесь со Стандартной Общественной Лицензией GNU.
//Вместе с данной программой вы должны были получить экземпляр Стандартной Общественной Лицензии GNU.
//Если вы его не получили, сообщите об этом в Free Software Foundation, Inc.,
//59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//_______________________________________________________________________________________
//Имя модуля:
// <Вставить имя модуля>
//_______________________________________________________________________________________
//Разработчик: Баинов Евгений, e-mail: bainov@rb-soft.ru , icq: 73718937
//_______________________________________________________________________________________
//Назначение модуля:
// <Вставить описание модуля>
//
//_______________________________________________________________________________________
Перем _База Экспорт;

Перем СтрокаПодключения Экспорт;//строка для подключения к базе данных

Перем ПутьКбазе Экспорт;
Перем МенеджерЗапросов Экспорт;

Функция Этот(Конт) Возврат Конт; КонецФункции
Функция Сам() Возврат Этот(Контекст) КонецФункции


Процедура СжатьТаблицу(ИмяТаблицы) Экспорт
	Таб=СоздатьОбъект("Xbase");
    Таб.ОткрытьФайл(глОбработатьМакроСтроку("%DB%\"+ИмяТаблицы+".dbf"));
	Таб.Сжать();
	Таб.ЗакрытьФайл();
КонецПроцедуры	// СжатьТаблицу

Функция СоздатьТаблицу(ПутьКФайлу,ОписательТаблицы)
	Попытка

		Сам=Сам();

		ДБ  =СоздатьОбъект("XBase");

		Для Инд=1 По ОписательТаблицы.Количество() Цикл
			ОписательПоля=ОписательТаблицы.Получить(Инд);
			ДБ.ДобавитьПоле(ОписательПоля.Имя,ОписательПоля.Тип,ОписательПоля.Длина,ОписательПоля.Точность);
		КонецЦикла;

		глДебаг("Создание файла "+ПутьКФайлу);
		Состояние("Создание файла "+ПутьКФайлу);
		ДБ.СоздатьФайл(ПутьКФайлу,"");
		ДБ.ЗакрытьФайл();
		Возврат 1;
	Исключение

		Сам.УстановитьОшибку("СоздатьТаблицу("+ПутьКФайлу+","+ОписательТаблицы+")
		|"+ОписаниеОшибки());
		Возврат 0;
	КонецПопытки;

КонецФункции	// СоздатьТаблицу


Функция СкопироватьДанные(ФайлОткуда,ФайлКуда)
	Сам=Сам();

	ДБ=СоздатьОбъект("XBase");
	ДБ.ОткрытьФайл(ФайлОткуда,"",0);
	Если ДБ.Открыта()=0 Тогда

		Сам.УстановитьОшибку("Не удалось открыть файл "+ФайлОткуда);
		Возврат 0;
	КонецЕсли;


	СписокПолейТекущейБазы=СоздатьОбъект("СписокЗначений");
	Для НомерПоля=1 По ДБ.КоличествоПолей() Цикл
		Имя="";Тип="";Длина=0;Точность=0;
		ДБ.ОписаниеПоля(НомерПоля,Имя,Тип,Длина,Точность);
		СписокПолейТекущейБазы.ДобавитьЗначение(ВРЕГ(Имя));
	КонецЦикла;


	ДБ1=СоздатьОбъект("XBase");
	ДБ1.ОткрытьФайл(ФайлКуда,"",0);
	Если ДБ1.Открыта()=0 Тогда
		Сам.УстановитьОшибку("Не удалось открыть файл "+ФайлКуда);
		Возврат 0;
	КонецЕсли;
	ДБ1.АвтоСохранение(1);

	ДБ.Первая();
	Пока ДБ.ВКонце()=0 Цикл

		ДБ1.Добавить();
		Для Инд=1 По ДБ1.КоличествоПолей() Цикл

			Имя="";Тип="";Длина=0;Точность=0;
			ДБ1.ОписаниеПоля(Инд,Имя,Тип,Длина,Точность);

			Если СписокПолейТекущейБазы.Принадлежит(ВРЕГ(Имя))=1 Тогда

				Значение=ДБ.ПолучитьЗначениеПоля(Имя);
				Если Тип="C" Тогда
					Значение=Строка(Значение);
				ИначеЕсли Тип="N" Тогда
					Значение=Число(Значение);
				Иначе
					Значение=Строка(Значение);
				КонецЕсли;

				ДБ1.УстановитьЗначениеПоля(Имя,Значение);
			КонецЕсли;


		КонецЦикла;
		ДБ1.Записать();

		ДБ.Следующая();
	КонецЦикла;
	ДБ1.ЗакрытьФайл();
	ДБ.ЗакрытьФайл();
	Возврат 1;
КонецФункции	// СкопироватьДанные


//по описанию таблицы создает файл базы данных в случае отсутствия файла
//в случае существования файла проверяет структуру файла и добавлет необходимые поля
//должно срабатывать при дальнейшем обновлении базы данных и автоматической реструктуризации


Функция ПроверитьТаблицу(ИмяТаблицы,ОписательТаблицы) Экспорт

	Сам=Сам();

	ПутьКФайлу=глОбработатьМакроСтроку("%DB%\"+ИмяТаблицы+".DBF");


	Если ФС.СуществуетФайл(ПутьКФайлу)=0 Тогда
		возврат СоздатьТаблицу(ПутьКФайлу,ОписательТаблицы);
	Иначе
		ДБ=СоздатьОбъект("XBase");
		Попытка
			ДБ.ОткрытьФайл(ПутьКФайлу,"",1);
			Если ДБ.Открыта()=0 Тогда
				Сам.УстановитьОшибку("Не удалось получить доступ к файлу "+ПутьКФайлу);
				возврат 0;
			КонецЕсли;

		Исключение
			Сам.УстановитьОшибку("Не удалось получить доступ к файлу "+ПутьКФайлу);
			возврат 0;
		КонецПопытки;

		СписокПолейТекущейБазы=СоздатьОбъект("СписокЗначений");
		Для НомерПоля=1 По ДБ.КоличествоПолей() Цикл
			Имя="";Тип="";Длина=0;Точность=0;
			ДБ.ОписаниеПоля(НомерПоля,Имя,Тип,Длина,Точность);
			СписокПолейТекущейБазы.ДобавитьЗначение(Имя);
		КонецЦикла;


		СтруктураНеCовпадает=0;
		ОписательПоля="";

		Для Инд=1 По ОписательТаблицы.Количество() Цикл
			ИмяПоля="";
			ОписательПоля=ОписательТаблицы.Получить(Инд,ИмяПоля);
			Если СписокПолейТекущейБазы.Принадлежит(ОписательПоля.Имя)=1 Тогда
				НомерПоля=ДБ.НомерПоля(ОписательПоля.Имя);
				Имя="";Тип="";Длина=0;Точность=0;
				ДБ.ОписаниеПоля(НомерПоля,Имя,Тип,Длина,Точность);
				Если (НомерПоля<>Инд)или(ОписательПоля.НомерТипа<>Тип)или (ОписательПоля.Длина<>Длина) или (ОписательПоля.Точность<>Точность) Тогда
					СтруктураНеCовпадает=1;
				КонецЕсли;
			Иначе
				СтруктураНеCовпадает=1;
			КонецЕсли;



			Если СтруктураНеCовпадает=1 Тогда
				Прервать;
			КонецЕсли;

		КонецЦикла;
		ДБ.ЗакрытьФайл();

		Если СтруктураНеCовпадает=1 Тогда

			ВременныйКаталог=КаталогИБ()+"New_Stru";

			Если глФайловаяСистема.СуществуетКаталог(ВременныйКаталог)=0 Тогда
				Если глФайловаяСистема.СоздатьКаталог(ВременныйКаталог)=0 Тогда
					Сам.УстановитьОшибку("Реструктуризация.Не удалось создать каталог "+ВременныйКаталог);
					Возврат 0;
				КонецЕсли;
			КонецЕсли;

			ВременныйФайл=ВременныйКаталог+"\"+ИмяТаблицы+".dbf";
			БАКФайл=КаталогИБ()+"New_Stru\"+ИмяТаблицы+".bak";
			Если ФС.СуществуетФайл(ВременныйФайл)=1 Тогда
				ФС.УдалитьФайл(ВременныйФайл);
				Если ФС.СуществуетФайл(ВременныйФайл)=1 Тогда
					Сам.УстановитьОшибку("Реструктуризация.Не удалось удалить "+ВременныйФайл);
					Возврат 0;
				КонецЕсли;
			КонецЕсли;

			Если СоздатьТаблицу(ВременныйФайл,ОписательТаблицы)=0 Тогда
				Сам.УстановитьОшибку("Реструктуризация.Не удалось создать "+ВременныйФайл);
				Возврат 0;
			Иначе
				//копируем данные из таблицы в базе данных во временную таблицу
				//потом замещаем таблицу БД созданной с новой структурой

				Если СкопироватьДанные(ПутьКФайлу,ВременныйФайл)=0 Тогда
				    Сам.УстановитьОшибку("Реструктуризация.Не удалось скопировать данные
					|из "+ПутьКФайлу+"
					|в  "+ВременныйФайл);
					Возврат 0;
				КонецЕсли;

				ФС.ПереименоватьФайл(ПутьКФайлу,БАКФайл,1);
				ФС.ПереименоватьФайл(ВременныйФайл,ПутьКФайлу,1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	возврат 1;
КонецФункции	// ПроверитьТаблицу(ТЗСтруктураБазы.ИмяТаблицы,ТЗСтруктураБазы.ОписательТаблицы)



Процедура Инициализация()
	_База.Инициализация();

	ПутьКБазе=глОбработатьМакроСтроку("%DB%");

	СтрокаПодключения="Provider=VFPOLEDB.1;Data Source="+ПутьКБазе+";Mode=Share Deny None;Extended Properties="""";User ID="""";Mask Password=False;Cache Authentication=False;Encrypt Password=False;Collating Sequence=RUSSIAN;DSN=""""";
	
КонецПроцедуры	// Инициализация



//------------------------------------ ------------------------------------
Процедура ПриОткрытии()
////#if _NOW_PREPARE_CLASS
	Форма.Параметр._ПриОткрытии(); // для отладки класса
////#endif // _NOW_PREPARE_CLASS
КонецПроцедуры // ПриОткрытии

Функция СоздатьКоннектор() Экспорт
	ОбъектКоннектор=СоздатьОбъект("OLEDBData");
	Возврат ОбъектКоннектор;
КонецФункции


//соединяемся с базой данных через коннектор, создаем менеджер запросов, кэшируем таблицы

Функция Подключение() Экспорт

	Сам=Сам();

	Если Сам.ПроверитьБазу()=1 Тогда
		Попытка
			Сам.СостояниеПодключения=Сам.Коннектор.Соединение(СтрокаПодключения);
			
			МенеджерЗапросов=Сам.Коннектор.СоздатьКоманду();
	
			Если Debug=1 Тогда
				МенеджерЗапросов.Отладка(1);
			КонецЕсли;

			ТЗ=Сам.ПолучитьЗаписиИзТаблицыПоПолю("gpgoods","ID","");//делаем один запрос. Следующие запросы делаются значительно быстрее
			ТЗ=Сам.ПолучитьЗаписиИзТаблицыПоПолю("goods","ID","");
			ТЗ=Сам.ПолучитьЗаписиИзТаблицыПоПолю("barcodes","ID","");
			ТЗ=Сам.ПолучитьЗаписиИзТаблицыПоПолю("cards","ID","");
			ТЗ=Сам.ПолучитьЗаписиИзТаблицыПоПолю("checkh","ID","");
			ТЗ=Сам.ПолучитьЗаписиИзТаблицыПоПолю("checkt","IDPARENT","");
			ТЗ=Сам.ПолучитьЗаписиИзТаблицыПоПолю("pays","IDPARENT","");
			ТЗ=Сам.ПолучитьЗаписиИзТаблицыПоПолю("reporth","ID","");



		Исключение
			глДебаг("_База.СостояниеПодключения=ПоставщикДанных.Соединение(СтрокаПодключения):"+ОписаниеОшибки());
			возврат 0;
		КонецПопытки;

        возврат 1;
	КонецЕсли;

	возврат 0;
КонецФункции	// Подключение


Процедура Отключение() Экспорт
	Сам=Сам();
	Сам.Коннектор.Закрыть();
	_База.СостояниеПодключения=0;

КонецПроцедуры

//------------------------------------ ------------------------------------
Процедура Конструктор()

	_База = Этот(Контекст).ПолучитьБазовыйКласс("БД");
	
	Сам=Сам();
	
	Инициализация();
КонецПроцедуры // Конструктор


Процедура Деструктор()

	Если _База.СостояниеПодключения<>0 Тогда
		Отключение();
	КонецЕсли;
	
КонецПроцедуры	// Деструктор




Процедура ОчиститьТаблицу(ИмяТаблицы) Экспорт
	Сам=Сам();
	
	ТекстЗапроса=Сам.ТекстЗапроса_ОчиститьТаблицу(ИмяТаблицы);
	Сам.ВыполнитьЗапрос(ТекстЗапроса);
КонецПроцедуры	// ОчиститьТаблицу




//Ищет все записи в таблице с именем ИмяТаблицы по полю с именем ИмяПоля со значением, равным ЗначениеПоля
//Если Имя поля не указано, то получаем все записи из таблицы
//ДопУсловие - Можно наложить еще одно дополнительное условие. Его необходимо описать в Параметре ДопУсловие на языке SQL условие в секции Where
//пример:
//  ТЗ=ПолучитьЗаписиИзТаблицыПоПолю("checkh",,,"(status=1) and (date>='"+НачДатаСтр+"') and (date<='"+КонДатаСтр+"')","date,time,NumDoc");
//СтрокаСортировки - порядок сортировки полей. Перечислить через запятую поля для сортировки результата запроса


Функция ПолучитьЗаписиИзТаблицыПоПолю(ИмяТаблицы,ИмяПоля="",ЗначениеПоля="",ДопУсловие="",СтрокаСортировки="",КоличествоЗаписей=0,СписокПолей="*") Экспорт
    Сам=Сам();
	ТекстЗапроса=Сам.ТекстЗапроса_ПолучитьЗаписиИзТаблицыПоПолю(ИмяТаблицы,СписокПолей,ИмяПоля,ЗначениеПоля,ДопУсловие,СтрокаСортировки,КоличествоЗаписей);

	ТЗ=Сам.ВыполнитьЗапрос(ТекстЗапроса);
	Возврат ТЗ;
КонецФункции


Функция ПолучитьЗаписиИзТаблицы(ИмяТаблицы,Условие="",СтрокаСортировки="",КоличествоЗаписей=0) Экспорт
	Если КоличествоЗаписей=0 Тогда
		ТекстЗапроса="Select * from "+ИмяТаблицы+" Order By Name;";
	Иначе
		ТекстЗапроса="Select Top "+КоличествоЗаписей+" * from "+ИмяТаблицы+" Order By Name;";
	КонецЕсли;	

//	глДебаг(ТекстЗапроса,"ПолучитьЗаписиИзТаблицы");

	Сам=Сам();

	ТЗ=Сам.ВыполнитьЗапрос(ТекстЗапроса);
	Возврат ТЗ;
КонецФункции


Функция УдалитьОбъект(Объект)  Экспорт
Перем Данные;
	Сам=Сам();
	Попытка
		ВидОбъекта=Объект.Вид();
		Данные=Объект.Данные;
	Исключение
		Попытка
			ВидОбъекта=Объект._Вид;
			Данные=Объект;
		Исключение
		КонецПопытки;

	КонецПопытки;


	
	ТекстЗапроса=Сам.ТекстЗапроса_УдалитьОбъект(Данные);
	Попытка
		Сам.ВыполнитьЗапрос(ТекстЗапроса);
		Возврат 1;
	Исключение
		//#curmeth
		Сам.УстановитьОшибку("УдалитьОбъект() "+ОписаниеОшибки());

		Возврат 0;
	КонецПопытки;



КонецФункции


//СтруктураОтбора - Структура, каждая запись которого определяет условие отбора
//возвращает таблицу значений с отчетом
//Абстрактная
Функция ПолучитьТаблицуПродаж(СтруктураОтбора) Экспорт
	Сам=Сам();


	ТекстЗапроса="SELECT
	|Header.Id as ID,
	|Header.Date as Date,
	|Header.Time as Time,
	|Header.Date+Header.Time as DateTime,
	|Header.SN as SN,
	|Header.Z as Z,
	|Header.Operation as Operation,
	|Header.Num as NumCheck,
	|Header.Discrd as DiscountCard,
	|Header.Client as Client,
	|Header.SellerID as SellerID,
	|Header.SellName as SellerName,
	|Header.UserID as UserID,
	|Header.UserName as UserName,
	|Table.IdGood as IdGood,
	|Table.Name as Name,
	|Table.Count*Table.Coef as TotalCount,
	|Table.Count as Count,
	|Table.Unit as Unit,
	|Table.Coef as UnitCoef,
	|Table.Price as Price,
	|Table.Summ as Summ,
	|Table.Discount as Discount,
	|Table.Total as Total
	|From CheckT Table
	|Left Join CheckH Header
	|On Table.IDParent=Header.Id
	|";




	ДопУсловие="";
	Если СтруктураОтбора.Проведен.Использовать=1 Тогда
		ДопУсловие="(Header.Status"+СтруктураОтбора.Проведен.ТипСравнения+СтруктураОтбора.Проведен.Значение+")";
	КонецЕсли;

	Если СтруктураОтбора.ДатаНачала.Использовать=1 Тогда
		ДатаСтр=Сам.СтрокаДата(СтруктураОтбора.ДатаНачала.Значение);
		ДопУсловие=ДопУсловие+?(ДопУсловие="",""," and ")+"(Header.date"+СтруктураОтбора.ДатаНачала.ТипСравнения+"'"+ДатаСтр+"')";
	КонецЕсли;

	Если СтруктураОтбора.ДатаКонца.Использовать=1 Тогда
		ДатаСтр=Сам.СтрокаДата(СтруктураОтбора.ДатаКонца.Значение);
		ДопУсловие=ДопУсловие+?(ДопУсловие="",""," and ")+"(Header.date"+СтруктураОтбора.ДатаКонца.ТипСравнения+"'"+ДатаСтр+"')";
	КонецЕсли;

	Если СтруктураОтбора.Продавец.Использовать=1 Тогда

		ДопУсловие=ДопУсловие+?(ДопУсловие="",""," and ")+"((Header.SellerID='"+СтруктураОтбора.Продавец.Значение+"')OR((Header.SellerID='"+СтруктураОтбора.Продавец.Значение+"')AND(Header.UserID='')))";
	КонецЕсли;

	Если СтруктураОтбора.Кассир.Использовать=1 Тогда
		ДопУсловие=ДопУсловие+?(ДопУсловие="",""," and ")+"(Header.UserID='"+СтруктураОтбора.Кассир.Значение+"')";
	КонецЕсли;

	Если СтруктураОтбора.НомерСмены.Использовать=1 Тогда
		ДопУсловие=ДопУсловие+?(ДопУсловие="",""," and ")+"(Header.Z='"+СтруктураОтбора.НомерСмены.Значение+"')";
	КонецЕсли;

	Если СтруктураОтбора.ККМ.Использовать=1 Тогда
		ДопУсловие=ДопУсловие+?(ДопУсловие="",""," and ")+"(Header.SN="+СтруктураОтбора.ККМ.Значение+")";
	КонецЕсли;


	ТекстЗапроса=ТекстЗапроса+?(ДопУсловие="","","WHERE "+ДопУсловие);


	Возврат Сам.ВыполнитьЗапрос(ТекстЗапроса);
КонецФункции

Функция ВыполнитьЗапрос(ТекстЗапроса) Экспорт
	Сам=Сам();
	
	
	ТЗ=Сам.МенеджерЗапросов.ВыполнитьИнструкцию(ТекстЗапроса);

	Возврат ТЗ;
КонецФункции
