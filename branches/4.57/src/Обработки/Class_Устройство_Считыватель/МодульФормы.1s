//Конфигурация для платформы "1С:Предприятие 7.7" РБ-Софт:Рабочее место кассира.
//Версия 4.43 от 19.07.10 20:54:20
//Назначение: Автоматизация POS-узлов в магазинах (Point of sale).
//(c) Баинов Евгений, ООО "РБ-Софт" 2006, г.Улан-Удэ, проспект 50-летия Октября,21А,офис 110 
//e-mail: bainov@rb-soft.ru  icq: 73718937, телефоны: (3012) 44-03-57, 44-76-42, 44-86-58
//---------------------------------------------------------------------------------------
//Данная программа является свободным программным обеспечением.
//Вы вправе распространять ее и/или модифицировать в соответствии с условиями версии 2 
//либо по вашему выбору с условиями более поздней версии Стандартной Общественной Лицензии GNU,
//опубликованной Free Software Foundation. 
//Мы распространяем данную программу в надежде на то, что она будет вам полезной, 
//однако НЕ ПРЕДОСТАВЛЯЕМ НА НЕЕ НИКАКИХ ГАРАНТИЙ, 
//в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
//и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ.
//Для получения более подробной информации ознакомьтесь со Стандартной Общественной Лицензией GNU.
//Вместе с данной программой вы должны были получить экземпляр Стандартной Общественной Лицензии GNU.
//Если вы его не получили, сообщите об этом в Free Software Foundation, Inc.,
//59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//_______________________________________________________________________________________
//Имя модуля:
// <Вставить имя модуля>
//_______________________________________________________________________________________
//Разработчик: Баинов Евгений, e-mail: bainov@rb-soft.ru , icq: 73718937
//_______________________________________________________________________________________
//Назначение модуля:
// <Вставить описание модуля>
//
//_______________________________________________________________________________________
Перем _База Экспорт;


Функция Этот(Конт) Возврат Конт; КонецФункции
Функция Сам() Возврат Этот(Контекст) КонецФункции




Функция ТипУстройства() Экспорт
	возврат "Считыватель";
КонецФункции

//------------------------------------ ------------------------------------
Процедура Конструктор()
	_База = Этот(Контекст).ПолучитьБазовыйКласс("Устройство");
КонецПроцедуры // Конструктор


//------------------------------------ ------------------------------------
Процедура Деструктор()

КонецПроцедуры // Деструктор

Процедура ОтключитьОбработчик() Экспорт
	Сам=Сам();
	Сам.ИнтерфейсОборудования.ОтключениеОборудования(Сам);
КонецПроцедуры

Процедура ВключитьОбработчик() Экспорт
	Сам=Сам();
	Сам.ИнтерфейсОборудования.ВключениеОборудования(Сам);
КонецПроцедуры


Процедура ОчиститьОчередь() Экспорт
	Сам=Сам();
	Сам.ИнтерфейсОборудования.ОчиститьОчередь();
КонецПроцедуры



Функция ПолучитьДанныеСканера(Событие,ДанныеДрайвера) Экспорт
	Сам=Сам();
	возврат Сам.ИнтерфейсОборудования.ПолучитьДанныеСканера(Событие,ДанныеДрайвера);
КонецФункции

Функция ПолучитьДанныеРидера(Событие,ДанныеДрайвера) Экспорт
	Сам=Сам();
	возврат Сам.ИнтерфейсОборудования.ПолучитьДанныеРидера(Событие,ДанныеДрайвера);
КонецФункции

Функция ПолучитьДанныеКлюча(Событие,ДанныеДрайвера) Экспорт
	Сам=Сам();
	возврат Сам.ИнтерфейсОборудования.ПолучитьДанныеКлюча(Событие,ДанныеДрайвера);
КонецФункции

Функция ПолучитьДанныеРадиоРидера(Событие,ДанныеДрайвера) Экспорт
	Сам=Сам();
	возврат Сам.ИнтерфейсОборудования.ПолучитьДанныеКлюча(Событие,ДанныеДрайвера);
КонецФункции




//ЭтоСканер(Источник,Событие,ДанныеДрайвера)
//Вызывается при обработке внешнего события от устройств ввода
//определяет, является ли источник внешнего события сканером штрихкода по содержимомуму параметров процедуры ОбработкаВнешнегоСобытия
//возвращает:
//1 - событие пришло от сканера штрихкода
//0 - в противном случае
Функция ЭтоСканер(Источник,Событие="",ДанныеДрайвера="") Экспорт
	Сам=Сам();
	возврат ?(Сам.ИнтерфейсОборудования.ПолучитьИсточникВнешнегоСобытия(Источник,Событие,ДанныеДрайвера)="Сканер",1,0);
КонецФункции

Функция ЭтоРидер(Источник,Событие="",ДанныеДрайвера="") Экспорт
	Сам=Сам();
	возврат ?(Сам.ИнтерфейсОборудования.ПолучитьИсточникВнешнегоСобытия(Источник,Событие,ДанныеДрайвера)="Ридер",1,0);
КонецФункции

Функция ЭтоМеханическийКлюч(Источник,Событие="",ДанныеДрайвера="") Экспорт
	Сам=Сам();
	возврат ?(Сам.ИнтерфейсОборудования.ПолучитьИсточникВнешнегоСобытия(Источник,Событие,ДанныеДрайвера)="Ключ",1,0);
КонецФункции

Функция ЭтоРадиоРидер(Источник,Событие,ДанныеДрайвера) Экспорт
	Сам=Сам();
	возврат ?(Сам.ИнтерфейсОборудования.ПолучитьИсточникВнешнегоСобытия(Источник,Событие,ДанныеДрайвера)="Радиоридер",1,0);
КонецФункции


//Вызывается при обработке внешнего события от устройств ввода
//определяет источник события по содержимому параметров процедуры ОбработкаВнешнегоСобытия
//возвращает:
//Сканер - событие пришло от сканера штрихкода
//Ридер - событие пришло от ридера магнитных карт
//Ключ - событие от механического ключа
//Радиоридер - событие от считывателя проксимити

Функция ПолучитьИсточникВнешнегоСобытия(Источник,Событие="",ДанныеДрайвера="") Экспорт
	Сам=Сам();
	возврат Сам.ИнтерфейсОборудования.ПолучитьИсточникВнешнегоСобытия(Источник,Событие,ДанныеДрайвера);
КонецФункции

//найти объект по данным ридера
Функция ИдентификацияПоРидеру(СтруктураСобытия,ИД) Экспорт

	Описатель=СтруктураСобытия.Описатель;
	Если ПустаяСтрока(ИД)=0 Тогда


		Пользователь=глБД.ПолучитьПользователяПоКарте(ИД);

		Если ПустоеЗначение(Пользователь)=0 Тогда
			Описатель.КоличествоОбъектов=1;
			Описатель.Объект=Пользователь;
			Описатель.ТипОбъекта="Пользователь";
			Возврат 1;
		Иначе
			Карта=глБД.ПолучитьОбъектПоИД("ИДКарта",ИД);

			Если ПустоеЗначение(Карта)=0 Тогда
				Описатель.КоличествоОбъектов=1;
				Описатель.Объект=Карта;
				Описатель.ТипОбъекта="ИДКарта";
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат 0;
КонецФункции

Функция ПолучитьДанныеДорожки(Описатель,НомерДорожки)
	Если НомерДорожки=1 Тогда
		возврат Описатель.Дорожка1;
	ИначеЕсли НомерДорожки=2 Тогда
		возврат Описатель.Дорожка2;
	ИначеЕсли НомерДорожки=3 Тогда
		возврат Описатель.Дорожка3;
	КонецЕсли;
	Возврат "";
КонецФункции

//возвращает структуру с результатами обработки события

Функция ПолучитьВнешнееСобытие(Источник,Событие,ДанныеДрайвера) Экспорт

	Сам=Сам();

	СтруктураСобытия=НовыйОбъект("Событие");

	СтруктураСобытия.Источник=Сам.ПолучитьИсточникВнешнегоСобытия(Источник,Событие,ДанныеДрайвера);

	СтруктураСобытия.ДанныеДрайвера.Источник=Источник;
	СтруктураСобытия.ДанныеДрайвера.Событие=Событие;
	СтруктураСобытия.ДанныеДрайвера.Данные=ДанныеДрайвера;


	Если Сам.ЭтоСканер(Источник,Событие,ДанныеДрайвера)=1 Тогда

		Описатель=Сам.ПолучитьДанныеСканера(Событие,ДанныеДрайвера);

		СтруктураСобытия.Описатель=Описатель;
		СтруктураСобытия.Источник="Сканер";

		ШК=Описатель.Данные;
		Если ПустаяСтрока(ШК)=0 Тогда
			ТЗ=глБД.ПолучитьТоварыПоШтрихкоду(ШК,1);
			Описатель.Объекты=ТЗ;
			Описатель.КоличествоОбъектов=ТЗ.КоличествоСтрок();
			Описатель.Объект="";
			Если Описатель.КоличествоОбъектов>0 Тогда
				ТЗ.ПолучитьСтрокуПоНомеру(1);
				Описатель.Объект=ТЗ.Объект;


				Описатель.Единица=ТЗ.CodeUnit;
				Если ПустаяСтрока(Описатель.Единица)=1 Тогда
					Описатель.Единица="шт";
				КонецЕсли;


				Описатель.Коэффициент=ТЗ.Count;
				Если Описатель.Коэффициент=0 Тогда
					Описатель.Коэффициент=1;
				КонецЕсли;

				Описатель.ТипОбъекта="Товар";
			Иначе
				ИдентификацияПоРидеру(СтруктураСобытия,ШК);
			КонецЕсли;

		КонецЕсли;

	ИначеЕсли Сам.ЭтоРидер(Источник,Событие,ДанныеДрайвера)=1 Тогда
		Описатель=Сам.ПолучитьДанныеРидера(Событие,ДанныеДрайвера);

		СтруктураСобытия.Описатель=Описатель;
		СтруктураСобытия.Источник="Ридер";

		Обработал=0;
		НомерДорожкиКарт=глНастройки.ПолучитьКакЧисло("CARDS/PERSONAL_TRACK");
		Если НомерДорожкиКарт>0 Тогда
			ИД=ПолучитьДанныеДорожки(Описатель,НомерДорожкиКарт);
			Описатель.ДорожкаДляПоиска=ИД;
			Если ПустаяСтрока(ИД)=0 Тогда
				Команда=глПослатьКоманду(Сам,"ЗапросПользователяПоКарте",ИД,"БД");

				Если Команда.Обработано=1 Тогда

					Ответ=Команда.Описатель.Ответ;

					Если ПустоеЗначение(Ответ)=0 Тогда
						Описатель.КоличествоОбъектов=1;
						Описатель.Объект=Ответ;
						Описатель.ТипОбъекта="Пользователь";
						Обработал=1;
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		Если Обработал=0 Тогда
			НомерДорожкиКарт=глНастройки.ПолучитьКакЧисло("CARDS/DISCOUNT_TRACK");
			Если НомерДорожкиКарт>0 Тогда
				ИД=ПолучитьДанныеДорожки(Описатель,НомерДорожкиКарт);
				Описатель.ДорожкаДляПоиска=ИД;
				Если ПустаяСтрока(ИД)=0 Тогда
					Команда=глПослатьКоманду(Сам,"ЗапросДисконтнойКарты",ИД,"БД");

					Если Команда.Обработано=1 Тогда

						Карта=Команда.Описатель.Ответ;

						Если ПустоеЗначение(Карта)=0 Тогда
							Описатель.КоличествоОбъектов=1;
							Описатель.Объект=Карта;
							Описатель.ТипОбъекта="ИДКарта";
							Ответ=глПослатьКоманду(Сам,"ВыбратьДисконтнуюКарту",Карта,,"РМК");
							Обработал=Ответ.Обработано;;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если Обработал=0 Тогда
			НомерДорожкиКарт=глНастройки.ПолучитьКакЧисло("CARDS/BONUSCARD_TRACK");
			Если НомерДорожкиКарт>0 Тогда

				ИД=ПолучитьДанныеДорожки(Описатель,НомерДорожкиКарт);
				Описатель.ДорожкаДляПоиска=ИД;
				Если ПустаяСтрока(ИД)=0 Тогда
					Команда=глПослатьКоманду(Сам,"ЗапросБонуснойКарты",ИД,"БД");

					Если Команда.Обработано=1 Тогда

						Карта=Команда.Описатель.Ответ;

						Если ПустоеЗначение(Карта)=0 Тогда
							Описатель.КоличествоОбъектов=1;
							Описатель.Объект=Карта;
							Описатель.ТипОбъекта="БонуснаяКарта";
							Обработал=1;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;


		Если Обработал=0 Тогда
			НомерДорожкиКарт=глНастройки.ПолучитьКакЧисло("CARDS/DEBETCARD_TRACK");
			Если НомерДорожкиКарт>0 Тогда
				ИД=ПолучитьДанныеДорожки(Описатель,НомерДорожкиКарт);
				Описатель.ДорожкаДляПоиска=ИД;
				Если ПустаяСтрока(ИД)=0 Тогда
					Команда=глПослатьКоманду(Сам,"ЗапросДебетовойКарты",ИД,"БД");

					Если Команда.Обработано=1 Тогда

						Карта=Команда.Описатель.Ответ;

						Если ПустоеЗначение(Карта)=0 Тогда
							Описатель.КоличествоОбъектов=1;
							Описатель.Объект=Карта;
							Описатель.ТипОбъекта="ДебетоваяКарта";
							Обработал=1;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;



	ИначеЕсли Сам.ЭтоМеханическийКлюч(Источник,Событие,ДанныеДрайвера)=1 Тогда

		Описатель=Сам.ПолучитьДанныеКлюча(Событие,ДанныеДрайвера);

		СтруктураСобытия.Описатель=Описатель;
		СтруктураСобытия.Источник="Ключ";

		Если ПустаяСтрока(Описатель.Данные)=0 Тогда
			Пользователь=глБД.ПолучитьПользователяПоКарте(Описатель.Данные);

			Если ПустоеЗначение(Пользователь)=0 Тогда
				Описатель.КоличествоОбъектов=1;
				Описатель.Объект=Пользователь;
				Описатель.ТипОбъекта="Пользователь";
			КонецЕсли;

		КонецЕсли;

	ИначеЕсли Сам.ЭтоРадиоРидер(Источник,Событие,ДанныеДрайвера)=1 Тогда
		Описатель=Сам.ПолучитьДанныеРадиоридера(Событие,ДанныеДрайвера);

		СтруктураСобытия.Описатель=Описатель;
		СтруктураСобытия.Источник="Радиоридер";

		Дорожка=Описатель.Данные;

		ИдентификацияПоРидеру(СтруктураСобытия,Дорожка);
	КонецЕсли;

	Возврат СтруктураСобытия;
КонецФункции




//------------------------------------ ------------------------------------
Процедура ПриОткрытии()
//#if _NOW_PREPARE_CLASS
	Форма.Параметр._ПриОткрытии(); // для отладки класса
//#endif // _NOW_PREPARE_CLASS
КонецПроцедуры // ПриОткрытии

 // завершение класса Wizard1C++ !!
