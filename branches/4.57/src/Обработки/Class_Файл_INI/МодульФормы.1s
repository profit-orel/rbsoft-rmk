//Конфигурация для платформы "1С:Предприятие 7.7" РБ-Софт:Рабочее место кассира.
//Версия 4.43 от 19.07.10 20:54:20
//Назначение: Автоматизация POS-узлов в магазинах (Point of sale).
//(c) Баинов Евгений, ООО "РБ-Софт" 2006, г.Улан-Удэ, проспект 50-летия Октября,21А,офис 110 
//e-mail: bainov@rb-soft.ru  icq: 73718937, телефоны: (3012) 44-03-57, 44-76-42, 44-86-58
//---------------------------------------------------------------------------------------
//Данная программа является свободным программным обеспечением.
//Вы вправе распространять ее и/или модифицировать в соответствии с условиями версии 2 
//либо по вашему выбору с условиями более поздней версии Стандартной Общественной Лицензии GNU,
//опубликованной Free Software Foundation. 
//Мы распространяем данную программу в надежде на то, что она будет вам полезной, 
//однако НЕ ПРЕДОСТАВЛЯЕМ НА НЕЕ НИКАКИХ ГАРАНТИЙ, 
//в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
//и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ.
//Для получения более подробной информации ознакомьтесь со Стандартной Общественной Лицензией GNU.
//Вместе с данной программой вы должны были получить экземпляр Стандартной Общественной Лицензии GNU.
//Если вы его не получили, сообщите об этом в Free Software Foundation, Inc.,
//59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//_______________________________________________________________________________________
//Имя модуля:
// <Вставить имя модуля>
//_______________________________________________________________________________________
//Разработчик: Баинов Евгений, e-mail: bainov@rb-soft.ru , icq: 73718937
//_______________________________________________________________________________________
//Назначение модуля:
// <Вставить описание модуля>
//
//_______________________________________________________________________________________
Перем _База Экспорт;
Перем ИсточникДанных; //ссылка на объект DynaValue для хранения данных

Перем МаркерыКомментария;//строка с маркерами комментариев, разделенных запятой

Перем флФайлПрочитан; //1 - если файл был успешно прочитан методом Прочитать
Перем флФайлЗаписан;  //1 - если файл был успешно записан методом Записать
Перем флЕстьПараметр; //1 - если параметр переданный в Получить был в файле 0- параметра не было
//также при вызове метода Установить : 1- параметр был до вызова метода и был заменен, 0 - параметра не было, был добавлен
Перем Копирайт;//информация об авторе для размещения в шапке ини-файла
Перем Заголовок; //заголовок ини-файла. можно записать строку с назначением файла

Перем КодОшибки ,ПоследняяОшибка ;

Функция Этот(Конт) Возврат Конт; КонецФункции

Функция Сам()Экспорт Возврат Этот(Контекст) КонецФункции



//*******************************************


//Открыть выборку свойств
Функция ВыбратьСвойства() Экспорт
	Возврат ИсточникДанных.ВыбратьСвойства();
КонецФункции

//Получить свойство из выборки
Функция ПолучитьСвойство(нЗначение, стрИмя) Экспорт
	Возврат ИсточникДанных.ПолучитьСвойство(нЗначение, стрИмя);
КонецФункции


//------------------------------------ ------------------------------------
Процедура Конструктор()
	_База = Этот(Контекст).ПолучитьБазовыйКласс("Файл");

	ИсточникДанных=СоздатьОбъект("DynaValue");

	МаркерыКомментария="#,;,//,>,<,{,}";
	флФайлПрочитан=0;
	флФайлЗаписан=0;
	
	Заголовок="";

	Копирайт=
	";___________________________________________________________________________________________________
	|;  Copyright (c) RB-Soft Ltd. (2006-2010). ООО""РБ-Софт"" www.rb-soft.ru   Дата версии класса: 09/04/2010
	|;___________________________________________________________________________________________________
	|;
	|; Время записи: %DATE% %TIME%
	|;";
КонецПроцедуры // Конструктор

Функция ЭтоСтрокаКомментария(Стр) экспорт
	Если Найти(МаркерыКомментария,Лев(Стр,1))>0 Тогда
		Возврат 1;
	ИначеЕсли (Найти(МаркерыКомментария,Лев(Стр,2))>0) Тогда
		Возврат 1;
	КонецЕсли;
	Возврат 0;
КонецФункции

//делает строку Стр комментарием. может быть многострочным
Функция СделатьКомментарием(Стр) Экспорт
	СтрТекст=СоздатьОбъект("Текст");
	СтрТекст.ДобавитьСтроку(Стр);
	РезСтр="";
	Для Инд=1 По СтрТекст.КоличествоСтрок() Цикл
		ТекСтр=СтрТекст.ПолучитьСтроку(Инд);
		РезСтр=РезСтр+
		?(ПустоеЗначение(РезСтр)=1,"",РазделительСтрок)+
		?(Сам().ЭтоСтрокаКомментария(ТекСтр)=0,";","")+ТекСтр;
	КонецЦикла;
	Возврат РезСтр;
КонецФункции

//возвращает текущее значение заголовка
//Если Стр не пустой - то записывает заголовок
//если строка не в виде комментария - делает ее в виде комментария.
//заголовок может быть многострочным

Функция Заголовок(Стр="") Экспорт
	Если Стр<>"" Тогда
		Заголовок=СделатьКомментарием(Стр);
	КонецЕсли;
	Возврат Заголовок;
КонецФункции

//------------------------------------ ------------------------------------
Процедура Деструктор()
	 ИсточникДанных=0;
КонецПроцедуры // Деструктор



//получить из строки Секцию и параметр
//Параметры:
//_Ключ - строка в формате Секция/Параметр
//Возвращает:
//_Секция и _Параметр
Процедура РазбитьКлюч(_Ключ,_Секция,_Параметр) Экспорт
Перем Стр;
	 Стр=СтрЗаменить(_Ключ,"/",РазделительСтрок);
	 _Секция="";
	 _Параметр="";
	 _Секция=СтрПолучитьСтроку(Стр,1);
	 _Параметр=СтрПолучитьСтроку(Стр,2);
КонецПроцедуры


Функция СоздатьПоле(ИД,Значение,Комментарий="") Экспорт
	Поле=СоздатьОбъект("Структура");
	Если ПустаяСтрока(ИД)=1 Тогда
		ВМ=СоздатьОбъект("ВыполняемыйМодуль");
		ВМ.ВыброситьИскл("СоздатьПоле(ИД,Значение,Комментарий="""")","Пустой ИД передан в функцию");
	КонецЕсли;
	Поле.Вставить("Значение",Значение);
	Поле.Вставить("_ИД",ИД);
	Поле.Вставить("_Комментарий",Комментарий);
	Возврат Поле;
КонецФункции

Функция СоздатьСекцию(ИД,Комментарий="") Экспорт
	Если ПустаяСтрока(ИД)=1 Тогда
		ВМ=СоздатьОбъект("ВыполняемыйМодуль");
		ВМ.ВыброситьИскл("СоздатьСекцию(ИД,Комментарий="""")","Пустой ИД передан в функцию");
	КонецЕсли;

	Если Сам().СекцияСуществует(ИД)=1 Тогда
		НомерСвойства=ИсточникДанных.НайтиПоИмени(ИД);
		Секция=ИсточникДанных.ПолучитьСвойствоПоНомеру(НомерСвойства);
	Иначе
		Секция=СоздатьОбъект("DynaValue");
		Секция.ДобавитьСвойство("_ИД",ИД);
		Секция.ДобавитьСвойство("_Комментарий",Комментарий);
		ИсточникДанных.ДобавитьСвойство(ИД,Секция);
	КонецЕсли;
	Возврат Секция;
КонецФункции

//Добавить секцию-Объект
Функция ДобавитьСекцию(Секция) Экспорт
	Если Сам().СекцияСуществует(Секция._ИД)=1 Тогда
		Сам().УдалитьСекцию(Секция._ИД);
		ИсточникДанных.ДобавитьСвойство(Секция._ИД,Секция);
	Иначе
		ИсточникДанных.ДобавитьСвойство(Секция._ИД,Секция);
	КонецЕсли;
	Возврат Секция;
КонецФункции

Процедура ПереименоватьСекцию(СтароеИмя,НовоеИмя) Экспорт
	Сообщить("Не реализовано");

КонецПроцедуры

Процедура ПереименоватьПараметр(СтароеИмя,НовоеИмя) Экспорт
	Сообщить("Не реализовано");
КонецПроцедуры


//_____________________________________________________________________________
//Функция ПрочитатьФайл
//Назначение:
//Читает ини-файл
//Параметры:
//_ИмяФайла - имя файла, из которого надо читать данные
//_ВыбСекция - (необязательно) Секция, которую надо прочитать. Если не выбрано, читает все секции ini-файла
//Возвращает:
// 1 - файл успешно прочитан
// 0 - были ошибки

Функция ПрочитатьФайл(_ИмяФайла,_ВыбСекция="") Экспорт
Перем ИмяФайла;	
	Попытка
		Сам=Сам();
		Сам.ИмяФайла=глОбработатьМакроСтроку(_ИмяФайла);
		ИмяФайла=Сам.ИмяФайла;
		
		флФайлПрочитан=0;

		
		Если глФайловаяСистема.СуществуетФайл(ИмяФайла)=0 Тогда
			Сам.УстановитьОшибку("Нет файла настройки "+ИмяФайла);
			возврат 0;
		КонецЕсли;  //
		Ткт=СоздатьОбъект("Текст");
		Попытка
			Ткт.Открыть(ИмяФайла);
		Исключение
			Сам.УстановитьОшибку("Не удалось открыть файл:"+ОписаниеОшибки());
			Возврат 0;
		КонецПопытки;
		Инд=0;
		ТекущаяСекция="";
		ВыбСекция=ВРЕГ(СокрЛП(_ВыбСекция));
		Если ПустоеЗначение(ВыбСекция)=0 Тогда
			Сам().УдалитьСекцию(ВыбСекция);
		Иначе
			Сам().Очистить();
		КонецЕсли;

		ТекущийКомментарий="";
		ТекущаяСекцияСсылка="";
		Для Индекс=1 по Ткт.КоличествоСтрок() Цикл
			Стр=СокрЛП(Ткт.ПолучитьСтроку(Индекс));
			Если (Стр="") Тогда
			    продолжить;
			ИначеЕсли Сам.ЭтоСтрокаКомментария(Стр)=1 Тогда
				ТекущийКомментарий=ТекущийКомментарий+?(ПустаяСтрока(ТекущийКомментарий)=1,"",РазделительСтрок)+СокрП(Сред(Стр,2));
				продолжить
			КонецЕсли;  //

			Если Лев(Стр,1)="[" Тогда
				Если Прав(Стр,1)="]" Тогда
					ТекущаяСекция=Сред(Стр,2,СтрДлина(Стр)-2);
					Если ПустоеЗначение(ВыбСекция)=0 Тогда
						Если ВРЕГ(ТекущаяСекция)<>ВыбСекция Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;

					ТекущаяСекцияСсылка=Сам.СоздатьСекцию(ТекущаяСекция,ТекущийКомментарий);

					ТекущийКомментарий="";
					Продолжить;
				Иначе
					Сам.УстановитьОшибку("Неверный синтаксис файла настройки: Строка "+Инд+" - Нет закрывающей скобки секции");
					возврат 0;
				КонецЕсли;  //
			КонецЕсли;  //

			Если ПустоеЗначение(ВыбСекция)=0 Тогда
			    Если ВРЕГ(ТекущаяСекция)<>ВыбСекция Тогда
			        Продолжить;
				КонецЕсли;
			КонецЕсли;

			СимвРавно=Найти(Стр,"=");
			Если СимвРавно>0 Тогда
				ИмяПараметра=СокрЛП(Лев(Стр,СимвРавно-1));
				ЗначениеПараметра=СокрЛП(Сред(Стр,СимвРавно+1));
			Иначе
				ИмяПараметра=Стр;
				ЗначениеПараметра="";
			КонецЕсли;
			ТекущаяСекцияСсылка.ДобавитьСвойство(ИмяПараметра,СоздатьПоле(ИмяПараметра,ЗначениеПараметра,ТекущийКомментарий));
			ТекущийКомментарий="";
		КонецЦикла;
	Исключение
		Сам.УстановитьОшибку(ОписаниеОшибки());
		возврат 0;
	КонецПопытки;
	флФайлПрочитан=1;
	возврат 1;
КонецФункции //ПрочитатьФайл

//Читает весь файл
Функция ЗагрузитьИзФайла(_ИмяФайла) Экспорт
	Возврат ПрочитатьФайл(_ИмяФайла);
КонецФункции
//Читает одну секцию из файла
Функция ПрочитатьСекцию(_Секция) Экспорт
	Сам=Сам();
	Возврат ПрочитатьФайл(Сам.ИмяФайла,_Секция);
КонецФункции

//возвращает 1  если последняя операция чтения была успешной
Функция ФайлПрочитан() Экспорт
	Возврат флФайлПрочитан;
КонецФункции
//возвращает 1  если последняя операция записи была успешной
Функция ФайлЗаписан() Экспорт
	Возврат флФайлЗаписан;
КонецФункции

Функция ВыгрузитьВФайл(_ИмяФайла="") Экспорт
Перем ИмяФайла;	
	Попытка
		Если _ИмяФайла<>"" Тогда
			ИмяФайла=глОбработатьМакроСтроку(_ИмяФайла);
		КонецЕсли;
		флФайлЗаписан=0;

		ткт=СоздатьОбъект("Текст");
		ткт.КодоваяСтраница(0);

		ткт.ДобавитьСтроку(СделатьКомментарием(глОбработатьМакроСтроку(Копирайт)));
		ткт.ДобавитьСтроку(СделатьКомментарием(глОбработатьМакроСтроку(Заголовок)));
		ИсточникДанных.ВыбратьСвойства();
		СсылкаНаСекцию="";
		ИмяСекции="";

		ЭтоПерваяСекция=1;
		Пока ИсточникДанных.ПолучитьСвойство(СсылкаНаСекцию,ИмяСекции)=1 Цикл


			Если ЭтоПерваяСекция=1 Тогда
				ЭтоПерваяСекция=0;
			ИначеЕсли ПустаяСтрока(СсылкаНаСекцию._Комментарий)=0 Тогда
				Ткт.ДобавитьСтроку(СделатьКомментарием(СсылкаНаСекцию._Комментарий));
			КонецЕсли;
			Ткт.ДобавитьСтроку("["+ИмяСекции+"]");

			СсылкаНаСекцию.ВыбратьСвойства();
			СсылканаПоле="";
			ИмяПоля="";
			Пока СсылкаНаСекцию.ПолучитьСвойство(СсылканаПоле,ИмяПоля)=1 Цикл

				Если ИмяПоля="_Комментарий" Тогда
					//поскольку это не поле ини-файла пропускаем
					Продолжить;
				ИначеЕсли ИмяПоля="_ИД" Тогда
					//поскольку это не поле ини-файла пропускаем
					Продолжить;
				КонецЕсли;
			    Если ПустаяСтрока(СсылканаПоле._Комментарий)=0 Тогда
					Ткт.ДобавитьСтроку(СделатьКомментарием(СсылканаПоле._Комментарий));
				КонецЕсли;
				Ткт.ДобавитьСтроку(СокрЛП(ИмяПоля)+"="+Строка(СсылканаПоле.Значение));
			КонецЦикла;
		КонецЦикла;

		Попытка
			Ткт.Записать(ИмяФайла);
			флФайлЗаписан=1;
			возврат 1;
		Исключение
			Сам().УстановитьОшибку(ОписаниеОшибки());
		КонецПопытки;
	Исключение
		Сам().УстановитьОшибку(ОписаниеОшибки());
	КонецПопытки;

	возврат 0;
КонецФункции

//_____________________________________________________________________________
//Функция Записать
//Назначение:
//Параметры:
//
//
//Возвращает:
//
Функция Записать() Экспорт
	Сам=Сам();
	Возврат Сам.ВыгрузитьВФайл(Сам.ИмяФайла);
КонецФункции //Записать

Функция ПолучитьСоСсылками(_Ключ,СсылкаНаПоле,СсылкаНаСекцию) Экспорт
	 флЕстьПараметр=0;

	 Секция="";
	 Параметр="";
	 ЗначениеПараметра="";
	 РазбитьКлюч(_Ключ,Секция,Параметр);

	 СсылкаНаПоле=0;
	 СсылкаНаСекцию=0;

	 НомерСвойства=ИсточникДанных.НайтиПоИмени(Секция);
	 Если НомерСвойства=-1 Тогда
	 	Возврат ПолучитьПустоеЗначение();
	 КонецЕсли;
	 СсылкаНаСекцию=ИсточникДанных.ПолучитьСвойствоПоНомеру(НомерСвойства);

	 НомерПоля=СсылканаСекцию.НайтиПоИмени(Параметр);
	 Если НомерПоля=-1 Тогда
	 	Возврат ПолучитьПустоеЗначение();
	 КонецЕсли;
	 СсылкаНаПоле=СсылканаСекцию.ПолучитьСвойствоПоНомеру(НомерПоля);
	 флЕстьПараметр=1;
	 возврат СсылканаПоле.Значение;
КонецФункции

Функция Получить(_Ключ) Экспорт
Перем СсылкаНаПоле,СсылкаНаСекцию;
	Возврат Сам().ПолучитьСоСсылками(ВРЕГ(_Ключ),СсылкаНаПоле,СсылкаНаСекцию);
КонецФункции

Функция ПолучитьСекцию(_Ключ) Экспорт //DynaValue
Перем СсылкаНаПоле,СсылкаНаСекцию;
	Зн= Сам().ПолучитьСоСсылками(_Ключ,СсылкаНаПоле,СсылкаНаСекцию);
	Возврат СсылкаНаСекцию;
КонецФункции


Процедура УдалитьСекцию(ИмяСекции) Экспорт
	ИсточникДанных.УдалитьПоИмени(ИмяСекции);
КонецПроцедуры

Процедура Очистить() Экспорт
	ИсточникДанных.Очистить();
КонецПроцедуры

Процедура УдалитьПараметр(_Ключ)  Экспорт
Перем СсылкаНаПоле,СсылкаНаСекцию;
	Если ПустоеЗначение(ПолучитьСоСсылками(_Ключ,СсылкаНаПоле,СсылкаНаСекцию))=0 Тогда
		ИД=СсылкаНаПоле._ИД;
		СсылкаНаПоле=0;
		СсылкаНаСекцию.УдалитьПоИмени(ИД);
	КонецЕсли;
КонецПроцедуры




//_Ключ -  строка формата <ИмяСекции>/<ИмяПараметра>
Функция ПолучитьКакЧисло(_Ключ) Экспорт

	Попытка
		Значение=Сам().Получить(ВРЕГ(_Ключ));
		возврат Число(Значение);
	Исключение
		Сам().УстановитьОшибку(-1,"Не удалось прочитать как число "+_Ключ);
		Возврат 0;
	КонецПопытки;

КонецФункции


Функция ПолучитьКакДату(_Ключ) Экспорт

	Попытка
		Значение=Сам().Получить(ВРЕГ(_Ключ));
		возврат глСтроки.ДатаИзСтроки(Значение);
	Исключение
		Сам().УстановитьОшибку(-1,"Не удалось прочитать как дату "+_Ключ);
		Возврат 0;
	КонецПопытки;

КонецФункции

//можно читать после вызова метода Получить
//1 - если параметр переданный в Получить был в файле 0- параметра не было
Функция ЕстьПараметр() экспорт
	Возврат флЕстьПараметр;
КонецФункции


Функция СекцияСуществует(ИмяСекции) Экспорт
	Возврат ?(ИсточникДанных.НайтиПоИмени(ИмяСекции)=-1,0,1);
КонецФункции


Процедура Установить(Ключ,Значение) Экспорт
	Секция="";
	Параметр="";
	Сам=Сам();
	РазбитьКлюч(Ключ,Секция,Параметр);
	СсылкаНаПоле="";
	СсылкаНаСекцию="";

	Зн=Сам.ПолучитьСоСсылками(Ключ,СсылкаНаПоле,СсылкаНаСекцию);
	Если ЕстьПараметр()=1 Тогда
		СсылкаНаПоле.Значение=Значение;
	ИначеЕсли ПустоеЗначение(СсылкаНаСекцию)=1 Тогда
		СсылкаНаСекцию=Сам.СоздатьСекцию(Секция);
		СсылкаНаСекцию.ДобавитьСвойство(Параметр,Сам.СоздатьПоле(Параметр,Значение));
	Иначе
		СсылкаНаСекцию.ДобавитьСвойство(Параметр,Сам.СоздатьПоле(Параметр,Значение));
	КонецЕсли;
КонецПроцедуры

//позволяет получить комментарий к параметру или секции ini-файла
//_Ключ -  строка формата <ИмяСекции>/<ИмяПараметра> или просто <ИмяСекции>
Функция ПолучитьКомментарий(_Ключ) Экспорт
Перем СсылкаНаПоле,СсылкаНаСекцию;
	Значение = Сам().ПолучитьСоСсылками(_Ключ,СсылкаНаПоле,СсылкаНаСекцию);
	Если Найти(_Ключ,"/")>0 Тогда
		Если ПустоеЗначение(СсылкаНаПоле)=0 Тогда
			Возврат СсылкаНаПоле._Комментарий;
		КонецЕсли;
	ИначеЕсли ПустоеЗначение(СсылкаНаСекцию)=0 Тогда
		Возврат СсылкаНаСекцию.__Комментарий;
	КонецЕсли;
	Возврат "";
КонецФункции

//устанавливает комментарий только если есть параметр с заданным ключом
Функция УстановитьКомментарий(Ключ,Комментарий) Экспорт
Перем СсылкаНаСекцию,СсылкаНаПараметр;
	Зн=Сам().ПолучитьСоСсылками(Ключ,СсылкаНаСекцию,СсылкаНаПараметр);

	Если Найти(Ключ,"/")>0 Тогда
		Если ЕстьПараметр()=1 Тогда
			СсылкаНаПараметр._Комментарий=Комментарий;
			возврат 1;
		КонецЕсли;
	Иначе
		//Передано только имя секции
		Если ПустоеЗначение(СсылкаНаСекцию)=0 Тогда
			СсылкаНаСекцию._Комментарий=Комментарий;
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	возврат 0;
КонецФункции

