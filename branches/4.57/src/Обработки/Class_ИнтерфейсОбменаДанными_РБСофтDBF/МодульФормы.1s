//Конфигурация для платформы "1С:Предприятие 7.7" РБ-Софт:Рабочее место кассира.
//Версия 4.43 от 19.07.10 20:54:19
//Назначение: Автоматизация POS-узлов в магазинах (Point of sale).
//(c) Баинов Евгений, ООО "РБ-Софт" 2006, г.Улан-Удэ, проспект 50-летия Октября,21А,офис 110 
//e-mail: bainov@rb-soft.ru  icq: 73718937, телефоны: (3012) 44-03-57, 44-76-42, 44-86-58
//---------------------------------------------------------------------------------------
//Данная программа является свободным программным обеспечением.
//Вы вправе распространять ее и/или модифицировать в соответствии с условиями версии 2 
//либо по вашему выбору с условиями более поздней версии Стандартной Общественной Лицензии GNU,
//опубликованной Free Software Foundation. 
//Мы распространяем данную программу в надежде на то, что она будет вам полезной, 
//однако НЕ ПРЕДОСТАВЛЯЕМ НА НЕЕ НИКАКИХ ГАРАНТИЙ, 
//в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
//и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ.
//Для получения более подробной информации ознакомьтесь со Стандартной Общественной Лицензией GNU.
//Вместе с данной программой вы должны были получить экземпляр Стандартной Общественной Лицензии GNU.
//Если вы его не получили, сообщите об этом в Free Software Foundation, Inc.,
//59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//_______________________________________________________________________________________
//Имя модуля:
// <Вставить имя модуля>
//_______________________________________________________________________________________
//Разработчик: Баинов Евгений, e-mail: bainov@rb-soft.ru , icq: 73718937
//_______________________________________________________________________________________
//Назначение модуля:
// <Вставить описание модуля>
//
//_______________________________________________________________________________________
Перем _База Экспорт;
Перем ИмяВходящегоАрхива экспорт;   //из АСТУ поступает заархивированный файл
Перем ИмяИсходящегоАрхива экспорт; //в АСТУ отправляется архивированный файл
Перем ПарольВходящегоАрхива  Экспорт;
Перем ПарольИсходящегоАрхива  Экспорт;

Перем КаталогПриема экспорт;
Перем КаталогОтчетов экспорт;

Перем КаталогБазы экспорт;

Перем КаталогВнешнихЧековВходящие Экспорт;
Перем КаталогВнешнихЧековЗакрытые Экспорт;
Перем ИмяФайлаЗагрузки экспорт;

Перем Флаг_БакофисЧитает;//
Перем Флаг_БакофисЗаписывает;
Перем Флаг_РМКЗаписывает;
Перем Флаг_РМКЧитает;
Перем Флаг_ЕстьДанные;
Перем СписокККМ;
Перем ЕстьРежимВнешнихЧеков; //1-можно грузить внешние чеки
Перем ВременныйКаталог;

Перем ЭтапЗагрузкиТовар;
Перем ЭтапЗагрузкиШтрихкоды;
Перем ЭтапЗагрузкиКарточки;
Перем ЭтапЗагрузкиСкидки;
Перем ЭтапЗагрузкиПользователи;
Перем ЭтапЗагрузкиРоли;
Перем ЭтапЗагрузкиФирмы;
Перем ЭтапЗагрузкиТипыОплат;
Перем ЭтапЗагрузкиБыстрыеСписки;




Функция Этот(Конт) 		Возврат Конт; 			КонецФункции
Функция Сам() 			Возврат Этот(Контекст) 	КонецФункции




Процедура ОпределитьФлаги()
	Флаг_БакофисЧитает=КаталогОтчетов+"\r_office.flg";
	Флаг_РМКЗаписывает=КаталогОтчетов+"\w_rmk.flg";

	Флаг_БакофисЗаписывает=КаталогПриема+"\w_office.flg";
	Флаг_РМКЧитает=КаталогПриема+"\r_rmk.flg";

	Флаг_ЕстьДанные=КаталогПриема+"\start.flg";
КонецПроцедуры

Процедура Конструктор()
	_База = Этот(Контекст).ПолучитьБазовыйКласс("ИнтерфейсОбменаДанными");
	ИмяВходящегоАрхива="";
	ИмяИсходящегоАрхива="";
	КаталогОтчетов=КаталогИБ()+"Exchange\Out";
	КаталогПриема=КаталогИБ()+"Exchange\In";

	ВременныйКаталог=КаталогИБ()+"TEMP";

	КаталогБазы=глОбработатьМакроСтроку("%DB%");
	ПарольВходящегоАрхива="";
	ПарольИсходящегоАрхива="";

	ЭтапЗагрузкиБыстрыеСписки="Быстрые списки";
	ЭтапЗагрузкиКарточки="Карточки";
	ЭтапЗагрузкиПользователи="Пользователи";
	ЭтапЗагрузкиРоли="Роли";
	ЭтапЗагрузкиСкидки="Автоматические скидки";
	ЭтапЗагрузкиТипыОплат="Типы оплат";
	ЭтапЗагрузкиТовар="Товары";
	ЭтапЗагрузкиФирмы="Фирмы";
	ЭтапЗагрузкиШтрихкоды="Штрихкоды";
	
КонецПроцедуры

Процедура Деструктор()

КонецПроцедуры

Функция Инит(_ОбменДанными) Экспорт
	_База.Инит(_ОбменДанными);

	Сам=Сам();


	ИмяФайлаЗагрузки=глОбработатьМакроСтроку("%INOUT%\InCash.ini");//список товаров, дисконтных карт

	ИмяВходящегоФайла=глНастройки.Получить("EXCHANGE/INDATAFILENAME");
	Если  ПустоеЗначение(ИмяВходящегоФайла)=1 Тогда
		ИмяВходящегоФайла="InCash.ini";
	КонецЕсли;



	Значение=глНастройки.Получить("EXCHANGE/ARH_INDATA");
	Если ПустоеЗначение(Значение)=0 Тогда
		ИмяВходящегоАрхива=глОбработатьМакроСтроку(Значение);
	КонецЕсли;  //ПустоеЗначение(Значение)=1



	Значение=глНастройки.Получить("EXCHANGE/ARH_OUTDATA");
	Если ПустоеЗначение(Значение)=0 Тогда
		ИмяИсходящегоАрхива=глОбработатьМакроСтроку(Значение);
	КонецЕсли;  //ПустоеЗначение(Значение)=1



	Значение=глНастройки.Получить("EXCHANGE/INDATA_PASSWORD");
	Если ПустоеЗначение(Значение)=0 Тогда
		ПарольВходящегоАрхива=СокрЛП(Значение);
	КонецЕсли;  //ПустоеЗначение(Значение)=1

	Значение=глНастройки.Получить("EXCHANGE/OUTDATA_PASSWORD");
	Если ПустоеЗначение(Значение)=0 Тогда
		ПарольИсходящегоАрхива=СокрЛП(Значение);
	КонецЕсли;  //ПустоеЗначение(Значение)=1


	Значение=глНастройки.Получить("EXCHANGE/INDATA");

	Если ПустоеЗначение(Значение)=0 Тогда
		КаталогПриема=глОбработатьМакроСтроку(Значение);
		ИмяФайлаЗагрузки=КаталогПриема+"\"+ИмяВходящегоФайла;
	КонецЕсли;  //ПустоеЗначение(Значение)=1




	Значение=глНастройки.Получить("EXCHANGE/OUTDATA");
	Если ПустоеЗначение(Значение)=0 Тогда
		КаталогОтчетов=глОбработатьМакроСтроку(Значение);
	КонецЕсли;  //ПустоеЗначение(Значение)=1


	Значение=глНастройки.Получить("EXCHANGE/CHECKIMPORT");
	Если ПустоеЗначение(Значение)=0 Тогда
		КаталогВнешнихЧековВходящие=глОбработатьМакроСтроку(Значение);
	КонецЕсли;  //ПустоеЗначение(Значение)=1

	Значение=глНастройки.Получить("EXCHANGE/CHECKCLOSE");

	Если ПустоеЗначение(Значение)=0 Тогда
		КаталогВнешнихЧековЗакрытые=глОбработатьМакроСтроку(Значение);
	КонецЕсли;  //ПустоеЗначение(Значение)=1

	ЕстьРежимВнешнихЧеков=0;
	Если (ПустоеЗначение(КаталогВнешнихЧековЗакрытые)=0)И(ПустоеЗначение(КаталогВнешнихЧековВходящие)=0) Тогда
		ЕстьРежимВнешнихЧеков=1;
	КонецЕсли;

	ОпределитьФлаги();

	Если ФС.СуществуетФайл(ВременныйКаталог)=0 Тогда
		Попытка
			ФС.СоздатьКаталог(ВременныйКаталог);
		Исключение
			Сам.УстановитьОшибку("Не удалось создать каталог временных файлов."+ВременныйКаталог+"
			|"+ОписаниеОшибки());
			Возврат 0;
		КонецПопытки;

	КонецЕсли;


	Возврат 1;
КонецФункции


Функция ЕстьДанныеДляЗагрузки() Экспорт

	глДебаг("проверка загрузки");

	Путь=СокрЛП(КаталогПриема);
	Если Прав(Путь,1)<>"\" Тогда
		Путь=Путь+"\";
	КонецЕсли;  //

	ФайлФлаг=Путь+"start.flg";
	Если ФС.СуществуетФайл(ФайлФлаг)=1 Тогда
		глДебаг("Найден старт файл: "+ФайлФлаг);

		Если ФС.СуществуетФайл(ИмяФайлаЗагрузки)=1 Тогда
			глДебаг("Найден файл данных: "+ИмяФайлаЗагрузки);
			Возврат 1;
		Иначе
			глДебаг("Нет файла данных.");
		КонецЕсли;
	Иначе
		глДебаг("Нет старт файла "+ФайлФлаг);
	КонецЕсли;

	Возврат 0;
КонецФункции

Функция ЗаписатьФлаг(ИмяФайла) Экспорт
	Сам=Сам();
	Попытка
		ТекстФлаг=СоздатьОбъект("Текст");
		ТекстФлаг.Записать(ИмяФайла);
	Исключение
		Сам.УстановитьОшибку("Сбой при попытке записи флага:"+ИмяФайла+" "+ОписаниеОшибки());
		Возврат 0;
	КонецПопытки;
	Возврат 1;
КонецФункции

Функция УдалитьФлаг(ИмяФайла) Экспорт
	Сам=Сам();
	Попытка
		Если ФС.СуществуетФайл(ИмяФайла)=1 Тогда
			ФС.УдалитьФайл(ИмяФайла);
		КонецЕсли;
	Исключение
		Сам.УстановитьОшибку("Сбой при попытке удаления флага:"+ИмяФайла+" "+ОписаниеОшибки());
		Возврат 0;
	КонецПопытки;
	Возврат 1;
КонецФункции


Функция ЗаписатьФлагЧтения() Экспорт
	Возврат ЗаписатьФлаг(Флаг_РМКЧитает);
КонецФункции

Функция ЗаписатьФлагЗаписи() Экспорт
	Возврат ЗаписатьФлаг(Флаг_РМКЗаписывает);
КонецФункции


Функция УдалитьСтартФлаг() Экспорт
	Возврат УдалитьФлаг(Флаг_ЕстьДанные);
КонецФункции


Функция УдалитьФлагЧтения() Экспорт
	Возврат УдалитьФлаг(Флаг_РМКЧитает);
КонецФункции



Функция КопироватьФайл(ИмяФайлаЦель,ИмяФайлаИсточника)
	Попытка
		глДебаг("Копирование "+ИмяФайлаИсточника+" -> "+ИмяФайлаЦель);
		ФС.КопироватьФайл(ИмяФайлаИсточника,ИмяФайлаЦель,0);
		глДебаг("ОК");
	Исключение
		Сам().УстановитьОшибку("КопироватьФайл()","Ошибка при копировании файла "+ИмяФайлаЦель+ "
		|в "+ИмяФайлаИсточника+"
		|"+ ОписаниеОшибки());
		Возврат 0;
	КонецПопытки;
	Возврат 1;
КонецФункции	


Функция ОбъединитьФайлы(ИмяФайлаЦель,ИмяФайлаИсточника)

	Попытка

		Сам=Сам();
		
		глДебаг("Объединение "+ИмяФайлаИсточника+" -> "+ИмяФайлаЦель);

		ФайлИсточник=СоздатьОбъект("XBase");
		ФайлЦель=СоздатьОбъект("XBase");

		//ИмяФайла=глФайловаяСистема.ИмяФайла(ИмяФайлаЦель);
		ИмяФайла=ИмяФайлаЦель;
		ИмяИндекса=СтрЗаменить(ВРЕГ(ИмяФайла),".DBF",".CDX");
		
		Если глФайловаяСистема.СуществуетФайл(ИмяФайла)=1 Тогда
			ФайлЦель.ОткрытьФайл(ИмяФайлаЦель);
		Иначе
			возврат КопироватьФайл(ИмяФайлаЦель,ИмяФайлаИсточника);
		КонецЕсли;
		
		
		Если ФайлЦель.Открыта()=0 Тогда
			Сам().УстановитьОшибку("ОбъединитьФайлы() Файл не удалось открыть:"+ИмяФайлаЦель);
			возврат 0;
		КонецЕсли;
		

		ФайлЦель.ДобавитьИндекс("ID","ID",,,);
		ФайлЦель.СоздатьИндексныйФайл(ИмяИндекса);
		ФайлЦель.ЗакрытьФайл();
		
		ФайлЦель.ОткрытьФайл(ИмяФайлаЦель,ИмяИндекса,0);
		
		ФайлЦель.ТекущийИндекс("ID");

		Если ФС.СуществуетФайл(ИмяФайлаИсточника)=1 Тогда
			ФайлИсточник.ОткрытьФайл(ИмяФайлаИсточника);
			ФайлИсточник.Первая();

			НомерЗаписи=0;
			Пока ФайлИсточник.ВКонце()=0 Цикл

				НомерЗаписи=НомерЗаписи+1;

				Если ФайлЦель.Найти(ФайлИсточник.ID)=0 Тогда
					ФайлЦель.Добавить();
				КонецЕсли;  //
				Для Инд=1 По ФайлЦель.КоличествоПолей() Цикл
					ИмяПоля="";Тип="";Длина=0;Точность=0;
					ФайлЦель.ОписаниеПоля(Инд,ИмяПоля,Тип,Длина,Точность);
					ФайлЦель.УстановитьЗначениеПоля(Инд,ФайлИсточник.ПолучитьЗначениеПоля(ИмяПоля));
				КонецЦикла;
				ФайлЦель.Записать();

				ФайлИсточник.Следующая();
			КонецЦикла;
		КонецЕсли;


		ФайлИсточник.ЗакрытьФайл();
		ФайлИсточник=0;
		ФайлЦель.ЗакрытьФайл();
		ФайлЦель=0;
		
		глДебаг("ОК");
	Исключение
		Попытка
			КодОшибкиДБФ=ФайлЦель.КодОшибки();
		Исключение
		КонецПопытки;
		Сам().УстановитьОшибку("ОбъединитьФайлы() "+ОписаниеОшибки()+" КодОшибкиДБФ="+КодОшибкиДБФ);
		Возврат 0;
	КонецПопытки;

	Возврат 1;

КонецФункции






Функция ЗагрузитьФайл(ИмяТаблицы,ТипЗагрузки,Комментарий)
	Если ТипЗагрузки=1 Тогда
		Возврат КопироватьФайл(КаталогБазы+"\"+ИмяТаблицы+".dbf",КаталогПриема+"\"+ИмяТаблицы+".dbf");
	ИначеЕсли ТипЗагрузки=0 Тогда
		Возврат ОбъединитьФайлы(КаталогБазы+"\"+ИмяТаблицы+".dbf",КаталогПриема+"\"+ИмяТаблицы+".dbf");
	КонецЕсли;  //
	//#error ЗагрузитьФайл() Неверное значение типа загрузки.
КонецФункции


Функция ЗагрузитьДанные() Экспорт
                 
	
	Сам=Сам();

	Сам.НачатьПроцессЗагрузки();

	Если ЗаписатьФлагЧтения()= 0 Тогда
		Сам.УстановитьОшибку("Не удалось записать флаг чтения");
		Перейти ~Конец;
	КонецЕсли;


	СпТоваров=СоздатьОбъект("СписокЗначений");
	СпЗагрузка=СоздатьОбъект("Файл.INI");

	Если СпЗагрузка.ЗагрузитьИзФайла(ИмяФайлаЗагрузки)=0 Тогда
		Перейти ~Конец;
	КонецЕсли;
	
	
	
	
	Сам.ПараметрыЗагрузки.Товары.ТипЗагрузки			=СпЗагрузка.ПолучитьКакЧисло("SETTINGS/GOODS");
	Сам.ПараметрыЗагрузки.Товары.ЕстьДанные				=СпЗагрузка.ЕстьПараметр();
	Если Сам.ПараметрыЗагрузки.Товары.ЕстьДанные=1 Тогда
		Сам.УстановитьЭтапЗагрузки(ЭтапЗагрузкиТовар,,0);
	КонецЕсли;
	
	
	Сам.ПараметрыЗагрузки.Карточки.ТипЗагрузки			=СпЗагрузка.ПолучитьКакЧисло("SETTINGS/CARDS");
	Сам.ПараметрыЗагрузки.Карточки.ЕстьДанные			=СпЗагрузка.ЕстьПараметр();
	Если Сам.ПараметрыЗагрузки.Карточки.ЕстьДанные=1 Тогда
		Сам.УстановитьЭтапЗагрузки(ЭтапЗагрузкиКарточки,,0);
	КонецЕсли;
	

	Сам.ПараметрыЗагрузки.Автоскидки.ТипЗагрузки		=СпЗагрузка.ПолучитьКакЧисло("SETTINGS/DISCOUNT");
	Сам.ПараметрыЗагрузки.Автоскидки.ЕстьДанные			=СпЗагрузка.ЕстьПараметр();

	Если Сам.ПараметрыЗагрузки.Автоскидки.ЕстьДанные=1 Тогда
		Сам.УстановитьЭтапЗагрузки(ЭтапЗагрузкиСкидки,,0);
	КонецЕсли;
	
	Сам.ПараметрыЗагрузки.Пользователи.ТипЗагрузки		=СпЗагрузка.ПолучитьКакЧисло("SETTINGS/USERS");
	Сам.ПараметрыЗагрузки.Пользователи.ЕстьДанные		=СпЗагрузка.ЕстьПараметр();

	Если Сам.ПараметрыЗагрузки.Пользователи.ЕстьДанные=1 Тогда
		Сам.УстановитьЭтапЗагрузки(ЭтапЗагрузкиПользователи,,0);
	КонецЕсли;
	
	Сам.ПараметрыЗагрузки.Роли.ТипЗагрузки				=СпЗагрузка.ПолучитьКакЧисло("SETTINGS/ROLES");
	Сам.ПараметрыЗагрузки.Роли.ЕстьДанные				=СпЗагрузка.ЕстьПараметр();
	Если Сам.ПараметрыЗагрузки.Роли.ЕстьДанные=1 Тогда
		Сам.УстановитьЭтапЗагрузки(ЭтапЗагрузкиРоли,,0);
	КонецЕсли;
	
	Сам.ПараметрыЗагрузки.ПлатежныеКарты.ТипЗагрузки	=СпЗагрузка.ПолучитьКакЧисло("SETTINGS/PAYCARDS");
	Сам.ПараметрыЗагрузки.ПлатежныеКарты.ЕстьДанные		=СпЗагрузка.ЕстьПараметр();
	Если Сам.ПараметрыЗагрузки.ПлатежныеКарты.ЕстьДанные=1 Тогда
		Сам.УстановитьЭтапЗагрузки(ЭтапЗагрузкиКарточки,,0);
	КонецЕсли;
	
	Сам.ПараметрыЗагрузки.Фирмы.ТипЗагрузки				=СпЗагрузка.ПолучитьКакЧисло("SETTINGS/FIRMS");
	Сам.ПараметрыЗагрузки.Фирмы.ЕстьДанные				=СпЗагрузка.ЕстьПараметр();
	Если Сам.ПараметрыЗагрузки.Фирмы.ЕстьДанные=1 Тогда
		Сам.УстановитьЭтапЗагрузки(ЭтапЗагрузкиФирмы,,0);
	КонецЕсли;

	Сам.ПараметрыЗагрузки.ТипыОплат.ТипЗагрузки			=СпЗагрузка.ПолучитьКакЧисло("SETTINGS/PAYTYPES");
	Сам.ПараметрыЗагрузки.ТипыОплат.ЕстьДанные			=СпЗагрузка.ЕстьПараметр();
	Если Сам.ПараметрыЗагрузки.ТипыОплат.ЕстьДанные=1 Тогда
		Сам.УстановитьЭтапЗагрузки(ЭтапЗагрузкиТипыОплат,,0);
	КонецЕсли;

	Сам.ПараметрыЗагрузки.БыстрыеСписки.ТипЗагрузки		=СпЗагрузка.ПолучитьКакЧисло("SETTINGS/QUICK");
	Сам.ПараметрыЗагрузки.БыстрыеСписки.ЕстьДанные		=СпЗагрузка.ЕстьПараметр();
	Если Сам.ПараметрыЗагрузки.БыстрыеСписки.ЕстьДанные=1 Тогда
		Сам.УстановитьЭтапЗагрузки(ЭтапЗагрузкиБыстрыеСписки,,0);
	КонецЕсли;

	Сам.ОбновитьФорму();
	
	Если ПустоеЗначение(ИмяВходящегоАрхива)=0 Тогда

		Если ФС.СуществуетФайл(ИмяВходящегоАрхива)=1 Тогда

			ZIP=Сам.ОбменДанными.ZIP;
			Если ПустоеЗначение(ZIP)=1 Тогда
				Сам.УстановитьОшибку("Не инициализирован архиватор.");
				Перейти ~Конец;
			КонецЕсли;


			Если ZIP.УстановитьАрхивТекущим(ИмяВходящегоАрхива)=0 Тогда

				Сам.УстановитьОшибку("Ошибка чтения из архива, либо файл не является архивом в формате ZIP. "+ИмяВходящегоАрхива);
				Сам.ЗавершитьПроцесс();
				Возврат 0;
			КонецЕсли;

			ZIP.ОчиститьМаски();
			ZIP.ДобавитьМаску("*.*");

			КаталогИзвлечения=КаталогПриема;

			ZIP.КаталогИзвлечения = КаталогИзвлечения;
			Если ПустоеЗначение(ПарольВходящегоАрхива)=0 Тогда
				ZIP.Пароль = СокрЛП(ПарольВходящегоАрхива);
			КонецЕсли;
			
			Сам.ПроцентВыполненияЗагрузки(0,"Открываем архив данных загрузки...");
			
			КоличествоФайлов = ZIP.Извлечь(,,);

			Если ZIP.КодОшибки = 0 Тогда
				глДебаг("Извлечено "+КоличествоФайлов+" файлов");
			Иначе
				Сам.УстановитьОшибку("Ошибка работы с архивами: код "+ZIP.КодОшибки+ " "+ИмяВходящегоАрхива);
				Перейти ~Конец;
			КонецЕсли;


		Иначе
			Ошибка="";
			Если Сам.УдалитьСтартФлаг()=0 Тогда
				Ошибка=Сам.ПоследняяОшибка();
			КонецЕсли;
			Сам.УстановитьОшибку("Нет входящего архива.
			|"+ИмяВходящегоАрхива+"
			|"+Ошибка);
			Перейти ~Конец;
		КонецЕсли;
	КонецЕсли;

	//пока реализуем только полную загрузку
	Попытка
		Сам.ПроцентВыполненияЗагрузки(1,"Отключение базы данных...");
		глБД.Отключение();

		Сам.ПроцентВыполненияЗагрузки(5,"Резервирование данных...");
		
		
		глБД.СозданиеРезервнойКопии();  
		
		глБД=0;
		
		Сам.ПроцентВыполненияЗагрузки(10,"Запись товаров");

		Если Сам.ПараметрыЗагрузки.Товары.ЕстьДанные=1 Тогда
			Если ЗагрузитьФайл("Goods",Сам.ПараметрыЗагрузки.Товары.ТипЗагрузки,"Запись товаров")=0 Тогда
				Перейти ~Конец;
			Иначе
				Сам.ПроцентВыполненияЗагрузки(30,"Запись групп");
				Сам.УстановитьЭтапЗагрузки(ЭтапЗагрузкиТовар,30);
				
			КонецЕсли;
			
			
			
			Если ЗагрузитьФайл("gpGoods",Сам.ПараметрыЗагрузки.Товары.ТипЗагрузки,"Запись групп")=0 Тогда
				Перейти ~Конец;
			Иначе
				Сам.ПроцентВыполненияЗагрузки(50,"Запись штрихкодов");
				Сам.УстановитьЭтапЗагрузки(ЭтапЗагрузкиТовар,50);
				
			КонецЕсли;
			
			
			
			Если ЗагрузитьФайл("Barcodes",Сам.ПараметрыЗагрузки.Товары.ТипЗагрузки,"Запись штрихкодов")=0 Тогда
				Перейти ~Конец;
			Иначе
				Сам.ПроцентВыполненияЗагрузки(60,"Запись штрихкодов");
				Сам.УстановитьЭтапЗагрузки(ЭтапЗагрузкиТовар,100);
				
			КонецЕсли;
		КонецЕсли;



		Если Сам.ПараметрыЗагрузки.ПлатежныеКарты.ЕстьДанные=1 Тогда
			Если ЗагрузитьФайл("PayCards",Сам.ПараметрыЗагрузки.ПлатежныеКарты.ТипЗагрузки,"Запись карт клиентов")=0 Тогда
				Перейти ~Конец;
			Иначе
				Сам.ПроцентВыполненияЗагрузки(65,"Запись карт клиентов");
			КонецЕсли;
		КонецЕсли;


		Если Сам.ПараметрыЗагрузки.Карточки.ЕстьДанные=1 Тогда
			Если ЗагрузитьФайл("Cards",Сам.ПараметрыЗагрузки.Карточки.ТипЗагрузки,"Запись карт клиентов")=0 Тогда
				Перейти ~Конец;
			Иначе
				Сам.ПроцентВыполненияЗагрузки(70,"Запись карт клиентов");
			КонецЕсли;
			
			Если ЗагрузитьФайл("gpCards",Сам.ПараметрыЗагрузки.Карточки.ТипЗагрузки,"Запись карт клиентов")=0 Тогда
				Перейти ~Конец;
			Иначе
				Сам.ПроцентВыполненияЗагрузки(72,"Запись карт клиентов");
			КонецЕсли;
		КонецЕсли;


		Если Сам.ПараметрыЗагрузки.Автоскидки.ЕстьДанные=1 Тогда
			Если ЗагрузитьФайл("Discnt",Сам.ПараметрыЗагрузки.Автоскидки.ТипЗагрузки,"Запись автоскидок")=0 Тогда
				Перейти ~Конец;
			Иначе
				Сам.ПроцентВыполненияЗагрузки(70,"Запись автоскидок");
			КонецЕсли;
		КонецЕсли;

		Если Сам.ПараметрыЗагрузки.ТипыОплат.ЕстьДанные=1 Тогда
			Если ЗагрузитьФайл("PayTypes",Сам.ПараметрыЗагрузки.ТипыОплат.ТипЗагрузки,"Запись типов оплаты")=0 Тогда
				Перейти ~Конец;
			Иначе
				Сам.ПроцентВыполненияЗагрузки(75,"Запись типов оплаты");
			КонецЕсли;
		КонецЕсли;


		Если Сам.ПараметрыЗагрузки.Фирмы.ЕстьДанные=1 Тогда
			Если ЗагрузитьФайл("Firms",Сам.ПараметрыЗагрузки.Фирмы.ТипЗагрузки,"Запись фирм")=0 Тогда
				Перейти ~Конец;
			Иначе
				Сам.ПроцентВыполненияЗагрузки(80,"Запись фирм");
			КонецЕсли;
		КонецЕсли;


		Если Сам.ПараметрыЗагрузки.БыстрыеСписки.ЕстьДанные=1 Тогда
			Если ЗагрузитьФайл("QuickGP",1,"Запись быстрых списков")=0 Тогда
				Перейти ~Конец;
			Иначе
				Сам.ПроцентВыполненияЗагрузки(81,"Запись быстрых списков");
			КонецЕсли;
			Если ЗагрузитьФайл("QuickH",1,"Запись быстрых списков")=0 Тогда
				Перейти ~Конец;
			Иначе
				Сам.ПроцентВыполненияЗагрузки(82,"Запись быстрых списков");
				
			КонецЕсли;
			Если ЗагрузитьФайл("QuickT",1,"Запись быстрых списков")=0 Тогда
				Перейти ~Конец;
			Иначе
				Сам.ПроцентВыполненияЗагрузки(83,"Запись быстрых списков");
			КонецЕсли;
			
		КонецЕсли;

		Если Сам.ПараметрыЗагрузки.Роли.ЕстьДанные=1 Тогда
			
			Если ЗагрузитьФайл("RoleH",1,"Запись профилей")=0 Тогда
				Перейти ~Конец;
			Иначе
				Сам.ПроцентВыполненияЗагрузки(84,"Запись профилей");
			КонецЕсли;
			
			Если ЗагрузитьФайл("RoleT",1,"Запись профилей")=0 Тогда
				Перейти ~Конец;
			Иначе
				Сам.ПроцентВыполненияЗагрузки(85,"Запись профилей");
			КонецЕсли;
		КонецЕсли;

		ЗашифроватьПароли=0;
		
		Если Сам.ПараметрыЗагрузки.Пользователи.ЕстьДанные=1 Тогда
			КодШифрования=глНастройки.Получить(ВРЕГ("SETTINGS/PasswordSecurityKey"));
			Если Сам.ПараметрыЗагрузки.Пользователи.ТипЗагрузки=1 Тогда
				Сам.ПроцентВыполненияЗагрузки(87,"Запись пользователей");
				
				Если ЗагрузитьФайл("gpUSERS",Сам.ПараметрыЗагрузки.Пользователи.ТипЗагрузки,"Запись групп пользователей")=0 Тогда	
					Перейти ~Конец;
				КонецЕсли;
				
				Если ЗагрузитьФайл("USERS",Сам.ПараметрыЗагрузки.Пользователи.ТипЗагрузки,"Запись пользователей")=0 Тогда		
					Сам.ЗавершитьПроцесс();
					Перейти ~Конец;
				КонецЕсли;
				
				Если ПустоеЗначение(КодШифрования)=0 Тогда
					//файл содержит нешифрованные пароли пользователей
					//шифруем их, чтобы потом нормально расшифровывалось
					ЗашифроватьПароли=1;
				КонецЕсли;
			КонецЕсли;  //
		КонецЕсли;
		Рез= глПодключитьсяКБазеДанных();
	Исключение
		
		Сам.УстановитьОшибку("ЗагрузкаДанных() "+ОписаниеОшибки());
			
		Рез=0;
	КонецПопытки;
	
	
	Если Рез>0 Тогда
		
		Сам.ПроцентВыполненияЗагрузки(99,"Подключение успешно.");
		
		Попытка
			Если ЗашифроватьПароли=1 Тогда
			
				ТЗ=глБД.ПолучитьЗаписиИзТаблицыПоПолю("users");
				ТЗ.ВыбратьСтроки();
				Пока ТЗ.ПолучитьСтроку() = 1 Цикл
					Password=глПраваДоступа.ЗашифроватьПароль(СокрЛП(ТЗ.Password));
					
					ТекстЗапроса="Update Users Set Password='"+Password+"' Where ID='"+ТЗ.ID+"';";
					
					глБД.ВыполнитьЗапрос(ТекстЗапроса);
				КонецЦикла;
			КонецЕсли;
			
			УдалитьСтартФлаг();
			УдалитьФлагЧтения();

		Исключение
			Попытка
				глБД.Отключение();
			Исключение
			КонецПопытки;
			
			Перейти ~Конец;
			
		КонецПопытки;
		
		Сам.ПроцентВыполненияЗагрузки(100,"ОК!");
		Сам.ПроцессЗавершен(1);

		возврат 1;
	КонецЕсли;
	
	~Конец:
	
	Попытка
		//восстановить из бэкап
		Сам.ПроцентВыполненияЗагрузки(0,"Восстановление резервной копии...");
		Рез=глПодключитьсяКБазеДанных();
		
		глБД.ВосстановитьИзРезервнойКопии();
		
		Сам.ПроцессЗавершен(1);
			
	Исключение
	КонецПопытки;
	Сам.Сброс();
	УдалитьФлагЧтения();
	возврат 0;
КонецФункции



//требуется переопределять в потомках
//1- каталог для выгрузки данных в бакофис заблокирован.товароучетной программой нельзя выгружать
//0- можно выгружать
Функция КаталогВыгрузкиЗаблокированБакофисом() экспорт
	Возврат ФС.СуществуетФайл(Флаг_БакофисЧитает);
КонецФункции	// гл

Функция КаталогВыгрузкиЗаблокированРМК() экспорт
	Возврат ФС.СуществуетФайл(Флаг_РМКЗаписывает);
КонецФункции	// гл


//ставит блокировку на каталог выгрзки
//1- операция прошла успешно
//0- не удалось заблокировать каталог

Функция ЗаблокироватьКаталогВыгрузки() Экспорт
	Попытка
		глДебаг("Блокировка каталога выгрузки");
		Текст=СоздатьОбъект("Текст");
		Текст.ДобавитьСтроку(""+ТекущаяДата()+" "+ТекущееВремя());
		Текст.Записать(Флаг_РМКЗаписывает);

	Исключение
		глПредупреждение("Сбой при попытке блокировки каталога.
		|Создание файла: "+Флаг_РМКЗаписывает+"
		|"+ОписаниеОшибки());
		Возврат 0;
	КонецПопытки;

	Результат= КаталогВыгрузкиЗаблокированРМК();
	глДебаг("Результат блокировки = "+Результат);
	Возврат Результат;
КонецФункции	// гл

Функция РазблокироватьКаталогВыгрузки() Экспорт
	Попытка

		Если ФС.СуществуетФайл(Флаг_РМКЗаписывает)=1 Тогда
			ФС.УдалитьФайл(Флаг_РМКЗаписывает);
			Если ФС.СуществуетФайл(Флаг_РМКЗаписывает)=1 Тогда
				Возврат 0;
			Иначе
				Возврат 1;
			КонецЕсли;
		КонецЕсли;

	Исключение
		глПредупреждение("Сбой при попытке разблокировки каталога.
		|Удаление файла: "+Флаг_РМКЗаписывает+"
		|"+ОписаниеОшибки());

		Возврат 0;
	КонецПопытки;


	Возврат 1;
КонецФункции	// гл



Функция ПодготовитьКаталогДляВыгрузки(ККМ) Экспорт


	Возврат 1;
КонецФункции	// гл


Функция СоздатьФайлыВыгрузки(ФайлОтчетов,ФайлЧеков,ФайлТоваров,ФайлОплат,Ошибка)

	Сам=Сам();
	Если ФС.СуществуетФайл(КаталогОтчетов)=0 Тогда
		глДебаг("Недоступен каталог для выгрузки: "+КаталогОтчетов);
		Ошибка="Недоступен каталог для выгрузки: "+КаталогОтчетов;
		Сам.УстановитьОшибку(Ошибка);
		Возврат 0;
	КонецЕсли;

	ИмяФайла=КаталогОтчетов+"\"+"REPORTH";
	ФайлОтчетов=СоздатьОбъект("XBase");

	ФайлОтчетов.ДобавитьПоле("ID",		"C",	40,	0);
	ФайлОтчетов.ДобавитьПоле("DATE",	"C",	10,	0);
	ФайлОтчетов.ДобавитьПоле("TIME",	"C",	8,	0);
	ФайлОтчетов.ДобавитьПоле("SN",		"N",	15,	0);
	ФайлОтчетов.ДобавитьПоле("Z",		"N",	15,	0);
	ФайлОтчетов.ДобавитьПоле("NUM",		"N",	15,	0);
	ФайлОтчетов.ДобавитьПоле("NUMDOC",	"N",	15,	0);
	ФайлОтчетов.ДобавитьПоле("OPERATION","N",	2,	0);
	ФайлОтчетов.ДобавитьПоле("STATUS",	"N",	1,	0);
	ФайлОтчетов.ДобавитьПоле("SUMM1",	"N",	15,	2);
	ФайлОтчетов.ДобавитьПоле("SUMM2",	"N",	15,	2);
	ФайлОтчетов.ДобавитьПоле("SUMM3",	"N",	15,	2);
	ФайлОтчетов.ДобавитьПоле("SUMM4",	"N",	15,	2);
	ФайлОтчетов.ДобавитьПоле("TAX1",	"N",	15,	2);
	ФайлОтчетов.ДобавитьПоле("TAX2);",	"N",	15,	2);
	ФайлОтчетов.ДобавитьПоле("TAX3",	"N",	15,	2);
	ФайлОтчетов.ДобавитьПоле("TAX4",	"N",	15,	2);
	ФайлОтчетов.ДобавитьПоле("INCASH",	"N",	15,	2);
	ФайлОтчетов.ДобавитьПоле("OUTCASH",	"N",	15,	2);
	ФайлОтчетов.ДобавитьПоле("CASHSTART","N",	15,	2);
	ФайлОтчетов.ДобавитьПоле("CASHEND",	"N",	15,	2);
	ФайлОтчетов.ДобавитьПоле("RETURN1",	"N",	15,	2);
	ФайлОтчетов.ДобавитьПоле("RETURN2",	"N",	15,	2);
	ФайлОтчетов.ДобавитьПоле("RETURN3",	"N",	15,	2);
	ФайлОтчетов.ДобавитьПоле("RETURN4",	"N",	15,	2);
	ФайлОтчетов.ДобавитьПоле("SUMM",	"N",	15,	2);
	ФайлОтчетов.ДобавитьПоле("DISCOUNT","N",	15,	2);
	ФайлОтчетов.ДобавитьПоле("CHARGE",	"N",	15,	2);
	ФайлОтчетов.ДобавитьПоле("TOTAL",	"N",	15,	2);
	ФайлОтчетов.ДобавитьПоле("USERID",	"C",	40,	0);
	ФайлОтчетов.ДобавитьПоле("USERNAME","C",	100, 0);

	Попытка
		ФайлОтчетов.СоздатьФайл(ИмяФайла+".DBF",ИмяФайла+".CDX");
	Исключение
		Сам.УстановитьОшибку("Невозможно создать файл: "+ИмяФайла+" "+ОписаниеОшибки());
		Возврат 0;
	КонецПопытки;

	ФайлОтчетов.Записать();



	ИмяФайла=КаталогОтчетов+"\"+"CheckH";
	ФайлЧеков=СоздатьОбъект("XBase");

	ФайлЧеков.ДобавитьПоле("ID",		"C",	40,	0);
	ФайлЧеков.ДобавитьПоле("DATE",		"C",	10,	0);
	ФайлЧеков.ДобавитьПоле("TIME",		"C",	8,	0);
	ФайлЧеков.ДобавитьПоле("SN",		"N",	15,	0);
	ФайлЧеков.ДобавитьПоле("Z",			"N",	15,	0);
	ФайлЧеков.ДобавитьПоле("NUM",		"N",	15,	0);
	ФайлЧеков.ДобавитьПоле("NUMDOC",	"N",	15,	0);
	ФайлЧеков.ДобавитьПоле("OPERATION",	"N",	2,	0);
	ФайлЧеков.ДобавитьПоле("STATUS",	"N",	1,	0);

	ФайлЧеков.ДобавитьПоле("IMPORTED",	"N",	1,	0);
	ФайлЧеков.ДобавитьПоле("FILENAME",	"C",	50,	0);

	ФайлЧеков.ДобавитьПоле("SUMM",		"N",	15,	2);
	ФайлЧеков.ДобавитьПоле("DISCOUNT",	"N",	15,	2);
	ФайлЧеков.ДобавитьПоле("CHARGE",	"N",	15,	2);
	ФайлЧеков.ДобавитьПоле("TOTAL",		"N",	15,	2);
	ФайлЧеков.ДобавитьПоле("DISCRD",	"C",	40,	0);
	ФайлЧеков.ДобавитьПоле("CLIENT",	"C",	100,	0);
	ФайлЧеков.ДобавитьПоле("SELLERID",	"C",	40,	0);
	ФайлЧеков.ДобавитьПоле("SELLNAME",	"C",	100,	0);

	ФайлЧеков.ДобавитьПоле("USERID",	"C",	40,	0);
	ФайлЧеков.ДобавитьПоле("USERNAME",	"C",	100, 0);
	ФайлЧеков.ДобавитьПоле("HEADER",	"C",	200, 0);
	ФайлЧеков.ДобавитьПоле("SENDED",	"C",	20, 0);
	ФайлЧеков.ДобавитьПоле("SERVERID",	"N",	15, 0);


	ФайлЧеков.Записать();

	Попытка
		ФайлЧеков.СоздатьФайл(ИмяФайла+".DBF",ИмяФайла+".CDX");
	Исключение
		Сам.УстановитьОшибку("Невозможно создать файл: "+ИмяФайла+" "+ОписаниеОшибки());
		Возврат 0;
	КонецПопытки;

	ИмяФайла=КаталогОтчетов+"\"+"CheckT";
	ФайлТоваров=СоздатьОбъект("XBase");


	ФайлТоваров.ДобавитьПоле("IDPARENT",		"C",	40,	0);
	ФайлТоваров.ДобавитьПоле("SN",		"N",	15,	0);
	ФайлТоваров.ДобавитьПоле("Z",			"N",	15,	0);
	ФайлТоваров.ДобавитьПоле("NUMDOC",	"N",	15,	0);
	ФайлТоваров.ДобавитьПоле("NUMSTR",		"N",	15,	0);
	ФайлТоваров.ДобавитьПоле("OPERATION",	"N",	2,	0);
	ФайлТоваров.ДобавитьПоле("IDGOOD",		"C",	40,	0);
	ФайлТоваров.ДобавитьПоле("NAME",		"C",	100,	0);
	ФайлТоваров.ДобавитьПоле("BARCODE",		"C",	40,	0);
	ФайлТоваров.ДобавитьПоле("INFO",		"C",	200,	0);

	ФайлТоваров.ДобавитьПоле("COUNT",		"N",	15,	3);
	ФайлТоваров.ДобавитьПоле("UNIT",		"C",	5,	0);
	ФайлТоваров.ДобавитьПоле("COEF",		"N",	15,	3);
	ФайлТоваров.ДобавитьПоле("PRICE",		"N",	15,	2);
	ФайлТоваров.ДобавитьПоле("SUMM",		"N",	15,	2);
	ФайлТоваров.ДобавитьПоле("DISCOUNT",	"N",	15,	2);
	ФайлТоваров.ДобавитьПоле("CHARGE",	"N",	15,	2);
	ФайлТоваров.ДобавитьПоле("TOTAL",		"N",	15,	2);
	ФайлТоваров.ДобавитьПоле("DISCRD",	"C",	40,	0);
	ФайлТоваров.ДобавитьПоле("TAX1",	"N",	15,	2);
	ФайлТоваров.ДобавитьПоле("TAX2);",	"N",	15,	2);
	ФайлТоваров.ДобавитьПоле("TAX3",	"N",	15,	2);
	ФайлТоваров.ДобавитьПоле("TAX4",	"N",	15,	2);
	Попытка
		ФайлТоваров.СоздатьФайл(ИмяФайла+".DBF",ИмяФайла+".CDX");
	Исключение
		Сам.УстановитьОшибку("Невозможно создать файл: "+ИмяФайла+" "+ОписаниеОшибки());
		Возврат 0;
	КонецПопытки;

	ФайлТоваров.Записать();

	ИмяФайла=КаталогОтчетов+"\"+"Pays";
	ФайлОплат=СоздатьОбъект("XBase");

	ФайлОплат.ДобавитьПоле("IDPARENT",	"C",	40,	0);
	ФайлОплат.ДобавитьПоле("SN",		"N",	15,	0);
	ФайлОплат.ДобавитьПоле("Z",			"N",	15,	0);
	ФайлОплат.ДобавитьПоле("NUMDOC",	"N",	15,	0);
	ФайлОплат.ДобавитьПоле("NUMSTR",	"N",	15,	0);
	ФайлОплат.ДобавитьПоле("NUMPAY",	"N",	15,	0);
	ФайлОплат.ДобавитьПоле("PAYTYPE",	"C",	40,	0);
	ФайлОплат.ДобавитьПоле("NAME",		"C",	100,0);
	ФайлОплат.ДобавитьПоле("INFO",		"C",	100,0);
	ФайлОплат.ДобавитьПоле("SUMM",		"N",	15,	2);


	Попытка
		ФайлОплат.СоздатьФайл(ИмяФайла+".DBF",ИмяФайла+".CDX");
	Исключение
		Сам.УстановитьОшибку("Невозможно создать файл: "+ИмяФайла+" "+ОписаниеОшибки());
		Возврат 0;
	КонецПопытки;
	ФайлОплат.Записать();

	Возврат 1;
КонецФункции




Функция ДобавитьЗаписьИзТЗвДБФ(ТЗ,ДБФ,Ошибка="")

	Попытка
		ДБФ.Добавить();
		Для Инд=1 По ДБФ.КоличествоПолей() Цикл
			Имя="";Тип="";Длина=0;Точность=0;
			ДБФ.ОписаниеПоля(Инд,Имя,Тип,Длина,Точность);
			Попытка
				Значение=ТЗ.ПолучитьЗначение(ТЗ.НомерСтроки,Имя);
				ДБФ.УстановитьЗначениеПоля(Имя,Значение);
			Исключение
			КонецПопытки;
		КонецЦикла;
		ДБФ.Записать();
		Возврат 1;
	Исключение
		Сам=Сам();
		Ошибка=ОписаниеОшибки();
		Сам.УстановитьОшибку(Ошибка);
		Возврат 0;
	КонецПопытки;

КонецФункции


//по выбранному списку ККМ выгружает данные по диапазону дат

Функция ВыгрузитьПоДиапазонуДат(СписокККМ,НачДата,КонДата) Экспорт
	Перем ФайлОтчетов,ФайлЧеков,ФайлТоваров,ФайлОплат;

	Сам	= Сам();
	Ошибка="";

	Если СоздатьФайлыВыгрузки(ФайлОтчетов,ФайлЧеков,ФайлТоваров,ФайлОплат,Ошибка)=0 Тогда
		Сам.УстановитьОшибку(Ошибка);
		Возврат 0;
	КонецЕсли;
	ТЗ=СоздатьОбъект("ИндексированнаяТаблица");
	ТЗИтог=СоздатьОбъект("ИндексированнаяТаблица");

	Для Инд=1 По СписокККМ.РазмерСписка() Цикл
		ККМ=СписокККМ.ПолучитьЗначение(Инд);
		ТЗСмены=глБД.ПолучитьСмены(НачДата,КонДата,ККМ,1);
		ТЗ.Загрузить(ТЗСмены);
		Если Инд=1 Тогда
			ТЗИтог=ТЗ.Копия(0,0);
		КонецЕсли;
		ТЗИтог.Объединить(ТЗ);
	КонецЦикла;

	ТЗ=СоздатьОбъект("ТаблицаЗначений");
	ТЗИтог.Выгрузить(ТЗ);

	Если ТЗ.КоличествоСтрок()>0 Тогда
		ТЗ.ВыбратьСтроки();
		Пока ТЗ.ПолучитьСтроку()=1 Цикл
			НомерСмены=ТЗ.Z;
			НомерККМ=ТЗ.SN;
			Если ДобавитьЗаписьИзТЗвДБФ(ТЗ,ФайлОтчетов,Ошибка)=0 Тогда
				Сам.УстановитьОшибку(Ошибка);
				Возврат 0;
			КонецЕсли;
			ТЗЧеки=глБД.ПолучитьЧекиЗаСмену(НомерСмены,НомерСмены,НомерККМ);


			ТЗЧеки.ВыбратьСтроки();
			Пока ТЗЧеки.ПолучитьСтроку()=1 Цикл
				ДобавитьЗаписьИзТЗвДБФ(ТЗЧеки,ФайлЧеков);

				ТЗТовары=глБД.ПолучитьТоварыЧекаПоИД(ТЗЧеки.ID);
				ТЗТовары.ВыбратьСтроки();
				Пока ТЗТовары.ПолучитьСтроку()=1 Цикл
					Если ДобавитьЗаписьИзТЗвДБФ(ТЗТовары,ФайлТоваров,Ошибка)=0 Тогда
						Сам.УстановитьОшибку(Ошибка);
						Возврат 0;
					КонецЕсли;
				КонецЦикла;

				ТЗОплаты=глБД.ПолучитьОплатыЧекаПоИД(ТЗЧеки.ID);
				ТЗОплаты.ВыбратьСтроки();
				Пока ТЗОплаты.ПолучитьСтроку()=1 Цикл
					Если ДобавитьЗаписьИзТЗвДБФ(ТЗОплаты,ФайлОплат,Ошибка)=0 Тогда
						Сам.УстановитьОшибку(Ошибка);
						Возврат 0;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;

		ФайлОтчетов.ЗакрытьФайл();
		ФайлЧеков.ЗакрытьФайл();
		ФайлТоваров.ЗакрытьФайл();
		ФайлОплат.ЗакрытьФайл();

		Если ПустоеЗначение(ИмяИсходящегоАрхива)=0 Тогда
			ZIP=Сам.ОбменДанными.ZIP;
			Если ПустоеЗначение(ZIP)=1 Тогда
				Сам.УстановитьОшибку("Не инициализирован архиватор.");
				Возврат 0;
			КонецЕсли;

			Если ПустоеЗначение(ПарольИсходящегоАрхива)=0 Тогда
				ZIP.Пароль = СокрЛП(ПарольИсходящегоАрхива);
			КонецЕсли;

			ZIP.КаталогДобавления = КаталогОтчетов;

			КоличествоФайлов      = ZIP.ДобавитьВАрхив(,"*.DBF",ИмяИсходящегоАрхива);


			Если ZIP.КодОшибки = 0 Тогда
				глДебаг("Упаковано "+КоличествоФайлов+" файлов");
			Иначе
				Сам.УстановитьОшибку("Ошибка работы с архивами: код "+ZIP.КодОшибки+ " "+ИмяВходящегоАрхива);
				Возврат 0;
			КонецЕсли;

			ЦелевойКаталог=глНастройки.Получить("EXCHANGE/TARGET");
			Если ПустоеЗначение(ЦелевойКаталог)=0 Тогда
				//переслать на этот адрес

				//тут надо бы парсить строку.
				//если это e-mail - отправить по почте
				//если это ftp- каталог - закинуть на ftp
				//если это сетевой/файловый каталог - скопировать в этот каталог

				//поддержка файлового каталога:

				Попытка

					ФайловаяСистема=СоздатьОбъект("ФайловаяСистема");
					ИмяФайла=ФайловаяСистема.ИмяФайла(ИмяИсходящегоАрхива);
					ФС.КопироватьФайл(ИмяИсходящегоАрхива,ЦелевойКаталог+"\"+ИмяФайла,1);
				Исключение
					Сам.УстановитьОшибку("Сбой при пересылке файла архива."+ИмяФайла+". "+ОписаниеОшибки());
					Возврат 0;
				КонецПопытки;


			КонецЕсли;

		КонецЕсли;

	Иначе

		Сам.УстановитьОшибку("Нет закрытых смен за выбранный период.");
		Возврат 0;
	КонецЕсли;
	Возврат 1;
КонецФункции	// гл




