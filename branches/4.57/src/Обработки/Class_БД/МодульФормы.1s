//Конфигурация для платформы "1С:Предприятие 7.7" РБ-Софт:Рабочее место кассира.
//Версия 4.43 от 19.07.10 20:54:19
//Назначение: Автоматизация POS-узлов в магазинах (Point of sale).
//(c) Баинов Евгений, ООО "РБ-Софт" 2006, г.Улан-Удэ, проспект 50-летия Октября,21А,офис 110 
//e-mail: bainov@rb-soft.ru  icq: 73718937, телефоны: (3012) 44-03-57, 44-76-42, 44-86-58
//---------------------------------------------------------------------------------------
//Данная программа является свободным программным обеспечением.
//Вы вправе распространять ее и/или модифицировать в соответствии с условиями версии 2 
//либо по вашему выбору с условиями более поздней версии Стандартной Общественной Лицензии GNU,
//опубликованной Free Software Foundation. 
//Мы распространяем данную программу в надежде на то, что она будет вам полезной, 
//однако НЕ ПРЕДОСТАВЛЯЕМ НА НЕЕ НИКАКИХ ГАРАНТИЙ, 
//в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
//и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ.
//Для получения более подробной информации ознакомьтесь со Стандартной Общественной Лицензией GNU.
//Вместе с данной программой вы должны были получить экземпляр Стандартной Общественной Лицензии GNU.
//Если вы его не получили, сообщите об этом в Free Software Foundation, Inc.,
//59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//_______________________________________________________________________________________
//Имя модуля:
// <Вставить имя модуля>
//_______________________________________________________________________________________
//Разработчик: Баинов Евгений, e-mail: bainov@rb-soft.ru , icq: 73718937
//_______________________________________________________________________________________
//Назначение модуля:
// <Вставить описание модуля>
//
//_______________________________________________________________________________________
перем _База Экспорт;
Перем СостояниеПодключения Экспорт; //0-база не подключена 1-база подключена
Перем КодОшибки Экспорт;
Перем ПолнаяЗагрузкаГрупп Экспорт;
Перем ПолнаяЗагрузкаТоваров Экспорт;
Перем ПолнаяЗагрузкаШтрихкодов Экспорт;
Перем ПолнаяЗагрузкаДисконтов Экспорт;
Перем СтруктураБазы Экспорт;

Перем ВнутренниеПрефиксы Экспорт; //строка. внутренние префиксы через запятую
Перем ВесовыеПрефиксы Экспорт;    //строка. весовые префиксы через запятую
Перем СписокВесовыхПрефиксовШК Экспорт;  //ТЗ со списком весовых штрихкодов и форматом расшифровки

Перем Коннектор Экспорт; //Объект для доступа к базе данных


Функция Этот(Конт) Возврат Конт; КонецФункции

Функция Сам() Возврат Этот(Контекст) КонецФункции



//сравнивает 2 структуры на равенство
//структуры должны быть с одинаковым набором полей
Функция СравнитьДанные(Д1,Д2) Экспорт
	Если Д1.Количество()<>Д2.Количество() Тогда
		Возврат 0;
	КонецЕсли;

	Для Инд=1 По Д1.Количество() Цикл
		Имя="";
		Зн1=Д1.Получить(Инд,Имя);
		Зн2=0;
		Если Д2.Свойство(Имя,Зн2)=0 Тогда
			возврат 0;
		Иначе
			Если Зн1<>Зн2 Тогда
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат 1;

КонецФункции



//подготавливает строку для записи в базу SQL

Функция ОбработатьСтрокуДляSQL(_Стр) Экспорт
	Стр="";
	Если ПустоеЗначение(_Стр)=1 Тогда
		возврат "";
	ИначеЕсли ТипЗначенияСтр(_Стр)<>"Строка" Тогда
		Стр=Строка(_Стр);
	Иначе
		Стр=_Стр;
	КонецЕсли;  //
	Рез=СтрЗаменить(Стр,"'","''");
	Рез=Сокрп(Рез);
	Возврат Рез;
КонецФункции	// ОбработатьСтрокуДляSQL

//ОписательПоля - функция для создания описания поля объекта
//используется при описании структуры базы данных и при создании структуры хранимого в базе данных объекта
//ИмяПоля - русское имя поля
//Имя
//Тип - Для описания типов используется латинский символ. C- строка, N-число
//Длина - длина поля
//Точность - количество разрядов десятичной части при описании числового поля
//ИмяПоляСсылки - в случае если поле указывает на запись в другой таблице, то здесь имя таблицы и имя поля через точку
//Описание - произвольное описание поля

Функция ОписательПоля(ИмяПоля,Имя,Тип,Длина,Точность,ИмяПоляСсылки="",Описание="",СериализуемыйТип="",АвтоGUID=0,АвтоНумерация=0,ЭтоКлючевоеПоле=0,Сортировка=0)



	Объект=глФабрикаОбъектов.Новый("ОписательПоляБД");
	Объект.ИмяПоля=ИмяПоля;//Русское имя поля
	Объект.Имя=ВРЕГ(Имя);
	Объект.Тип=ВРЕГ(Тип);
	Объект.НомерТипа=0;
	Объект.Длина=Длина;
	Объект.Точность=Точность;
	Объект.Таблица="";
	Объект.Поле="";
	Объект.Описание=Описание;
	Объект.СериализуемыйТип=СериализуемыйТип;
	Объект.АвтоGUID=АвтоGUID;
	Объект.АвтоНумерация=АвтоНумерация;
	Объект.ЭтоКлючевоеПоле=ЭтоКлючевоеПоле;
	Объект.Сортировка=Сортировка;

	

	Если ПустаяСтрока(ИмяПоляСсылки)=0 Тогда
		Стр=СтрЗаменить(ИмяПоляСсылки,".",РазделительСтрок);
		Объект.Таблица	=СтрПолучитьСтроку(Стр,1);
		Объект.Поле		=СтрПолучитьСтроку(Стр,2);
	КонецЕсли;

	Если ВРЕГ(Тип)="N" Тогда
		Объект.НомерТипа=1;
	Иначе
		Объект.НомерТипа=2;
	КонецЕсли;
	возврат Объект;
КонецФункции	// гл


Функция ОписательТабличнойЧасти(ИмяТабличнойЧасти,ИмяОбъекта,ИмяТаблицыБД,УсловиеСвязи,Комментарий)

	
	Описатель=глФабрикаОбъектов.Новый("ОписательТабличнойЧасти");
	Описатель.Имя=ИмяТабличнойЧасти;
	Описатель.ИмяОбъекта=ИмяОбъекта;
	Описатель.ИмяТаблицыБД=ИмяТаблицыБД;
	Описатель.УсловиеСвязи=УсловиеСвязи;
	Описатель.Комментарий=Комментарий;
	
	Возврат Описатель;
КонецФункции


//Функция ПолучитьСтруктуруБазыДанных()
//возвращает структуру базы данных в виде таблицы значений с опистелями таблиц базы данных
//читает структуру из общей таблицы "СтруктураБазыДанных"
//для изменения структуры следует редактировать эту таблицу

Функция ПолучитьСтруктуруБазыДанных() Экспорт


	ТЗ=НовыйОбъект("СтруктураБазы");

	ТЗ.ДобавитьИндекс("ИмяОбъекта", "^ИмяОбъекта", 1);
	ТЗ.ДобавитьИндекс("ИмяТаблицы", "^ИмяТаблицы", 1);


	Таблица=СоздатьОбъект("Таблица");
	Таблица.ИсходнаяТаблица("СтруктураБазыДанных");
	Таблица.Вывести();

	ЗакончилиЧитать=0;
	НомерСтроки=6;  // с 6-ой строки начинается описание типов
	ПустыхСтрок=0;
	ЧитаемОписаниеТаблицы=0;
	ЧитаемОписаниеПолей=0;

	ИмяТаблицы="";
	ИмяОбъекта="";
	ОписаниеТаблицы="";
	ОписательТаблицы="";
	Таблицы="";

	Пока ЗакончилиЧитать=0 Цикл

		Область=Таблица.Область(НомерСтроки,2,НомерСтроки,2);

		СтрТип		=	ВРЕГ(СокрЛП(Область.Текст));


		Если ТипЗначенияСтр(ОписательТаблицы)="Структура" Тогда

			ТЗ.НоваяСтрока();
			ТЗ.ИмяТаблицы 	= ИмяТаблицы;
			ТЗ.ИмяОбъекта 	= ИмяОбъекта;
			ТЗ.Описатель 	= ОписательТаблицы;
			ТЗ.Описание		= ОписаниеТаблицы;
			ТЗ.Таблицы		= Таблицы;

			ОписательТаблицы="";
			Таблицы="";
		КонецЕсли;



		Если СтрТип="ОБЪЕКТ" Тогда
			ЧитаемОписаниеТаблицы=1;


			НомерСтроки=НомерСтроки+1;

			Область=Таблица.Область(НомерСтроки,2,НомерСтроки,2);
			ИмяОбъекта=СокрЛП(Область.Текст);

			Область=Таблица.Область(НомерСтроки,3,НомерСтроки,3);
			ИмяТаблицы=СокрЛП(Область.Текст);

			Область=Таблица.Область(НомерСтроки,5,НомерСтроки,5);
			ОписаниеТаблицы=СокрЛП(Область.Текст);

			НомерСтроки=НомерСтроки+3;

			ЧитаемОписаниеПолей=1;
			ЧитаемОписаниеТабличныхЧастей=0;


			ОписательТаблицы=СоздатьОбъект("Структура");
			Таблицы=СоздатьОбъект("Структура");


			Пока ЧитаемОписаниеПолей=1 Цикл
				Область=Таблица.Область(НомерСтроки,2,НомерСтроки,2);
				ИмяПоля=СокрЛП(Область.Текст);
				Если ИмяПоля="" Тогда
					ЧитаемОписаниеПолей=0;
				ИначеЕсли ИмяПоля="Табличные части" Тогда
					ЧитаемОписаниеПолей=0;
					ЧитаемОписаниеТабличныхЧастей=1;
					НомерСтроки=НомерСтроки+2;


					Пока ЧитаемОписаниеТабличныхЧастей=1 Цикл
						Область=Таблица.Область(НомерСтроки,2,НомерСтроки,2);
						
						ИмяТабличнойЧастиСТипом=СокрЛП(Область.Текст);
						
						Если ИмяТабличнойЧастиСТипом="" Тогда
							ЧитаемОписаниеТабличныхЧастей=0;
						Иначе
							ИмяТабличнойЧастиСТипом=СтрЗаменить(ИмяТабличнойЧастиСТипом,":",РазделительСтрок);
							ИмяТабличнойЧасти=СтрПолучитьСтроку(ИмяТабличнойЧастиСТипом,1);
							ИмяОбъектаТЧ=СтрПолучитьСтроку(ИмяТабличнойЧастиСТипом,2);
							
							Область=Таблица.Область(НомерСтроки,3,НомерСтроки,3);
							ИмяТаблицыБД_ТабличнойЧасти=СокрЛП(Область.Текст);

							Область=Таблица.Область(НомерСтроки,4,НомерСтроки,4);
							УсловиеСвязи=СокрЛП(Область.Текст);

							Область=Таблица.Область(НомерСтроки,7,НомерСтроки,7);
							ОписаниеТабличнойЧасти=СокрЛП(Область.Текст);
							НомерСтроки=НомерСтроки+1;
							
							

							Таблицы.Вставить(ИмяТабличнойЧасти,ОписательТабличнойЧасти(ИмяТабличнойЧасти,ИмяОбъектаТЧ,ВРЕГ(ИмяТаблицыБД_ТабличнойЧасти),ВРЕГ(УсловиеСвязи),ОписаниеТабличнойЧасти));
						КонецЕсли;
					КонецЦикла;
				Иначе
					Область=Таблица.Область(НомерСтроки,3,НомерСтроки,3);
					ОписательПоляСтр=СтрЗаменить(СокрЛП(Область.Текст),",",РазделительСтрок);
					ОписательПоляСтр=СтрЗаменить(ОписательПоляСтр,";",РазделительСтрок);
					
					ИмяПоляТаблицы=СтрПолучитьСтроку(ОписательПоляСтр,1);
					
					ЕстьАвтонумерация=0;
					ЭтоКлючевоеПоле=0;
					АвтоГУИД=0;
					Сортировка=0;
					
					Если СтрКоличествоСтрок(ОписательПоляСтр)>1 Тогда
						//Есть ключевые слова. Парсим
						Для ИтераторОписателя=2 По СтрКоличествоСтрок(ОписательПоляСтр) Цикл
							Слово=ВРЕГ(СокрЛП(СтрПолучитьСтроку(ОписательПоляСтр,ИтераторОписателя)));
							Если Слово="KEY" Тогда
								ЭтоКлючевоеПоле=1;
							ИначеЕсли Слово="AUTONUM" Тогда
								ЕстьАвтонумерация=1;
							ИначеЕсли Слово="AUTOGUID" Тогда
								АвтоГУИД=1;
							ИначеЕсли Слово="ORDER" Тогда
								Сортировка=1;
							Иначе
								//#error Неверное описание поля таблицы базы данных. Неверное ключевое слово в колонке ""Имя поля таблицы БД""
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;

					Область=Таблица.Область(НомерСтроки,4,НомерСтроки,4);

					СтрокаТип=СокрЛП(Область.Текст);

					Тип=Сред(СтрокаТип,2,1); //(C) Строка (N) Число

					СериализуемыйТип="";
					Индекс=Найти(СтрокаТип,":");
					Если Индекс>0 Тогда
						СериализуемыйТип=Сред(СтрокаТип,Индекс+1);
					КонецЕсли;



					Область=Таблица.Область(НомерСтроки,5,НомерСтроки,5);
					Длина=Число(СокрЛП(Область.Текст));

					Точность=0;
					Область=Таблица.Область(НомерСтроки,6,НомерСтроки,6);

					ТочностьСтр=СокрЛП(Область.Текст);
					Если ТочностьСтр<>"" Тогда
						Точность=Число(ТочностьСтр);
					КонецЕсли;


					Область=Таблица.Область(НомерСтроки,7,НомерСтроки,7);
					СвязанноеПоле=СокрЛП(Область.Текст);

					Область=Таблица.Область(НомерСтроки,8,НомерСтроки,8);
					ОписаниеПоля=СокрЛП(Область.Текст);


					

					ОписательТаблицы.Вставить(ИмяПоля,ОписательПоля(ИмяПоля,ИмяПоляТаблицы,Тип,Длина,Точность,
					СвязанноеПоле,ОписаниеПоля,СериализуемыйТип,АвтоГУИД,ЕстьАвтонумерация,ЭтоКлючевоеПоле,Сортировка));
					НомерСтроки=НомерСтроки+1;
				КонецЕсли;
			КонецЦикла;


		ИначеЕсли СтрТип="" Тогда

			НомерСтроки=НомерСтроки+1;
			Если СтрТип="" Тогда
				ПустыхСтрок=ПустыхСтрок+1;
			Иначе
				ПустыхСтрок=0;
			КонецЕсли;
		Иначе
			глДебаг("Неверная структура описания базы данных:"+СтрТип);
			//#error Неверная структура описания базы данных.
		КонецЕсли;


		Если ПустыхСтрок=10 Тогда
			ЗакончилиЧитать=1;
		Иначе
			НомерСтроки=НомерСтроки+1;

		КонецЕсли;
	КонецЦикла;

	возврат ТЗ;
КонецФункции	// ПолучитьСтруктуруБазыДанных


//создает структуру соответствующую виду объекта
//виды объектов определены в функции ПолучитьСтуктуруБазы


Функция Новый(ИмяТипа) экспорт
	Перем Структура;


	НомерСтроки=СтруктураБазы.НайтиСтроку("ИмяОбъекта",ИмяТипа,,1);
	Если НомерСтроки=0 Тогда
		//#curmeth
		глДебаг("ИмяТипа="+ИмяТипа+" Не найдено описание типа.","Новый("+ИмяТипа+")");
		//#error Не найдено описание типа.
		Возврат 0;
	КонецЕсли;

	Структура=СоздатьОбъект("Структура");
	Структура.Вставить("_Вид",ВРЕГ(ИмяТипа));
	Структура.Вставить("ЭтоНовый",1);
	Структура.Вставить("НовыйИД","");

	Описатель=СтруктураБазы.Описатель;
	Для Инд=1 По Описатель.Количество() Цикл
		ОписательПоля=Описатель.Получить(Инд);

		Если ОписательПоля.СериализуемыйТип<>"" Тогда
			//полем является сериализуемый класс
			//тип объекта должен быть именем класса
			Объект=СоздатьОбъект(ОписательПоля.СериализуемыйТип);
			Структура.Вставить(ОписательПоля.ИмяПоля,Объект);
		ИначеЕсли ОписательПоля.Тип="C" Тогда

			Если ОписательПоля.АвтоGUID=1 Тогда
				GUID=СоздатьОбъект("GUID");
				GUID.Новый();
				Структура.Вставить(ОписательПоля.ИмяПоля,GUID.ВСтроку());
			Иначе
				Структура.Вставить(ОписательПоля.ИмяПоля,"");
			КонецЕсли;
		ИначеЕсли ОписательПоля.Тип="N" Тогда
			Структура.Вставить(ОписательПоля.ИмяПоля,0);
		Иначе
			//#curmeth
			Сообщить("Тип поля ="+ОписательПоля.Тип+" Имя поля ="+ОписательПоля.ИмяПоля);
			//#error Не используется тип поля:

			Возврат 0;
		КонецЕсли;  //
	КонецЦикла;

	Таблицы=СтруктураБазы.Таблицы;
	Для НомерТаблицы=1 По Таблицы.Количество() Цикл
		ОписательТаблицы=Таблицы.Получить(НомерТаблицы);

		ИмяТаблицы=ОписательТаблицы.Имя;
		ИмяТаблицыБД=ОписательТаблицы.ИмяТаблицыБД;

		ТЗ=СоздатьОбъект("ТаблицаЗначений");

		НомерСтроки=СтруктураБазы.НайтиСтроку("ИмяТаблицы",ИмяТаблицыБД,,1);
		Если НомерСтроки>0 Тогда

			Описатель=СтруктураБазы.Описатель;
			Для Инд=1 По Описатель.Количество() Цикл
				ОписательПоля=Описатель.Получить(Инд);

				Если ОписательПоля.СериализуемыйТип<>"" Тогда
					ТЗ.НоваяКолонка(ОписательПоля.ИмяПоля);
				ИначеЕсли ОписательПоля.Тип="C" Тогда
					ТЗ.НоваяКолонка(ОписательПоля.ИмяПоля,"Строка");
				ИначеЕсли ОписательПоля.Тип="N" Тогда
					ТЗ.НоваяКолонка(ОписательПоля.ИмяПоля,"Число");
				Иначе
					//#curmeth
					глДебаг("Тип поля ="+ОписательПоля.Тип+" Имя поля ="+ОписательПоля.ИмяПоля+" Не используется тип поля.");
					//#error Не используется тип поля:

					Возврат 0;
				КонецЕсли;  //
			КонецЦикла;



		Иначе
			//#curmeth
			глДебаг("ИмяТипа= "+ИмяТипа+" Имя табличной части ="+ИмяТаблицы+" Имя таблицы БД="+ИмяТаблицыБД+" Нет связанной таблицы в структуре базы");
			//#error Нет связанной таблицы в структуре базы
			Возврат 0;
		КонецЕсли;


		Структура.Вставить(ИмяТаблицы,ТЗ);
	КонецЦикла;

	возврат Структура;
КонецФункции


//ФорматФайла - txt,mxl,xls,htm

Процедура ЗаписатьСтруктуруБазы(ИмяФайла,ФорматФайла="txt",Открывать=0) Экспорт

	Если нрег(ФорматФайла)="txt" Тогда
		Текст=СоздатьОбъект("Текст");
		Текст.ДобавитьСтроку("Описание структуры базы данных программы РБ-Софт:Рабочее место кассира.
		|версия"+ НомерВерсии+"
		|"+ТекущаяДата()+"
		|"+ТекущееВремя()+"
		|");

		ТЗ=СтруктураБазы;
		ТЗ.ВыбратьСтроки();
		Пока ТЗ.ПолучитьСтроку() = 1 Цикл
			Текст.ДобавитьСтроку("");
			Текст.ДобавитьСтроку("№"+СимволТабуляции+"Объект"+СимволТабуляции+"Таблица"+СимволТабуляции+"Описание");
			Текст.ДобавитьСтроку(""+ТЗ.НомерСтроки+"."+СимволТабуляции+ТЗ.ИмяОбъекта+СимволТабуляции+ТЗ.ИмяТаблицы+СимволТабуляции+""+ТЗ.Описание);
			Текст.ДобавитьСтроку("");

			ОписательТаблицы=ТЗ.Описатель;

			Текст.ДобавитьСтроку("№"+СимволТабуляции+"Русское имя поля"+СимволТабуляции+"Имя"+СимволТабуляции+"Тип"+СимволТабуляции+"Длина"+СимволТабуляции+"Точность"+СимволТабуляции+"Таблица.Поле"+СимволТабуляции+"Описание");

			Для Инд=1 По ОписательТаблицы.Количество() Цикл
				Описатель=ОписательТаблицы.Получить(Инд);
				Текст.ДобавитьСтроку(""+Инд+"."+СимволТабуляции+Описатель.ИмяПоля+СимволТабуляции+Описатель.Имя+СимволТабуляции+Описатель.Тип+СимволТабуляции+Описатель.Длина+СимволТабуляции+Описатель.Точность+СимволТабуляции+?(ПустаяСтрока(Описатель.Таблица)=1,"",""+Описатель.Таблица+"."+Описатель.Поле)+СимволТабуляции+Описатель.Описание);
			КонецЦикла;
		КонецЦикла;
		Попытка
			Текст.Записать(ИмяФайла);
		Исключение
			Предупреждение("Попытка записи структуры базы не удалась.
			|"+ИмяФайла+"
			|"+ОписаниеОшибки(),5);
		КонецПопытки;

		Если Открывать=1 Тогда
			Текст.Показать("Структура базы данных",ИмяФайла);
		КонецЕсли;
	Иначе


		Таб=СоздатьОбъект("Таблица");
		Таб.ИсходнаяТаблица("СтруктураБазы_Макет");
		Таб.ВывестиСекцию("Шапка");

		ТЗ=СтруктураБазы;
		ТЗ.ВыбратьСтроки();
		Пока ТЗ.ПолучитьСтроку() = 1 Цикл


			ИмяОбъекта	=ТЗ.ИмяОбъекта;
			ИмяТаблицы	=ТЗ.ИмяТаблицы;
			Описание	 =ТЗ.Описание;
			НомерТаблицы=ТЗ.НомерСтроки;

			ОписательТаблицы=ТЗ.Описатель;

			Таб.ВывестиСекцию("ОписаниеТаблицы");

			Таб.ВывестиСекцию("ШапкаПолей");

			Для Инд=1 По ОписательТаблицы.Количество() Цикл
				Описатель=ОписательТаблицы.Получить(Инд);
				ИмяПоля=Описатель.ИмяПоля;
				Имя=Описатель.Имя;
				Тип=?(Описатель.Тип="C","(C) Строка",?(Описатель.Тип="N","(N) Число","("+Описатель.Тип+") Неизвестный"));
				Длина=Описатель.Длина;
				Точность=?(Описатель.Точность=0,"",Описатель.Точность);
				Ссылка=?(ПустаяСтрока(Описатель.Таблица)=1,"",""+Описатель.Таблица+"."+Описатель.Поле);
				Описание=Описатель.Описание;

				Если Описатель.СериализуемыйТип<>"" Тогда
					Тип=Тип+" Объектный тип:"+Описатель.СериализуемыйТип;
				КонецЕсли;
				Таб.ВывестиСекцию("СтрокаПолей");
			КонецЦикла;

			Если ТЗ.Таблицы.Количество()>0 Тогда
				Таб.ВывестиСекцию("ШапкаТЧ");
				Инд=0;
				Для Инд=1 по ТЗ.Таблицы.Количество() Цикл
					ОписательТЧ=ТЗ.Таблицы.Получить(Инд);



					Имя			=ОписательТЧ.Имя;
					ИмяТаблицыБД	=ОписательТЧ.ИмяТаблицыБД;
					УсловиеСвязи=ОписательТЧ.УсловиеСвязи;
					Описание	=ОписательТЧ.Комментарий;
					Таб.ВывестиСекцию("СтрокаТЧ");

				КонецЦикла;
			КонецЕсли;


		КонецЦикла;
		Таб.ТолькоПросмотр(1);
		Таб.ПараметрыСтраницы(1,,,,,,,,,1);
		Попытка

			Если нрег(ФорматФайла)="xls" Тогда
				Таб.Записать(ИмяФайла,1);
			ИначеЕсли нрег(ФорматФайла)="htm" Тогда
				Таб.Записать(ИмяФайла,2);
			Иначе
				Таб.Записать(ИмяФайла);
			КонецЕсли;
		Исключение
			Предупреждение("Попытка записи структуры базы не удалась.
			|"+ИмяФайла+"
			|"+ОписаниеОшибки(),5);
		КонецПопытки;

		Если Открывать=1 Тогда
			Таб.Показать("Структура базы данных");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры




//Функция должна быть переопределена
//в dbf - проверить наличие файлов
//mysql - подключение к серверу
Функция Подключение() Экспорт

	Возврат 1;
КонецФункции

Процедура Отключение() Экспорт

КонецПроцедуры


//зарегистрировать ошибку
Процедура Ошибка(пКодОшибки) Экспорт
	КодОшибки=пКодОшибки;
КонецПроцедуры

Функция ПолучитьОписаниеОшибки() Экспорт
	Возврат "";
КонецФункции	// ОписаниеОшибки

Процедура Инициализация() Экспорт
	СостояниеПодключения=0;
	КодОшибки=0;

КонецПроцедуры	// Инициализация

Функция СоздатьКоннектор() Экспорт
	Возврат 0;
КонецФункции

//------------------------------------ ------------------------------------
Процедура Конструктор()
	_База = Этот(Контекст).ПолучитьБазовыйКласс("Объект");
	Сам=Сам();
	
	ПолнаяЗагрузкаГрупп =0;
	ПолнаяЗагрузкаТоваров =0;
	ПолнаяЗагрузкаШтрихкодов =0;
	ПолнаяЗагрузкаДисконтов =0;

	Коннектор=Сам.СоздатьКоннектор();
	
	
	СтруктураБазы=Сам().ПолучитьСтруктуруБазыДанных();
	


	СписокВесовыхПрефиксовШК=НовыйОбъект("ВесовыеПрефиксыШК");

	ВнутренниеПрефиксы="27";
	ВесовыеПрефиксы="21";

	Значение=глНастройки.Получить("SCANCODES/OURPREFIX");
	Если ПустоеЗначение(Значение)=0 Тогда
		ВнутренниеПрефиксы=Значение;
	КонецЕсли;  //ПустоеЗначение(Значение)=1

	Значение=глНастройки.Получить("SCANCODES/WEGHTPREFIX");
	Если ПустоеЗначение(Значение)=0 Тогда
		ВесовыеПрефиксы=Значение;

		Текст=СоздатьОбъект("Текст");
		СписокПрефиксов=СтрЗаменить(ВесовыеПрефиксы,",",РазделительСтрок);
		Текст.ДобавитьСтроку(СписокПрефиксов);

		Для Инд=1 По Текст.КоличествоСтрок() Цикл
			Префикс=Текст.ПолучитьСтроку(Инд);
			ФорматШК=глНастройки.Получить("SCANCODES/"+Префикс);

			ТекстФормат=СоздатьОбъект("Текст");
			СписокФормат=СтрЗаменить(ФорматШК,",",РазделительСтрок);
			ТекстФормат.ДобавитьСтроку(СписокФормат);

			СписокВесовыхПрефиксовШК.НоваяСтрока();
			СписокВесовыхПрефиксовШК.Префикс=Префикс;
			СписокВесовыхПрефиксовШК.Формат=ТекстФормат.ПолучитьСтроку(1);
			Попытка
				СписокВесовыхПрефиксовШК.Коэффициент=Число(ТекстФормат.ПолучитьСтроку(2));
				Если СписокВесовыхПрефиксовШК.Коэффициент=0 Тогда
					СписокВесовыхПрефиксовШК.Коэффициент=0.001;
				КонецЕсли;
			Исключение
				СписокВесовыхПрефиксовШК.Коэффициент=0.001;
			КонецПопытки;
		КонецЦикла;

	КонецЕсли;  //ПустоеЗначение(Значение)=1

КонецПроцедуры // Конструктор

//------------------------------------ ------------------------------------
Процедура Деструктор()

	Если СостояниеПодключения=1 Тогда
		Отключение();
		СостояниеПодключения=0;
	КонецЕсли;
	СтруктураБазы=0;

	Коннектор=0;
	
КонецПроцедуры // Деструктор



//Ищет все записи в таблице с именем ИмяТаблицы по полю с именем ИмяПоля со значением, равным ЗначениеПоля
//Если Имя поля не указано, то получаем все записи из таблицы
//ДопУсловие - Можно наложить еще одно дополнительное условие. Его необходимо описать в Параметре ДопУсловие на языке SQL условие в секции Where
//пример:
//  ТЗ=ПолучитьЗаписиИзТаблицыПоПолю("checkh",,,"(status=1) and (date>='"+НачДатаСтр+"') and (date<='"+КонДатаСтр+"')","date,time,NumDoc");
//СтрокаСортировки - порядок сортировки полей. Перечислить через запятую поля для сортировки результата запроса
//абстрактная функция

Функция ПолучитьЗаписиИзТаблицыПоПолю(ИмяТаблицы,ИмяПоля="",ЗначениеПоля="",ДопУсловие="",СтрокаСортировки="",КоличествоЗаписей=0) Экспорт

	Возврат 0;
КонецФункции

Функция ПолучитьЗаписиИзТаблицы(ИмяТаблицы,Условие="",СтрокаСортировки="",КоличествоЗаписей=0) Экспорт

	Возврат 0;
КонецФункции

Процедура ОчиститьТаблицу(ИмяТаблицы) Экспорт
	//сообщить("Абстрактная функция! ОчиститьТаблицу");
КонецПроцедуры	// ОчиститьТаблицу


Процедура СжатьТаблицу(ИмяТаблицы) Экспорт
	//Сообщить("Абстрактная процедура! СжатьТаблицу" );
КонецПроцедуры	// СжатьТаблицу


Процедура СжатьТаблицы() Экспорт
	Сам=Сам();
	СтруктураБазы.ВыбратьСтроки();
	НетОшибок=1;
	Пока СтруктураБазы.ПолучитьСтроку()=1 Цикл
		Сам.СжатьТаблицу(СтруктураБазы.ИмяТаблицы);
	КонецЦикла;
КонецПроцедуры	// СжатьТаблицы



//
Процедура ДобавитьОбъектыВРезультат(ТЗ,ТипОбъекта) Экспорт
	ТЗ.НоваяКолонка("Объект");
	ТЗ.ВыбратьСтроки();
	Пока ТЗ.ПолучитьСтроку()=1 Цикл
		Объект=Сам().Новый(ТипОбъекта);
		Сам().ЗаполнитьОбъект(Объект,ТЗ,ТЗ.НомерСтроки);
		ТЗ.Объект=Объект;
		//сообщить(Объект.ИД+" "+Объект.Наименование+" "+ТЗ.ID+" "+ТЗ.Name);
		Объект=0;
	КонецЦикла;
КонецПроцедуры	// ДобавитьОбъектыВРезультат

Функция ПолучитьТоварыПоЦене(Цена,СоздатьОбъекты=0) Экспорт
	ТЗ=Сам().ПолучитьЗаписиИзТаблицыПоПолю("goods","price",Цена,,"name");
	Если СоздатьОбъекты=1 Тогда
		Сам().ДобавитьОбъектыВРезультат(ТЗ,"Товар");
	КонецЕсли;

	Возврат ТЗ
КонецФункции


Функция ПолучитьТоварыПоАртикулу(Артикул,СоздатьОбъекты=0) Экспорт
	ТЗ=Сам().ПолучитьЗаписиИзТаблицыПоПолю("goods","article",Артикул,,"name");
	Если СоздатьОбъекты=1 Тогда
		Сам().ДобавитьОбъектыВРезультат(ТЗ,"Товар");
	КонецЕсли;

	Возврат ТЗ
КонецФункции

//
////СоздатьОбъекты=1 - в колонке Объект таблицы значений будут объекты типа Товар
//
Функция ПолучитьТоварыПоШтрихкоду(Штрихкод,СоздатьОбъекты=0) Экспорт
	ТЗ=Сам().ПолучитьЗаписиИзТаблицыПоПолю("goods,barcodes","barcodes.barcode",Штрихкод,"goods.id=barcodes.idgood","name",,"*");
	Если СоздатьОбъекты=1 Тогда
		ДобавитьОбъектыВРезультат(ТЗ,"Товар");
	КонецЕсли;
	Возврат ТЗ
КонецФункции

Функция ПолучитьШтрихкодыТовара(ИДТовара) Экспорт

	ТЗ=Сам().ПолучитьЗаписиИзТаблицыПоПолю("barcodes","idgood",ИДТовара,,);

	Возврат ТЗ
КонецФункции




Функция ПолучитьОбъектПоИД(ВидОбъекта,ИД) Экспорт


	НомерСтроки=СтруктураБазы.НайтиСтроку("ИмяОбъекта",ВидОбъекта,,1);
	Если НомерСтроки=0 Тогда
		Сообщить("ВидОбъекта="+ВидОбъекта);
		//#curmeth
		//#error Не найдено описание типа.
	КонецЕсли;
	Сам=Сам();

	Описатель=СтруктураБазы.Описатель;
	ИмяТаблицы=СтруктураБазы.ИмяТаблицы;


	ТЗ=Сам.ПолучитьЗаписиИзТаблицыПоПолю(ИмяТаблицы,"id",ИД,,"id",1);


	Если ТЗ.КоличествоСтрок()>0 Тогда
		Структура=Сам().Новый(ВидОбъекта);
		Сам().ЗаполнитьОбъект(Структура,ТЗ);
		Возврат Структура;
	КонецЕсли;
	Возврат 0;
КонецФункции

Функция ПолучитьТоварПоИД(ИДТовара) Экспорт
	Возврат ПолучитьОбъектПоИД("Товар",ИДТовара);
КонецФункции //


Функция ПолучитьПользователяПоИД(ИД) Экспорт

	ТЗ=Сам().ПолучитьЗаписиИзТаблицыПоПолю("users","id",ИД,,);

	Если ТЗ.КоличествоСтрок()>0 Тогда
		Структура=Сам().Новый("Пользователь");
		Сам().ЗаполнитьОбъект(Структура,ТЗ);
		Возврат Структура;
	КонецЕсли;
	Возврат 0;
КонецФункции


Функция ПолучитьПользователяПоКарте(Код) Экспорт

	ТЗ=Сам().ПолучитьЗаписиИзТаблицыПоПолю("users","idcard",Код);

	Если ТЗ.КоличествоСтрок()>0 Тогда
		Структура=Сам().Новый("Пользователь");
		Сам().ЗаполнитьОбъект(Структура,ТЗ);
		Возврат Структура;
	КонецЕсли;
	Возврат 0;
КонецФункции


//параметры

//ПоказыватьМастеркод=0 - не показывать логин MASTERCODE
//                    1 - показывать логин MASTERCODE
//ФильтрАктивности=0 - выводить всех
//                 1 - выводить только активных
//                 2 - выводить только неактивных
//Возвращает ТЗ со списком пользователей
//Колонки 
//ID - ИД пользователя
//Name - Краткое имя пользователя
//FullName - ФИО
//Active - флаг активности пользователя
//RoleID - идентификатор роли (набора прав)
//RoleName - Наименование набора прав

Функция ПолучитьСписокПользователей(ПоказыватьМастеркод=0,ФильтрАктивности=0) Экспорт
	Сам=Сам();
	
	
	ТекстЗапроса="SELECT	
	|User.Active as Active,
	|User.Id as ID, 
	|User.Name as Name, 
	|User.FullName as FullName, 
	|User.IdRole as RoleId, 
	|User.Gender as Gender,
	|Role.Name as RoleName 	
	|From Users User 
	|Left Join RoleH Role 
	|On User.IDRole=Role.Id
	|";
	Если ПоказыватьМастеркод=1 Тогда
		Если ФильтрАктивности=1 Тогда
			ТекстЗапроса=ТекстЗапроса+" WHERE (Active=1) or (User.Id='MASTERCODE')";
		ИначеЕсли ФильтрАктивности=2 Тогда
			ТекстЗапроса=ТекстЗапроса+" WHERE (Active=0) or (User.Id='MASTERCODE')";
		КонецЕсли;	
	Иначе
		Если ФильтрАктивности=1 Тогда
			ТекстЗапроса=ТекстЗапроса+" WHERE (Active=1) and (User.Id<>'MASTERCODE')";
		ИначеЕсли ФильтрАктивности=2 Тогда
			ТекстЗапроса=ТекстЗапроса+" WHERE (Active=0) and (User.Id<>'MASTERCODE')";
		КонецЕсли;	
		
	КонецЕсли;	
	
	возврат Сам.ВыполнитьЗапрос(ТекстЗапроса);
КонецФункции

Функция ПолучитьККМПоИД(ИД) Экспорт

	ТЗ=Сам().ПолучитьЗаписиИзТаблицыПоПолю("devkkm","id",ИД,,);

	Если ТЗ.КоличествоСтрок()>0 Тогда
		Объект=Сам().Новый("Устройство.ККМ");
		Сам().ЗаполнитьОбъект(Объект,ТЗ);
		Возврат Объект;
	КонецЕсли;
	Возврат 0;
КонецФункции //

//Сортировка - имена полей таблицы данных, по которым надо отсортировать объекты (можно нексолько через запятую)
//Будет использован в запросе в секции SORT BY
//Условие фильтра - фильтр в синтаксисе SQL. Будет использован в запросе в секции WHERE

Функция ПолучитьОбъектыГруппы(ВидОбъекта,КодРодителя,Сортировка="",УсловиеФильтра="") Экспорт
	Сам=Сам();
	ИмяТаблицы=Сам.ПолучитьИмяТаблицы(ВидОбъекта);
	Возврат Сам().ПолучитьЗаписиИзТаблицыПоПолю(ИмяТаблицы,"idparent",КодРодителя,УсловиеФильтра,Сортировка);
КонецФункции	// ПолучитьТоварыГруппы

Функция ПолучитьТоварыГруппы(КодРодителя) Экспорт
	Возврат Сам().ПолучитьОбъектыГруппы("Товар",КодРодителя);
КонецФункции	// ПолучитьТоварыГруппы

Функция ПолучитьГруппы(ВидОбъекта,КодРодителя) Экспорт
	Сам=Сам();
	ИмяТаблицы=Сам.ПолучитьИмяТаблицыГрупп(ВидОбъекта);
	Если ИмяТаблицы="" Тогда
	
		ТЗ=СоздатьОбъект("ТаблицаЗначений");
		ТЗ.НоваяКолонка("Id");
		ТЗ.НоваяКолонка("IdParent");
		ТЗ.НоваяКолонка("Name");
		
		возврат ТЗ;
	КонецЕсли;	
	
	Возврат Сам().ПолучитьЗаписиИзТаблицыПоПолю(ИмяТаблицы,"idparent",КодРодителя,,"name");
КонецФункции	// ПолучитьТоварыГруппы

Функция ПолучитьГруппуПоИД(ВидОбъекта,ИД) Экспорт
	Сам=сам();
	ИмяТаблицы=Сам.ПолучитьИмяТаблицыГрупп(ВидОбъекта);
	Возврат Сам().ПолучитьЗаписиИзТаблицыПоПолю(ИмяТаблицы,"id",ИД,,);
КонецФункции	// ПолучитьТоварыГруппы

Функция ПолучитьВсеТовары() Экспорт
	Возврат Сам().ПолучитьЗаписиИзТаблицыПоПолю("goods");
КонецФункции	// ПолучитьТоварыГруппы


Функция ПолучитьТоварыПоИмени(Имя,КоличествоЗаписей=0) Экспорт
	Возврат Сам().ПолучитьЗаписиИзТаблицыПоПолю("goods",,,"name like '%"+СокрЛП(ВРЕГ(Имя))+"%'","name",КоличествоЗаписей);
КонецФункции	// ПолучитьВсеТоварыПоИмени

Функция ПолучитьТоварыПоФильтру(СтрокаФильтра,ИмяПоля,КоличествоЗаписей=0) Экспорт

	Стр=СтрЗаменить(СтрокаФильтра," ",РазделительСтрок);

	Если ИмяПоля="price" Тогда

		СтрокаЦены=СокрЛП(СтрЗаменить(СтрЗаменить(СтрПолучитьСтроку(Стр,1),",",".")," ",""));
		СтрокаДиапазона=СтрЗаменить(СтрокаЦены,"-",РазделительСтрок);
		Попытка
			Если СтрКоличествоСтрок(СтрокаДиапазона)=2 Тогда
				НачЦена=Число(СтрПолучитьСтроку(СтрокаДиапазона,1));
				КонЦена=Число(СтрПолучитьСтроку(СтрокаДиапазона,2));
				Если НачЦена<КонЦена Тогда
					Условие="((price>="+НачЦена+")and(price<="+КонЦена+"))";
				ИначеЕсли НачЦена>КонЦена Тогда
					Условие="((price>="+КонЦена+")and(price<="+НачЦена+"))";
				Иначе
					Условие="(price="+НачЦена+")";
				КонецЕсли;

			Иначе
				Цена=Число(СтрокаЦены);
				Условие="(price="+Цена+")";
			КонецЕсли;

		Исключение
			Условие="";
		КонецПопытки;



		Для Инд=2 По СтрКоличествоСтрок(Стр) Цикл
			лСтрока=СтрПолучитьСтроку(Стр,Инд);
			Если СокрЛП(лСтрока)<>"" Тогда
				Условие=?(Условие="","",Условие+" and ")+"(name like '%"+СокрЛП(ВРЕГ(лСтрока))+"%')";
			КонецЕсли;
		КонецЦикла;


	Иначе

		Условие="("+ИмяПоля+" like '%"+СокрЛП(ВРЕГ(СтрПолучитьСтроку(Стр,1)))+"%')";
		Для Инд=2 По СтрКоличествоСтрок(Стр) Цикл
			лСтрока=СтрПолучитьСтроку(Стр,Инд);
			Если СокрЛП(лСтрока)<>"" Тогда
				Условие=Условие+"and("+ИмяПоля+" like '%"+СокрЛП(ВРЕГ(лСтрока))+"%')";
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	Возврат Сам().ПолучитьЗаписиИзТаблицыПоПолю("goods",,,Условие,"name",КоличествоЗаписей);
КонецФункции


Функция ПолучитьИмяТаблицы(ВидОбъекта,Описатель="") Экспорт
	НомерСтроки=СтруктураБазы.НайтиСтроку("ИмяОбъекта",ВидОбъекта,,1);
	Если НомерСтроки=0 Тогда
		Сообщить("ВидОбъекта="+ВидОбъекта);
		//#curmeth
		//#error Не найдено описание типа.
	КонецЕсли;
	Сам=Сам();

	Описатель=СтруктураБазы.Описатель;
	ИмяТаблицы=СтруктураБазы.ИмяТаблицы;
	Возврат ИмяТаблицы;
КонецФункции

//возвращает имя таблицы, в которой находится группировка объектов
//в ПолеСвязи - помещается имя поля связанной таблицы
Функция ПолучитьИмяТаблицыГрупп(ВидОбъекта,ПолеСвязи="") Экспорт

	Сам=Сам();

	НомерСтроки=СтруктураБазы.НайтиСтроку("ИмяОбъекта",ВидОбъекта,,1);
	Если НомерСтроки=0 Тогда
		глДебаг("ПолучитьИмяТаблицыГрупп(): ВидОбъекта="+ВидОбъекта);
		//#curmeth
		//#error Не найдено описание типа.
		Возврат "";
	КонецЕсли;

	Описатель=СтруктураБазы.Описатель; //получили описатель таблицы

	лОбъект=СоздатьОбъект(ВидОбъекта);
	ГруппировочноеПоле=лОбъект.ГруппировочноеПоле();

	ОписательПоляСвязи="";
	Если Описатель.Свойство(ГруппировочноеПоле,ОписательПоляСвязи)=1 Тогда
		ПолеСвязи=ОписательПоляСвязи.Поле;
		Возврат ОписательПоляСвязи.Таблица;
	КонецЕсли;
	
	//У объекта нет группировочного поля
	Возврат "";
КонецФункции

Функция ПолучитьОбъекты(ВидОбъекта,КоличествоЗаписей=0) Экспорт
	Сам=Сам();
	ИмяТаблицы=Сам.ПолучитьИмяТаблицы(ВидОбъекта);
	Возврат Сам.ПолучитьЗаписиИзТаблицыПоПолю(ИмяТаблицы,,,,,КоличествоЗаписей);
КонецФункции


Функция ПолучитьОбъектыПоФильтру(ВидОбъекта,СтрокаФильтра,ИмяПоля,КоличествоЗаписей=0) Экспорт

	Сам=Сам();
	ИмяТаблицы=Сам.ПолучитьИмяТаблицы(ВидОбъекта);

	Стр=СтрЗаменить(СтрокаФильтра," ",РазделительСтрок);

	Если ИмяПоля="price" Тогда

		СтрокаЦены=СокрЛП(СтрЗаменить(СтрЗаменить(СтрПолучитьСтроку(Стр,1),",",".")," ",""));
		СтрокаДиапазона=СтрЗаменить(СтрокаЦены,"-",РазделительСтрок);
		Попытка
			Если СтрКоличествоСтрок(СтрокаДиапазона)=2 Тогда
				НачЦена=Число(СтрПолучитьСтроку(СтрокаДиапазона,1));
				КонЦена=Число(СтрПолучитьСтроку(СтрокаДиапазона,2));
				Если НачЦена<КонЦена Тогда
					Условие="((price>="+НачЦена+")and(price<="+КонЦена+"))";
				ИначеЕсли НачЦена>КонЦена Тогда
					Условие="((price>="+КонЦена+")and(price<="+НачЦена+"))";
				Иначе
					Условие="(price="+НачЦена+")";
				КонецЕсли;

			Иначе
				Цена=Число(СтрокаЦены);
				Условие="(price="+Цена+")";
			КонецЕсли;

		Исключение
			Условие="";
		КонецПопытки;



		Для Инд=2 По СтрКоличествоСтрок(Стр) Цикл
			лСтрока=СтрПолучитьСтроку(Стр,Инд);
			Если СокрЛП(лСтрока)<>"" Тогда
				Условие=?(Условие="","",Условие+" and ")+"(name like '%"+СокрЛП(ВРЕГ(лСтрока))+"%')";
			КонецЕсли;
		КонецЦикла;


	Иначе

		Условие="("+ИмяПоля+" like '%"+СокрЛП(ВРЕГ(СтрПолучитьСтроку(Стр,1)))+"%')";
		Для Инд=2 По СтрКоличествоСтрок(Стр) Цикл
			лСтрока=СтрПолучитьСтроку(Стр,Инд);
			Если СокрЛП(лСтрока)<>"" Тогда
				Условие=Условие+"and("+ИмяПоля+" like '%"+СокрЛП(ВРЕГ(лСтрока))+"%')";
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	Возврат Сам().ПолучитьЗаписиИзТаблицыПоПолю(ИмяТаблицы,,,Условие,"name",КоличествоЗаписей);
КонецФункции

///////////////////
Функция ПолучитьККМПоИмени(Имя) Экспорт
	Возврат Сам().ПолучитьЗаписиИзТаблицыПоПолю("devices","type","FR","name like '%"+СокрЛП(ВРЕГ(Имя))+"%'","name");
КонецФункции	// ПолучитьККМПоИмени


Функция ТекстЗапроса_ОчиститьТаблицу(ИмяТаблицы) Экспорт
	возврат  "Delete from "+ИмяТаблицы;
КонецФункции

Функция ТекстЗапроса_ПолучитьЗаписиИзТаблицыПоПолю(ИмяТаблицы,СписокПолей="*",ИмяПоля="",ЗначениеПоля="",ДопУсловие="",СтрокаСортировки="",КоличествоЗаписей=0) Экспорт
	КоличествоУсловий=0;
	Если ПустоеЗначение(ИмяПоля)=0 Тогда
		КоличествоУсловий=КоличествоУсловий+1;
	КонецЕсли;
	Если ПустоеЗначение(ДопУсловие)=0 Тогда
		КоличествоУсловий=КоличествоУсловий+1;
	КонецЕсли;
	Если СписокПолей="" Тогда
		СписокПолей="*";
	КонецЕсли;

	Если КоличествоЗаписей=0 Тогда
		ТекстЗапроса="Select "+СписокПолей+" from "+ИмяТаблицы;
	Иначе
		ТекстЗапроса="Select top "+КоличествоЗаписей+" "+СписокПолей+" from "+ИмяТаблицы;
	КонецЕсли;


	Если ПустоеЗначение(ИмяПоля)=1 Тогда
		Если ПустоеЗначение(ДопУсловие)=0 Тогда
			ТекстЗапроса=ТекстЗапроса+" where "+ДопУсловие+" ";
		Иначе
			//нет ни одного условия
			//отбор без фильтров
		КонецЕсли;
	Иначе

		ФильтрПоПолю=""+ИмяПоля+"="+?(ТипЗначенияСтр(ЗначениеПоля)="Число",Строка(ЗначениеПоля),"'"+ЗначениеПоля+"'");
		Если ПустоеЗначение(ДопУсловие)=0 Тогда
			//2 условия
			ТекстЗапроса=ТекстЗапроса+" where ("+ФильтрПоПолю+") and ("+ДопУсловие+")";
		Иначе
			//просто отбор по одному полю
			ТекстЗапроса=ТекстЗапроса+" where "+ФильтрПоПолю;
		КонецЕсли;
	КонецЕсли;

	//Условие сортировки
	Если ПустоеЗначение(СтрокаСортировки)=0 Тогда
		ТекстЗапроса=ТекстЗапроса+" order by "+СтрокаСортировки;
	ИначеЕсли КоличествоЗаписей<>0 Тогда
		ТекстЗапроса=ТекстЗапроса+" order by ID";
	КонецЕсли;  //
	Возврат СокрЛП(ТекстЗапроса);
КонецФункции



Функция ПрочитатьОбъекты(ТипОбъекта,УсловиеОтбора="",СтрокаСортировки="") Экспорт

	Список=СоздатьОбъект("ТаблицаЗначений");
	Список.НоваяКолонка("Объект");

	НомерСтроки=СтруктураБазы.НайтиСтроку("ИмяОбъекта",ТипОбъекта,,1);
	Если НомерСтроки=0 Тогда
		глДебаг("ТипОбъекта="+ТипОбъекта);
		//#curmeth
		//#error Не найдено описание типа.
	КонецЕсли;

	ТЗ=Сам().ПолучитьЗаписиИзТаблицыПоПолю(СтруктураБазы.ИмяТаблицы,,,УсловиеОтбора,СтрокаСортировки);

	ТЗ.ВыбратьСтроки();
	Пока ТЗ.ПолучитьСтроку() = 1 Цикл
		Объект=0;
		//Попытка
			Объект=СоздатьОбъект(ТипОбъекта);
			Сам().ЗаполнитьОбъект(Объект.Данные,ТЗ,ТЗ.НомерСтроки);
			Объект.ИД=Объект.Данные.ИД;

		//Исключение
		//	//#curmeth
		//	//#error Ошибка создания объекта при чтении из базы
		//	сообщить("ТипОбъекта="+ТипОбъекта);
		//КонецПопытки;
		Список.НоваяСтрока();
		Список.Объект=Объект;
	КонецЦикла;
	Возврат Список;
КонецФункции


Функция ПолучитьСтруктуруТаблицы(ИмяТаблицыБД) Экспорт
	НомерСтроки=СтруктураБазы.НайтиСтроку("ИмяТаблицы",ИмяТаблицыБД,,1);
	Если НомерСтроки>0 Тогда
		Описатель=СтруктураБазы.Описатель;
		возврат Описатель;	
	КонецЕсли;	
	возврат 0;	
КонецФункции

Функция ПолучитьСтруктуруОбъекта(ИмяОбъектаБД) Экспорт
	НомерСтроки=СтруктураБазы.НайтиСтроку("ИмяОбъекта",ИмяОбъектаБД,,1);
	Если НомерСтроки>0 Тогда
		Описатель=СтруктураБазы.Описатель;
		возврат Описатель;	
	КонецЕсли;	
	возврат 0;	
КонецФункции

Функция ПрочитатьОбъект(Данные,ИД) Экспорт

	ИмяОбъекта=Данные._Вид;
	
	Сам=Сам();

	Список=СоздатьОбъект("ТаблицаЗначений");
	Список.НоваяКолонка("Объект");

	НомерСтроки=СтруктураБазы.НайтиСтроку("ИмяОбъекта",ИмяОбъекта,,1);
	Если НомерСтроки=0 Тогда
		Сообщить("ИмяОбъекта="+ИмяОбъекта);
		//#curmeth
		//#error Не найдено описание типа.
	КонецЕсли;

	ТЗ=Сам.ПолучитьЗаписиИзТаблицыПоПолю(СтруктураБазы.ИмяТаблицы,"ID",ИД,,"ID",1);


	ТЗ.ВыбратьСтроки();
	Пока ТЗ.ПолучитьСтроку() = 1 Цикл
		Сам.ЗаполнитьОбъект(Данные,ТЗ);


		Таблицы=СтруктураБазы.Таблицы;
		Для НомерТаблицы=1 По Таблицы.Количество() Цикл
			ОписательТаблицы=Таблицы.Получить(НомерТаблицы);

			ИмяТаблицы=ОписательТаблицы.Имя;
			ИмяТаблицыБД=ОписательТаблицы.ИмяТаблицыБД;
			
			Описатель=ПолучитьСтруктуруТаблицы(ИмяТаблицыБД);
			
			Если ПустоеЗначение(Описатель)=0 Тогда

				ТЧ=0;
				Если Данные.Свойство(ИмяТаблицы,ТЧ)=0 Тогда
					//#error Неверный тип объекта. Не обнаружена табличная часть объекта
				КонецЕсли;
				
				ПолеСортировки="";
				
				Для Инд=1 По Описатель.Количество() Цикл
					ОписательПоля=Описатель.Получить(Инд);
					Если ОписательПоля.Сортировка=1 Тогда
						ПолеСортировки=ОписательПоля.Имя;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				

				ТЗСтрокиТаблицы=Сам.ПолучитьЗаписиИзТаблицыПоПолю(ИмяТаблицыБД,"IDPARENT",ИД,,ПолеСортировки);


				ТЗСтрокиТаблицы.ВыбратьСтроки();
				Пока ТЗСтрокиТаблицы.ПолучитьСтроку()=1 Цикл
					ТЧ.НоваяСтрока();

					Для Инд=1 По Описатель.Количество() Цикл
						ОписательПоля=Описатель.Получить(Инд);

						Значение=ТЗСтрокиТаблицы.ПолучитьЗначение(ТЗСтрокиТаблицы.НомерСтроки,ОписательПоля.Имя);
						ТЧ.УстановитьЗначение(ТЧ.НомерСтроки,ОписательПоля.ИмяПоля,Значение);
					КонецЦикла;
				КонецЦикла;

			КонецЕсли;
		КонецЦикла;
		Возврат 1;
	КонецЦикла;
	Возврат 0;
КонецФункции


Функция ПрочитатьСписокККМ(УсловиеОтбора="") Экспорт
	ТЗ=ПрочитатьОбъекты("Устройство.ККМ",УсловиеОтбора);
	Возврат ТЗ;
КонецФункции

Функция ПрочитатьСписокУстройствВвода() Экспорт
	ТЗ=ПрочитатьОбъекты("Устройство.Считыватель",,"LDNumber");
	Возврат ТЗ;
КонецФункции



Функция ПрочитатьСписокДП() Экспорт
	ТЗ=ПрочитатьОбъекты("Устройство.ДисплейПокупателя",,"LDNumber");
	Возврат ТЗ;
КонецФункции




Функция ПолучитьТоварыЧекаПоИД(ИД) Экспорт
	ТЗ=Сам().ПолучитьЗаписиИзТаблицыПоПолю("checkt","IDPARENT",ИД,,"NumStr");
	Возврат ТЗ;
КонецФункции	//

Функция ПолучитьОплатыЧекаПоИД(ИД) Экспорт
	ТЗ=Сам().ПолучитьЗаписиИзТаблицыПоПолю("pays","IDPARENT",ИД,,"NumStr");
	Возврат ТЗ;
КонецФункции	//

Функция ПолучитьТоварыЧека(ККМ,Смена,НомерЧека) Экспорт
	Перем СерийныйНомер;
	Если ТипЗначенияСтр(ККМ)="Число" Тогда
		СерийныйНомер=ККМ;
	ИначеЕсли ТипЗначенияСтр(ККМ)="Строка" Тогда
		СерийныйНомер=Число(ККМ);
	ИначеЕсли ТипЗначенияСтр(ККМ)="Структура" Тогда
		СерийныйНомер=Число(ККМ.СерийныйНомер)
	Иначе
		СерийныйНомер=Число(ККМ.Данные.СерийныйНомер)
	КонецЕсли;


	ТЗ=Сам().ПолучитьЗаписиИзТаблицыПоПолю("checkh,checkt","Z",Смена,"(checkh.SN="+СерийныйНомер+") and (checkt.NumDoc="+НомерЧека+") and (checkt.ID=checkh.ID)","NumStr");
	Возврат ТЗ;
КонецФункции	//


Функция КодОперацииЧека(Операция) Экспорт
	Стр=СокрЛП(ВРЕГ(Операция));
	Если Стр="ПРОДАЖА" Тогда
		возврат 0;
	ИначеЕсли Стр="ВОЗВРАТ" Тогда
		возврат 1;
	КонецЕсли;
КонецФункции	// КодОперацииЧека



Функция ПолучитьДисконтПоИД(пКодКарты) Экспорт
	ТЗ=Сам().ПолучитьЗаписиИзТаблицыПоПолю("cards","id",ВРЕГ(пКодКарты),,"id",1);


	Если ТЗ.КоличествоСтрок()>0 Тогда
		ДисконтнаяКарта=Сам().Новый("ИДКарта");
		Сам().ЗаполнитьОбъект(ДисконтнаяКарта,ТЗ);
		Возврат ДисконтнаяКарта;
	КонецЕсли;
	Возврат 0;
КонецФункции


Функция ПолучитьФирмуПоКоду(КодФирмы) Экспорт
	ТЗ=Сам().ПолучитьЗаписиИзТаблицыПоПолю("firms","id",ВРЕГ(КодФирмы),,"id",1);
	Если ТЗ.КоличествоСтрок()>0 Тогда
		Фирма=Сам().Новый("Фирма");
		Сам().ЗаполнитьОбъект(Фирма,ТЗ);
		Возврат Фирма;
	КонецЕсли;
	Возврат 0;
КонецФункции

Функция ПолучитьВидОплатыПоКоду(Код) Экспорт
	ТЗ=Сам().ПолучитьЗаписиИзТаблицыПоПолю("paytypes","id",ВРЕГ(Код),,"id",1);
	Если ТЗ.КоличествоСтрок()>0 Тогда
		ВидОплаты=Сам().Новый("ВидОплаты");
		Сам().ЗаполнитьОбъект(ВидОплаты,ТЗ);
		Возврат ВидОплаты;
	КонецЕсли;  //
	Возврат 0;
КонецФункции	// ПолучитьВидОплатыПоКоду




//ККМ выбран - объект типа ККМ - отобрать только по выбранной ККМ
Функция ПолучитьСмены(НачДата,КонДата,ККМ="",Статус=1) Экспорт



	НачДатаСтр=Сам().СтрокаДата(НачДата);
	КонДатаСтр=Сам().СтрокаДата(КонДата);


	лСтатус=0;
	Если Статус=1 Тогда
		лСтатус=1;
	ИначеЕсли Статус=2 Тогда
		лСтатус=0;
	ИначеЕсли Статус=3 Тогда
		лСтатус=2;
	КонецЕсли;

	ДопУсловие="(Operation=1)and"+?(Статус=0,"","(status="+лСтатус+") ")+"and ";
	Если НачДата=КонДата Тогда
		ДопУсловие=ДопУсловие+"(date='"+НачДатаСтр+"')";
	Иначе
		ДопУсловие=ДопУсловие+"(date>='"+НачДатаСтр+"') and (date<='"+КонДатаСтр+"')";
	КонецЕсли;  //

	Если ТипЗначенияСтр(ККМ)="Число" Тогда
		СерийныйНомер=ККМ;
	ИначеЕсли ТипЗначенияСтр(ККМ)="Строка" Тогда
		СерийныйНомер=Число(ККМ);
	ИначеЕсли ТипЗначенияСтр(ККМ)="Структура" Тогда
		СерийныйНомер=Число(ККМ.СерийныйНомер)
	Иначе
		СерийныйНомер=Число(ККМ.Данные.СерийныйНомер)
	КонецЕсли;


	Если ПустоеЗначение(ККМ )=0 Тогда
		ДопУсловие=ДопУсловие+" and (SN="+СерийныйНомер+")";
	КонецЕсли;


	ТЗ=Сам().ПолучитьЗаписиИзТаблицыПоПолю("reporth",,,ДопУсловие,"date,time,NumDoc");
	Возврат ТЗ;

КонецФункции	//



Функция ПолучитьЧекиСТоварамиЗаСмену(Нач,Кон,ККМ,Статус=1) Экспорт


	лСтатус=0;
	Если Статус=1 Тогда
		лСтатус=1;
	ИначеЕсли Статус=2 Тогда
		лСтатус=0;
	ИначеЕсли Статус=3 Тогда
		лСтатус=2;
	КонецЕсли;

	Если ТипЗначенияСтр(ККМ)="Число" Тогда
		СерийныйНомер=ККМ;
	ИначеЕсли ТипЗначенияСтр(ККМ)="Строка" Тогда
		СерийныйНомер=Число(ККМ);
	ИначеЕсли ТипЗначенияСтр(ККМ)="Структура" Тогда
		СерийныйНомер=Число(ККМ.СерийныйНомер)
	Иначе
		СерийныйНомер=Число(ККМ.Данные.СерийныйНомер)
	КонецЕсли;


	ДопУсловие=?(Статус=0,"","(checkh.status="+лСтатус+") and ");

	ТЗ=Сам().ПолучитьЗаписиИзТаблицыПоПолю("checkh,checkt",,,ДопУсловие+"(checkh.Z>="+Нач+") and (checkh.Z<="+Кон+")and(checkh.SN="+СерийныйНомер+") and (checkh.ID=checkt.ID)","checkh.date,checkh.time,checkh.NumDoc,checkt.NumStr");
	Возврат ТЗ;
КонецФункции	//

Функция ПолучитьЧекиЗаСмену(Нач,Кон,ККМ,Статус=1) Экспорт

	лСтатус=0;
	Если Статус=1 Тогда
		лСтатус=1;
	ИначеЕсли Статус=2 Тогда
		лСтатус=0;
	ИначеЕсли Статус=3 Тогда
		лСтатус=2;
	КонецЕсли;

	Если ТипЗначенияСтр(ККМ)="Число" Тогда
		СерийныйНомер=ККМ;
	ИначеЕсли ТипЗначенияСтр(ККМ)="Строка" Тогда
		СерийныйНомер=Число(ККМ);
	ИначеЕсли ТипЗначенияСтр(ККМ)="Структура" Тогда
		СерийныйНомер=Число(ККМ.СерийныйНомер)
	Иначе
		СерийныйНомер=Число(ККМ.Данные.СерийныйНомер)
	КонецЕсли;

	ДопУсловие=?(Статус=0,"","(status="+лСтатус+") and ");

	ДопУсловие=ДопУсловие+"(Z>="+Нач+") and (Z<="+Кон+")and(SN="+СерийныйНомер+")";

	ТЗ=Сам().ПолучитьЗаписиИзТаблицыПоПолю("checkh",,,ДопУсловие,"date,time,NumDoc");
	Возврат ТЗ;

КонецФункции	//

Функция СтрокаДата(Д) Экспорт
	возврат ""+ДатаГод(Д)+Формат(ДатаМесяц(Д),"Ч(0)2.0")+Формат(ДатаЧисло(Д),"Ч(0)2.0");
КонецФункции	// СтрокаДата


//НачДата = Дата начала отбора
//КонДата = Дата конца отбора

Функция ПолучитьЧекиЗаДату(НачДата,КонДата,ККМ,Статус=1) Экспорт
	Перем СерийныйНомер;

	лСтатус=0;
	Если Статус=1 Тогда
		лСтатус=1;
	ИначеЕсли Статус=2 Тогда
		лСтатус=0;
	ИначеЕсли Статус=3 Тогда
		лСтатус=2;
	КонецЕсли;

	ДопУсловие=?(Статус=0,"","(status="+лСтатус+") and ");

	НачДатаСтр=Сам().СтрокаДата(НачДата);
	КонДатаСтр=Сам().СтрокаДата(КонДата);

	Если ПустоеЗначение(ККМ)=0 Тогда


		Если ТипЗначенияСтр(ККМ)="Число" Тогда
			СерийныйНомер=ККМ;
		ИначеЕсли ТипЗначенияСтр(ККМ)="Строка" Тогда
			СерийныйНомер=Число(ККМ);
		ИначеЕсли ТипЗначенияСтр(ККМ)="Структура" Тогда
			СерийныйНомер=Число(ККМ.СерийныйНомер)
		Иначе
			СерийныйНомер=Число(ККМ.Данные.СерийныйНомер)
		КонецЕсли;


		ДопУсловие=ДопУсловие+" (SN="+СерийныйНомер+") and "
	Иначе
		Если ТипЗначенияСтр(ККМ)="Число" Тогда
			ДопУсловие=ДопУсловие+" (SN=0) and "
		КонецЕсли;

	КонецЕсли;



	ТЗ=Сам().ПолучитьЗаписиИзТаблицыПоПолю("checkh",,,ДопУсловие+"(date>='"+НачДатаСтр+"') and (date<='"+КонДатаСтр+"')","date,time,NumDoc");

	Возврат ТЗ;

КонецФункции	//


Функция ПолучитьЧеки(СтруктураОтбора) Экспорт
	Перем СерийныйНомер;

	Сам=Сам();

	ДопУсловие="";
	Если СтруктураОтбора.Проведен.Использовать=1 Тогда
		ДопУсловие="(status"+СтруктураОтбора.Проведен.ТипСравнения+СтруктураОтбора.Проведен.Значение+")";
	КонецЕсли;

	Если СтруктураОтбора.ДатаНачала.Использовать=1 Тогда
		ДатаСтр=Сам.СтрокаДата(СтруктураОтбора.ДатаНачала.Значение);
		ДопУсловие=ДопУсловие+?(ДопУсловие="",""," and ")+"(date"+СтруктураОтбора.ДатаНачала.ТипСравнения+"'"+ДатаСтр+"')";
	КонецЕсли;

	Если СтруктураОтбора.ДатаКонца.Использовать=1 Тогда
		ДатаСтр=Сам.СтрокаДата(СтруктураОтбора.ДатаКонца.Значение);
		ДопУсловие=ДопУсловие+?(ДопУсловие="",""," and ")+"(date"+СтруктураОтбора.ДатаКонца.ТипСравнения+"'"+ДатаСтр+"')";
	КонецЕсли;


	Если СтруктураОтбора.ККМ.Использовать=1 Тогда

		ККМ=СтруктураОтбора.ККМ.Значение;

		Если ПустоеЗначение(ККМ)=0 Тогда
			Если ТипЗначенияСтр(ККМ)="Число" Тогда
				СерийныйНомер=ККМ;
			ИначеЕсли ТипЗначенияСтр(ККМ)="Строка" Тогда
				СерийныйНомер=Число(ККМ);
			ИначеЕсли ТипЗначенияСтр(ККМ)="Структура" Тогда
				СерийныйНомер=Число(ККМ.СерийныйНомер);
			Иначе
				СерийныйНомер=Число(ККМ.Данные.СерийныйНомер);
			КонецЕсли;
			ДопУсловие=ДопУсловие+?(ДопУсловие="",""," and ")+" (SN="+СерийныйНомер+")";
		Иначе
			Если ТипЗначенияСтр(ККМ)="Число" Тогда
				ДопУсловие=ДопУсловие+?(ДопУсловие="",""," and ")+"(SN=0)"
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;


	Если СтруктураОтбора.Продавец.Использовать=1 Тогда

		Продавец=СтруктураОтбора.Продавец.Значение;

		Если ПустоеЗначение(Продавец)=0 Тогда
			Если ТипЗначенияСтр(Продавец)="Строка" Тогда
				Код=Продавец;
			ИначеЕсли ТипЗначенияСтр(ККМ)="Структура" Тогда
				Код=Продавец.ИД;
			Иначе
				Код=Продавец.Данные.ИД;
			КонецЕсли;
			ДопУсловие=ДопУсловие+?(ДопУсловие="",""," and ")+" (SELLERID"+СтруктураОтбора.Продавец.ТипСравнения+"'"+Код+"')";
		КонецЕсли;
	КонецЕсли;


	Если СтруктураОтбора.Кассир.Использовать=1 Тогда

		Кассир=СтруктураОтбора.Кассир.Значение;

		Если ПустоеЗначение(Кассир)=0 Тогда
			Если ТипЗначенияСтр(Кассир)="Строка" Тогда
				Код=Кассир;
			ИначеЕсли ТипЗначенияСтр(ККМ)="Структура" Тогда
				Код=Кассир.ИД;
			Иначе
				Код=Кассир.Данные.ИД;
			КонецЕсли;
			ДопУсловие=ДопУсловие+?(ДопУсловие="",""," and ")+" (USERID"+СтруктураОтбора.Кассир.ТипСравнения+"'"+Код+"')";
		КонецЕсли;
	КонецЕсли;

	Если СтруктураОтбора.Сумма.Использовать=1 Тогда

		Сумма=СтруктураОтбора.Сумма.Значение;

		ДопУсловие=ДопУсловие+?(ДопУсловие="",""," and ")+" (Total"+СтруктураОтбора.Сумма.ТипСравнения+Строка(Сумма)+")";

	КонецЕсли;


	ТЗ=Сам().ПолучитьЗаписиИзТаблицыПоПолю("checkh",,,ДопУсловие,"date,time,NumDoc");

	Возврат ТЗ;

КонецФункции	//



Функция АвторизацияПоКарте(пКодКарты,пПользователь) Экспорт
	ТЗ=Сам().ПолучитьЗаписиИзТаблицыПоПолю("users","idcard",пКодКарты,,);

	Если ТЗ.КоличествоСтрок()>0 Тогда
		ТЗ.ПолучитьСтрокуПоНомеру(1);
		пПользователь=Сам().Новый("Пользователь");
		Сам().ЗаполнитьОбъект(пПользователь,ТЗ,1);
		Возврат 1;
	КонецЕсли;
	Возврат 0;
КонецФункции	//

//абстрактная функция
//надо переопределять в потомках
//должна проверить структуру существующей таблицы базы данных с описанием структуры таблицы
//по описанию таблицы создает таблицу базы данных в случае отсутствия
//в случае существования таблицы проверяет структуру таблицы и добавлет необходимые поля
//должно срабатывать при дальнейшем обновлении базы данных и автоматической реструктуризации

Функция ПроверитьТаблицу(ИмяТаблицы,ОписательТаблицы) Экспорт

	Возврат 1;
КонецФункции

//делаем систему проверки структуры базы данных
//при необходимости добавляем необходимые поля
//удаление полей не производим
//изменение типа полей не производим

Функция ПроверитьБазу()  Экспорт

	Сам=Сам();
	СтруктураБазы.ВыбратьСтроки();

	НетОшибок=1;
	Пока СтруктураБазы.ПолучитьСтроку()=1 Цикл
		Если Сам.ПроверитьТаблицу(СтруктураБазы.ИмяТаблицы,СтруктураБазы.Описатель)=0 Тогда

			НетОшибок=0;
		Иначе
			//целостность проверена
			//проверим  логику. Некоторые таблицы должны быть обязательно заполнены предопределенными записями
		КонецЕсли;
	КонецЦикла;

	Возврат НетОшибок;

КонецФункции

//Заполняет структуру Объект из таблицы значений ТЗ
//ТЗ - запись из БД
//Объект - подготовленная структура, соответствующая записи из таблицы
//предполагается, что структура Объект соответствует ТЗ

Процедура ЗаполнитьОбъект(Объект,ТЗ,НомерСтрокиТЗ=1) Экспорт

	Если ТЗ.КоличествоСтрок()=0 Тогда
		//#curmeth
		//#error Нет данных в ТЗ для заполнения объекта
	КонецЕсли;

	Попытка
		ВидОбъекта=Объект._Вид;
	Исключение

		//#error Неправильный вызов ЗаполнитьОбъект
	КонецПопытки;


	НомерСтроки=СтруктураБазы.НайтиСтроку("ИмяОбъекта",ВидОбъекта,,1);
	Если НомерСтроки=0 Тогда
		Сообщить("ВидОбъекта="+ВидОбъекта);
		//#curmeth
		//#error Не найдено описание типа.
	ИначеЕсли  НомерСтрокиТЗ>ТЗ.КоличествоСтрок() Тогда
		//#curmeth
		//#error Индекс вышел за пределы таблицы.
	КонецЕсли;

	Описатель=СтруктураБазы.Описатель;

	Для Инд=1 По Описатель.Количество() Цикл
		ОписательПоля=Описатель.Получить(Инд);

		ЗначениеПоля=ТЗ.ПолучитьЗначение(НомерСтрокиТЗ,ОписательПоля.Имя);

		Если ОписательПоля.СериализуемыйТип<>"" Тогда
			//
			//Поле=СоздатьОбъект(ОписательПоля.СериализуемыйТип);



			ХранимыйОбъект=СоздатьОбъект(ОписательПоля.СериализуемыйТип);
			ХранимыйОбъект.ЗагрузитьИзСтроки (СокрЛП(ЗначениеПоля));
			Если ХранимыйОбъект.КодОшибки()<>0 Тогда
				Сообщить(ХранимыйОбъект.ПоследняяОшибка());
			КонецЕсли;

			Данные=ХранимыйОбъект;

			Объект.Вставить(ОписательПоля.ИмяПоля,Данные);
		ИначеЕсли ОписательПоля.Тип="C" Тогда
			ЗначениеПоля=СокрП(ЗначениеПоля);
			Объект.Вставить(ОписательПоля.ИмяПоля,ЗначениеПоля);
		ИначеЕсли ОписательПоля.Тип="N" Тогда
			ЗначениеПоля=Число(СокрП(ЗначениеПоля));
			Объект.Вставить(ОписательПоля.ИмяПоля,ЗначениеПоля);
		КонецЕсли;

	КонецЦикла;
	Объект.ЭтоНовый=0;
КонецПроцедуры

Функция ТекстЗапроса_ДобавитьОбъект(Данные) Экспорт

	Перем ТекстЗапроса,ТекстЗначений,ОписательПоля,ИмяТаблицы,ВидОбъекта,НомерСтроки,Инд;

	ВидОбъекта=Данные._Вид;
	НомерСтроки=СтруктураБазы.НайтиСтроку("ИмяОбъекта",ВидОбъекта,,1);
	Если НомерСтроки=0 Тогда
		Сообщить("ВидОбъекта="+ВидОбъекта);
		//#curmeth
		//#error Не найдено описание типа.
	КонецЕсли;
	Сам=Сам();

	Описатель=СтруктураБазы.Описатель;
	ИмяТаблицы=СтруктураБазы.ИмяТаблицы;


	ТекстЗапроса="Insert into "+НРег(ИмяТаблицы)+" (";

	ТекстЗначений="values (";

	Для Инд=1 По Описатель.Количество() Цикл
		ОписательПоля=Описатель.Получить(Инд);
		ТекстЗапроса=ТекстЗапроса+ОписательПоля.Имя;
		Если Инд<Описатель.Количество() Тогда
			ТекстЗапроса=ТекстЗапроса+","
		Иначе
			ТекстЗапроса=ТекстЗапроса+")"
		КонецЕсли;


		ЗначениеПоля="";
		Если Данные.Свойство(ОписательПоля.ИмяПоля,ЗначениеПоля)=0 Тогда
			//#curmeth
			Сообщить("Имя поля= "+ОписательПоля.ИмяПоля);
			//#error Нет поля с заданным именем.
		КонецЕсли;
		Если ТипЗначенияСтр(ЗначениеПоля)="Дата" Тогда
			ЗначениеПоля=Сам.СтрокаДата(ЗначениеПоля);
		КонецЕсли;

		Если ОписательПоля.СериализуемыйТип<>"" Тогда
			ТекстЗначений=ТекстЗначений+"'"+Сам.ОбработатьСтрокуДляSQL(ЗначениеПоля.ВСтроку())+"'";
		ИначеЕсли ОписательПоля.Тип="N" Тогда
			ТекстЗначений=ТекстЗначений+СокрЛП(Формат(ЗначениеПоля,"Ч"+ОписательПоля.Длина+"."+ОписательПоля.Точность));
		ИначеЕсли ОписательПоля.Тип="C" Тогда
			ТекстЗначений=ТекстЗначений+"'"+Сам.ОбработатьСтрокуДляSQL(ЗначениеПоля)+"'";
		Иначе
			//#curmeth
			//#error Неизвестный тип поля Ошибка при генерации запроса записи
		КонецЕсли;

		Если Инд<Описатель.Количество() Тогда
			ТекстЗначений=ТекстЗначений+",
			|";
		Иначе
			ТекстЗначений=ТекстЗначений+");"
		КонецЕсли;

	КонецЦикла;

	ТекстЗапроса=ТекстЗапроса+ТекстЗначений;
	возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапроса_УдалитьОбъект(Данные) Экспорт
	Перем ТекстЗапроса,ТекстЗначений,ОписательПоля,ИмяТаблицы,ВидОбъекта,НомерСтроки,Инд;

	ВидОбъекта=Данные._Вид;
	НомерСтроки=СтруктураБазы.НайтиСтроку("ИмяОбъекта",ВидОбъекта,,1);
	Если НомерСтроки=0 Тогда
		Сообщить("ВидОбъекта="+ВидОбъекта);
		//#curmeth
		//#error Не найдено описание типа.
	КонецЕсли;

	Описатель=СтруктураБазы.Описатель;
	ИмяТаблицы=СтруктураБазы.ИмяТаблицы;


	ТекстЗапроса="DELETE FROM "+НРег(ИмяТаблицы)+"
	|WHERE "+НРег(ИмяТаблицы)+".id='"+Данные.ИД+"';";

	возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапроса_ОбновитьОбъект(Данные,Условие="") Экспорт

	Перем ТекстЗапроса,ТекстЗначений,ОписательПоля,ИмяТаблицы,ВидОбъекта,НомерСтроки,Инд;

	ВидОбъекта=Данные._Вид;
	НомерСтроки=СтруктураБазы.НайтиСтроку("ИмяОбъекта",ВидОбъекта,,1);
	Если НомерСтроки=0 Тогда
		Сообщить("ВидОбъекта="+ВидОбъекта);
		//#curmeth
		//#error Не найдено описание типа.
	КонецЕсли;

	Описатель=СтруктураБазы.Описатель;
	ИмяТаблицы=СтруктураБазы.ИмяТаблицы;

	Сам=Сам();

	ТекстЗапроса="UPDATE "+НРег(ИмяТаблицы)+"
	|SET
	|";

	ТекстЗначений="";

	Для Инд=1 По Описатель.Количество() Цикл
		ОписательПоля=Описатель.Получить(Инд);

		Если Данные.НовыйИД<>"" Тогда
			//Это для того, чтобы можно было апдэйтить идентификатор
			Если ОписательПоля.Имя="ID" Тогда
				ТекстЗначений=ТекстЗначений+"
				|ID='"+СокрЛП(Данные.НовыйИД)+"',
				|";
				Продолжить;
			КонецЕсли;

		КонецЕсли;


		ТекстЗначений=ТекстЗначений+ОписательПоля.Имя+"=";
		ЗначениеПоля="";
		Если Данные.Свойство(ОписательПоля.ИмяПоля,ЗначениеПоля)=0 Тогда
			//#curmeth
			Сообщить("Имя поля= "+ОписательПоля.ИмяПоля);
			//#error Нет поля с заданным именем.
		КонецЕсли;
		Если ТипЗначенияСтр(ЗначениеПоля)="Дата" Тогда
			ЗначениеПоля=Сам.СтрокаДата(ЗначениеПоля);
		КонецЕсли;

		Если ОписательПоля.СериализуемыйТип<>"" Тогда

			СтрокаЗаписи="";
			Если ПустоеЗначение(ЗначениеПоля)=0 Тогда
				//значит внутри должен быть класс
				Попытка
					СтрокаЗаписи=ЗначениеПоля.ВСтроку();
				Исключение
					СтрокаЗаписи=Строка(ЗначениеПоля);
				КонецПопытки;

			КонецЕсли;
			ТекстЗначений=ТекстЗначений+"'"+Сам.ОбработатьСтрокуДляSQL(СтрокаЗаписи)+"'";

		ИначеЕсли ОписательПоля.Тип="N" Тогда
			ТекстЗначений=ТекстЗначений+СокрЛП(Формат(ЗначениеПоля,"Ч"+ОписательПоля.Длина+"."+ОписательПоля.Точность));
		ИначеЕсли ОписательПоля.Тип="C" Тогда
			ТекстЗначений=ТекстЗначений+"'"+Сам.ОбработатьСтрокуДляSQL(ЗначениеПоля)+"'";
		Иначе

			//#curmeth
			//#error Неизвестный тип поля. Ошибка при генерации запроса записи
		КонецЕсли;

		Если Инд<Описатель.Количество() Тогда
			ТекстЗначений=ТекстЗначений+",
			|";
		КонецЕсли;
	КонецЦикла;


	Если Условие="" Тогда
		ТекстЗапроса=ТекстЗапроса+ТекстЗначений+"
		|WHERE "+НРег(ИмяТаблицы)+".id='"+Данные.ИД+"';";
	Иначе
		ТекстЗапроса=ТекстЗапроса+ТекстЗначений+"
		|WHERE "+Условие+";";

	КонецЕсли;

	возврат ТекстЗапроса;
КонецФункции



//Должен выполнить запрос через менеджер запросов
Функция ВыполнитьЗапрос(Запрос) Экспорт
	
	Возврат 0;
КонецФункции

Функция ЗаписатьОбъект(Объект)  Экспорт
Перем Данные;
	Попытка
		ВидОбъекта=Объект.Вид();
		Данные=Объект.Данные;
	Исключение
		Попытка
			ВидОбъекта=Объект._Вид;
			Данные=Объект;
		Исключение
		КонецПопытки;

	КонецПопытки;

	Сам=Сам();

	Если Данные.ЭтоНовый=1 Тогда
		ТекстЗапроса=Сам.ТекстЗапроса_ДобавитьОбъект(Данные);
	Иначе
		ТекстЗапроса=Сам.ТекстЗапроса_ОбновитьОбъект(Данные);
	КонецЕсли;

	Описатель=Сам.ПолучитьСтруктуруОбъекта(ВидОбъекта);
	
	Если ПустоеЗначение(Описатель)=1 Тогда
			//#error Неверный тип объекта. Описатель=Сам.ПолучитьСтруктуруОбъекта(ВидОбъекта);
		Возврат 0;
	КонецЕсли;
	Попытка
		Сам.ВыполнитьЗапрос(ТекстЗапроса);

		Если Данные.ЭтоНовый=0 Тогда
		    //обновляем табличные части
			//сначала делаем запрос по существующей табличной части
			//затем сравниваем надо ли обновлять строки

			//по измененным строкам делаем Update
			//по новым строкам делаем Insert

			Если Сам.СтруктураБазы.Таблицы.Количество()>0 Тогда

				//ищем описатель текущего объекта
				
				ИмяТаблицы=Сам.СтруктураБазы.ИмяТаблицы;
				//пишем вместе со всеми табличными частями в одном мегазапросе
				Таблицы=Сам.СтруктураБазы.Таблицы;
				
			
				//пробегаем по описателям табличных частей
				Для НомерТаблицы=1 По Таблицы.Количество() Цикл
					//получим описатель текущей табличной части
					ОписательТаблицы=Таблицы.Получить(НомерТаблицы);

					ИмяТаблицы=ОписательТаблицы.Имя;
					ИмяТаблицыБД=ОписательТаблицы.ИмяТаблицыБД;
					ИмяОбъектаСтрокиТЧ=ОписательТаблицы.ИмяОбъекта;
					//теперь найдем описатель таблицы БД для ТЧ
					
					ОписательСтрокиТЧ=ПолучитьСтруктуруТаблицы(ИмяТаблицыБД);

					Если ПустоеЗначение(ОписательСтрокиТЧ)=0 Тогда
						//получим описатель строки табличной части
						
						
						//возьмем табличную часть объекта (данные)
						ТЧ=0;
						Если Данные.Свойство(ИмяТаблицы,ТЧ)=0 Тогда
							//#error Неверный тип объекта. Не обнаружена табличная часть объекта
						КонецЕсли;


						//ТЧ - таблица с данными табличной части объекта

						//узнаем сколько записей уже есть

						ИДОбъекта=Данные.ИД;
						
						КлючевоеПолеТаблицы="";
						КлючевоеПолеТаблицыТЗ="";
						ПолеСортировки="";
						ПолеСортировкиТЗ="";
						ПолеАвтонумерации="";
						ПолеАвтонумерацииТЗ="";
						
						Для Инд=1 По ОписательСтрокиТЧ.Количество() Цикл
							ОписательПоля=ОписательСтрокиТЧ.Получить(Инд);
							Если ОписательПоля.Сортировка=1 Тогда
								ПолеСортировки=ОписательПоля.Имя;
								ПолеСортировкиТЗ=ОписательПоля.ИмяПоля;
							КонецЕсли;
							Если ОписательПоля.ЭтоКлючевоеПоле=1 Тогда
								КлючевоеПолеТаблицы=ОписательПоля.Имя;
								КлючевоеПолеТаблицыТЗ=ОписательПоля.ИмяПоля;
							КонецЕсли;
							
							Если ОписательПоля.Автонумерация=1 Тогда
								ПолеАвтонумерации=ОписательПоля.Имя;
								ПолеАвтонумерацииТЗ=ОписательПоля.ИмяПоля;
							КонецЕсли;
							
						КонецЦикла;
						
						
						
						СтараяТЧ=Сам.ПолучитьЗаписиИзТаблицыПоПолю(ИмяТаблицыБД,"IDPARENT",ИДОбъекта,,ПолеСортировки);

						МинКоличествоСтрок=Мин(СтараяТЧ.КоличествоСтрок(),ТЧ.КоличествоСтрок());
						
						Если ПолеСортировки<>"" Тогда
							Если ПолеСортировки<>ПолеАвтонумерации Тогда
								ТЧ.Сортировать(ПолеСортировкиТЗ);
							КонецЕсли;	
							Если ТЧ.КоличествоСтрок()>0 Тогда
								ТЧ.Заполнить(ИДОбъекта,,,"Родитель");
								Если ПолеАвтонумерации<>"" Тогда
									ТЧ.ВыбратьСтроки();
									Пока ТЧ.ПолучитьСтроку()=1 Цикл
										ТЧ.УстановитьЗначение(ТЧ.НомерСтроки,ПолеАвтонумерацииТЗ,ТЧ.НомерСтроки);
									КонецЦикла;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						
						


						СтарыеДанныеСтроки=Сам.Новый(ИмяОбъектаСтрокиТЧ);
						НовыеДанныеСтроки=Сам.Новый(ИмяОбъектаСтрокиТЧ);

						Для НомСтроки=1 По МинКоличествоСтрок Цикл
						    СтараяТЧ.ПолучитьСтрокуПоНомеру(НомСтроки);
	
							ЗначениеКлючаТабличнойЧасти=СтараяТЧ.ПолучитьЗначение(НомСтроки,КлючевоеПолеТаблицы);
							Если ТипЗначенияСтр(ЗначениеКлючаТабличнойЧасти)="Строка" Тогда
								ЗначениеКлючаТабличнойЧасти="'"+ЗначениеКлючаТабличнойЧасти+"'";
							КонецЕсли;
							
							
							Для НомерПоля=1 По ОписательСтрокиТЧ.Количество() Цикл
								ИмяСвойства="";
								ОписательПоля=ОписательСтрокиТЧ.Получить(НомерПоля,ИмяСвойства);
								Значение=СтараяТЧ.ПолучитьЗначение(СтараяТЧ.НомерСтроки,ОписательПоля.Имя);
								СтарыеДанныеСтроки.Вставить(ОписательПоля.ИмяПоля,Значение);
							КонецЦикла;


							ТЧ.ПолучитьСтрокуПоНомеру(НомСтроки);

							Для НомерПоля=1 По ОписательСтрокиТЧ.Количество() Цикл
								ИмяСвойства="";
								ОписательПоля=ОписательСтрокиТЧ.Получить(НомерПоля,ИмяСвойства);

								Значение=ТЧ.ПолучитьЗначение(ТЧ.НомерСтроки,ОписательПоля.ИмяПоля);
								НовыеДанныеСтроки.Вставить(ОписательПоля.ИмяПоля,Значение);
							КонецЦикла;

							//сравниваем
							Если Сам.СравнитьДанные(НовыеДанныеСтроки,СтарыеДанныеСтроки)=1 Тогда
								Продолжить;
							Иначе
							//обновляем
								Если КлючевоеПолеТаблицы<>"" Тогда
									Условие="("+ИмяТаблицыБД+".idparent='"+ИДОбъекта+"')and("+ИмяТаблицыБД+"."+КлючевоеПолеТаблицы+"="+ЗначениеКлючаТабличнойЧасти+")";
								КонецЕсли;
								

								ТекстЗапроса=Сам.ТекстЗапроса_ОбновитьОбъект(НовыеДанныеСтроки,Условие);
								Сам.ВыполнитьЗапрос(ТекстЗапроса);
							КонецЕсли;
						КонецЦикла;


						Если СтараяТЧ.КоличествоСтрок()>ТЧ.КоличествоСтрок() Тогда
							//удалить лишние строки
							ИмяТаб=НРЕГ(ИмяТаблицыБД);
							Для НомСтроки=МинКоличествоСтрок+1 По СтараяТЧ.КоличествоСтрок() Цикл
								ЗначениеКлючаТабличнойЧасти=СтараяТЧ.ПолучитьЗначение(НомСтроки,КлючевоеПолеТаблицы);
								Если ТипЗначенияСтр(ЗначениеКлючаТабличнойЧасти)="Строка" Тогда
									ЗначениеКлючаТабличнойЧасти="'"+ЗначениеКлючаТабличнойЧасти+"'";
								КонецЕсли;
								
								
								ТекстЗапроса="DELETE FROM "+ИмяТаб+" where (("+ИмяТаб+".idparent='"+Данные.ИД+"') and ("+ИмяТаб+"."+КлючевоеПолеТаблицы+"="+ЗначениеКлючаТабличнойЧасти+"))";
								Сам.ВыполнитьЗапрос(ТекстЗапроса);
							КонецЦикла;

						ИначеЕсли СтараяТЧ.КоличествоСтрок()<ТЧ.КоличествоСтрок() Тогда
							//Добавить новые строки
							Для НомСтроки=МинКоличествоСтрок+1 По ТЧ.КоличествоСтрок() Цикл

								ТЧ.ПолучитьСтрокуПоНомеру(НомСтроки);
								Для НомерПоля=1 По ОписательСтрокиТЧ.Количество() Цикл
									ИмяСвойства="";
									ОписательПоля=ОписательСтрокиТЧ.Получить(НомерПоля,ИмяСвойства);

									Значение=ТЧ.ПолучитьЗначение(ТЧ.НомерСтроки,ОписательПоля.ИмяПоля);
									НовыеДанныеСтроки.Вставить(ОписательПоля.ИмяПоля,Значение);
								КонецЦикла;
								ТекстЗапроса=Сам.ТекстЗапроса_ДобавитьОбъект(НовыеДанныеСтроки);
								Сам.ВыполнитьЗапрос(ТекстЗапроса);
							КонецЦикла;
						КонецЕсли;
					Иначе
						//#error Нет описателя строки табличной части	
					КонецЕсли;  //
				КонецЦикла;
			КонецЕсли;  //
		Иначе


			Если Сам.СтруктураБазы.Таблицы.Количество()>0 Тогда

				
				
				ИмяТаблицы=Сам.СтруктураБазы.ИмяТаблицы;

				//пишем вместе со всеми табличными частями в одном мегазапросе
				Таблицы=Сам.СтруктураБазы.Таблицы;
				//пробегаем по описателям табличных частей
				Для НомерТаблицы=1 По Таблицы.Количество() Цикл
					//получим описатель текущей табличной части
					ОписательТаблицы=Таблицы.Получить(НомерТаблицы);

					ИмяТаблицы=ОписательТаблицы.Имя;
					ИмяТаблицыБД=ОписательТаблицы.ИмяТаблицыБД;
					ИмяОбъектаСтрокиТЧ=ОписательТаблицы.ИмяОбъекта;
					
					//получим описатель строки табличной части
					ОписательСтрокиТЧ=ПолучитьСтруктуруТаблицы(ИмяТаблицыБД);

					Если ПустоеЗначение(ОписательСтрокиТЧ)=0 Тогда
					
						
						//возьмем табличную часть объекта (данные)
						ТЧ=0;
						Если Данные.Свойство(ИмяТаблицы,ТЧ)=0 Тогда
							//#error Неверный тип объекта. Не обнаружена табличная часть объекта
						КонецЕсли;

						//ТЧ - таблица с данными табличной части объекта


						
						КлючевоеПолеТаблицы="";
						КлючевоеПолеТаблицыТЗ="";
						ПолеСортировки="";
						ПолеСортировкиТЗ="";
						ПолеАвтонумерации="";
						ПолеАвтонумерацииТЗ="";
						
						Для Инд=1 По ОписательСтрокиТЧ.Количество() Цикл
							ОписательПоля=ОписательСтрокиТЧ.Получить(Инд);
							Если ОписательПоля.Сортировка=1 Тогда
								ПолеСортировки=ОписательПоля.Имя;
								ПолеСортировкиТЗ=ОписательПоля.ИмяПоля;
							КонецЕсли;
							Если ОписательПоля.ЭтоКлючевоеПоле=1 Тогда
								КлючевоеПолеТаблицы=ОписательПоля.Имя;
								КлючевоеПолеТаблицыТЗ=ОписательПоля.ИмяПоля;
							КонецЕсли;
							
							Если ОписательПоля.Автонумерация=1 Тогда
								ПолеАвтонумерации=ОписательПоля.Имя;
								ПолеАвтонумерацииТЗ=ОписательПоля.ИмяПоля;
							КонецЕсли;
							
						КонецЦикла;
						
						
						////////////
						
						Если ТЧ.КоличествоСтрок()>0 Тогда
							ИДОбъекта=Данные.ИД;
							НовыеДанныеСтроки=Сам.Новый(ИмяОбъектаСтрокиТЧ);

							ТЧ.Заполнить(ИДОбъекта,,,"Родитель");

							
							Если ПолеАвтонумерации<>"" Тогда
								ТЧ.ВыбратьСтроки();
								Пока ТЧ.ПолучитьСтроку()=1 Цикл
									ТЧ.УстановитьЗначение(ТЧ.НомерСтроки,ПолеАвтонумерацииТЗ,ТЧ.НомерСтроки);
								КонецЦикла;
							КонецЕсли;
							
							

							//Добавить новые строки
							Для НомСтроки=1 По ТЧ.КоличествоСтрок() Цикл
								ТЧ.ПолучитьСтрокуПоНомеру(НомСтроки);
								Для НомерПоля=1 По ОписательСтрокиТЧ.Количество() Цикл
									ИмяСвойства="";
									ОписательПоля=ОписательСтрокиТЧ.Получить(НомерПоля,ИмяСвойства);

									Значение=ТЧ.ПолучитьЗначение(ТЧ.НомерСтроки,ОписательПоля.ИмяПоля);
									НовыеДанныеСтроки.Вставить(ОписательПоля.ИмяПоля,Значение);
								КонецЦикла;
								

								ТекстЗапроса=Сам.ТекстЗапроса_ДобавитьОбъект(НовыеДанныеСтроки);
								Сам.ВыполнитьЗапрос(ТекстЗапроса);
							КонецЦикла;
						КонецЕсли;

					КонецЕсли;  //
				КонецЦикла;
			КонецЕсли;  //


		КонецЕсли;  //


		Объект.ЭтоНовый=0;
		Возврат 1;
	Исключение
		//#curmeth
		ТекстОшибки="БД.ЗаписатьОбъект():"+ОписаниеОшибки();
		Сам.УстановитьОшибку(ТекстОшибки);
		Возврат 0;
	КонецПопытки;

КонецФункции


Функция УдалитьОбъект(Объект)  Экспорт


	Возврат 0;

КонецФункции

Функция НаличныйВидОплаты() Экспорт
	ВидОплаты=Сам().Новый("ВидОплаты");
	ВидОплаты.Наименование="Наличные";
	ВидОплаты.ИД="0";
	ВидОплаты.ТипОплаты=0;
	ВидОплаты.ТипОплатыККМ=1;
	ВидОплаты.ПлатежнаяСистема="";


	Возврат ВидОплаты;
КонецФункции


Функция ВнешнееСобытие(Издатель,Событие) Экспорт
	Сам=Сам();
	Отработали=0;
	Если Событие.Источник="Команда" Тогда
		Если Событие.Описатель.Команда="ЗапросПользователяПоКарте" Тогда

			ИД=Событие.Описатель.Данные;

			Ответ=Сам.ПолучитьПользователяПоКарте(ИД);
			Если ПустоеЗначение(Ответ)=0 Тогда
				Событие.Описатель.Ответ=Ответ;
			КонецЕсли;
			Отработали=1;

		ИначеЕсли Событие.Описатель.Команда="ЗапросДисконтнойКарты" Тогда
			ИД=Событие.Описатель.Данные;

			Ответ=Сам.ПолучитьОбъектПоИД("ИДКарта",ИД);
			Если ПустоеЗначение(Ответ)=0 Тогда
				Событие.Описатель.Ответ=Ответ;
			КонецЕсли;
			Отработали=1;

		ИначеЕсли Событие.Описатель.Команда="ЗаписатьЗакрытиеСмены" Тогда
			ПараметрыСмены=Событие.Описатель.Данные;

			Док=Сам.Новый("КассоваяСмена");


			GUID=СоздатьОбъект("GUID");
			GUID.Новый();
			Док.ИД=GUID.ВСтроку();

			Док.НомерККМ=ПараметрыСмены.СерийныйНомер;


			Док.НомерСмены=ПараметрыСмены.НомерСмены;

			Док.НомерКассовогоЧека=0;
			Док.НомерДокумента=ПараметрыСмены.НомерСмены;
			Док.Дата=ПараметрыСмены.Дата;
			Док.Время=ПараметрыСмены.Время;

			Док.КодОперации=1;
			Док.Статус=ПараметрыСмены.Статус;

			Док.СуммаБезСкидки=0;
			Док.СуммаНаценки=0;
			Док.СуммаСкидки=0;
			Док.СуммаВсего=0;

			Док.СуммаНал=0;
			Док.СуммаБезНал=0;
			Док.СуммаКредит=0;
			Док.СуммаТары=0;

			Док.Внесение=0;
			Док.Выплата=0;
			Док.СуммаНачало=0;
			Док.СуммаКонец=0;

			Док.ВозвратНал=0;
			Док.ВозвратКредит=0;
			Док.ВозвратБезнал=0;
			Док.ВозвратТара=0;



			Док.Налог1=0;
			Док.Налог2=0;
			Док.Налог3=0;
			Док.Налог4=0;
			Попытка
				Док.Пользователь=глПраваДоступа.ТекущийПользователь.ИД;
				Док.НаименованиеПользователя=глПраваДоступа.ТекущийПользователь.Наименование;

			Исключение
			КонецПопытки;

			СтруктураОтвета=СоздатьОбъект("Структура");
			СтруктураОтвета.Вставить("Результат",0);
			СтруктураОтвета.Вставить("Документ",Док);

			Если глБД.ЗаписатьОбъект(Док)=1 Тогда
				СтруктураОтвета.Результат=1;
			Иначе
				СтруктураОтвета.Результат=0;
			КонецЕсли;
			СтруктураОтвета.Документ=Док;
			Событие.Описатель.Ответ=СтруктураОтвета;



			Отработали=1;

		ИначеЕсли Событие.Описатель.Команда="ЗаписатьОтчетБезГашения" Тогда
			ПараметрыСмены=Событие.Описатель.Данные;

			Док=Сам.Новый("КассоваяСмена");


			GUID=СоздатьОбъект("GUID");
			GUID.Новый();
			Док.ИД=GUID.ВСтроку();

			Док.НомерККМ=ПараметрыСмены.СерийныйНомер;


			Док.НомерСмены=ПараметрыСмены.НомерСмены;

			Док.НомерКассовогоЧека=0;
			Док.НомерДокумента=ПараметрыСмены.НомерСмены;
			Док.Дата=ПараметрыСмены.Дата;
			Док.Время=ПараметрыСмены.Время;

			Док.КодОперации=0;
			Док.Статус=ПараметрыСмены.Статус;

			Док.СуммаБезСкидки=0;
			Док.СуммаНаценки=0;
			Док.СуммаСкидки=0;
			Док.СуммаВсего=0;

			Док.СуммаНал=0;
			Док.СуммаБезНал=0;
			Док.СуммаКредит=0;
			Док.СуммаТары=0;

			Док.Внесение=0;
			Док.Выплата=0;
			Док.СуммаНачало=0;
			Док.СуммаКонец=0;

			Док.ВозвратНал=0;
			Док.ВозвратКредит=0;
			Док.ВозвратБезнал=0;
			Док.ВозвратТара=0;



			Док.Налог1=0;
			Док.Налог2=0;
			Док.Налог3=0;
			Док.Налог4=0;
			Попытка
				Док.Пользователь=глПраваДоступа.ТекущийПользователь.ИД;
				Док.НаименованиеПользователя=глПраваДоступа.ТекущийПользователь.Наименование;

			Исключение
			КонецПопытки;

			СтруктураОтвета=СоздатьОбъект("Структура");
			СтруктураОтвета.Вставить("Результат",0);
			СтруктураОтвета.Вставить("Документ",Док);

			Если глБД.ЗаписатьОбъект(Док)=1 Тогда
				СтруктураОтвета.Результат=1;
			Иначе
				СтруктураОтвета.Результат=0;
			КонецЕсли;
			СтруктураОтвета.Документ=Док;
			Событие.Описатель.Ответ=СтруктураОтвета;



			Отработали=1;

		КонецЕсли;
	КонецЕсли;

	Если Отработали=1 Тогда
		глСобытиеОбработано(Событие);
		Возврат 0;
	КонецЕсли;
	Возврат 1;
КонецФункции

//возвращает таблицу значений с отчетом
//Абстрактная
Функция ПолучитьОтчетПоПродавцам(СтруктураОтбора) Экспорт
	Возврат "";
КонецФункции

//------------------------------------ ------------------------------------
Процедура ПриОткрытии()
	//#if _NOW_PREPARE_CLASS
	Форма.Параметр._ПриОткрытии(); // для отладки класса
	//#endif // _NOW_PREPARE_CLASS
КонецПроцедуры // ПриОткрытии


Функция ВосстановитьИзРезервнойКопии() Экспорт
	Возврат 1;
КонецФункции

Функция СозданиеРезервнойКопии() Экспорт
	Возврат 1;
КонецФункции
