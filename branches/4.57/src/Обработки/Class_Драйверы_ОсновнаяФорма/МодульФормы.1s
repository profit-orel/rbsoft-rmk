//Конфигурация для платформы "1С:Предприятие 7.7" РБ-Софт:Рабочее место кассира.
//Версия 4.43 от 19.07.10 20:54:19
//Назначение: Автоматизация POS-узлов в магазинах (Point of sale).
//(c) Баинов Евгений, ООО "РБ-Софт" 2006, г.Улан-Удэ, проспект 50-летия Октября,21А,офис 110 
//e-mail: bainov@rb-soft.ru  icq: 73718937, телефоны: (3012) 44-03-57, 44-76-42, 44-86-58
//---------------------------------------------------------------------------------------
//Данная программа является свободным программным обеспечением.
//Вы вправе распространять ее и/или модифицировать в соответствии с условиями версии 2 
//либо по вашему выбору с условиями более поздней версии Стандартной Общественной Лицензии GNU,
//опубликованной Free Software Foundation. 
//Мы распространяем данную программу в надежде на то, что она будет вам полезной, 
//однако НЕ ПРЕДОСТАВЛЯЕМ НА НЕЕ НИКАКИХ ГАРАНТИЙ, 
//в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
//и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ.
//Для получения более подробной информации ознакомьтесь со Стандартной Общественной Лицензией GNU.
//Вместе с данной программой вы должны были получить экземпляр Стандартной Общественной Лицензии GNU.
//Если вы его не получили, сообщите об этом в Free Software Foundation, Inc.,
//59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//_______________________________________________________________________________________
//Имя модуля:
// <Вставить имя модуля>
//_______________________________________________________________________________________
//Разработчик: Баинов Евгений, e-mail: bainov@rb-soft.ru , icq: 73718937
//_______________________________________________________________________________________
//Назначение модуля:
// <Вставить описание модуля>
//
//_______________________________________________________________________________________
Перем Объект;
Перем ИнфоДорожки;
перем ЦветНеактивный,ЦветАктивный;
Перем УстройствоВводаИнфо,ККМИнфо,ДисплейПокупателяИнфо,ПлатежнаяСистемаИнфо;
Перем ТекущаяЗакладкаФормы,ЗакладкиФР;

Функция ПолучитьНомерФлагаАктивности(Флаг)
	возврат ?(Флаг=0,1,2);
КонецФункции


Функция ПолучитьЦветАктивности(Флаг)

	возврат ?(Флаг=0,ЦветНеактивный,ЦветАктивный);
КонецФункции


Процедура ЗаполнитьУстройства(ВидУстройства,Таб)

	ТЗ=глБД.ПрочитатьОбъекты(ВидУстройства);

	Таб.УдалитьСтроки();

	СписокПортов=СоздатьОбъект("СписокЗначений");

	ТекстПроверки="";
	ЕстьКонфликтПортов=0;

	ТЗ.ВыбратьСтроки();
	Пока ТЗ.ПолучитьСтроку()=1 Цикл

		//пытаемся взять ранее созданный в кэше драйверов экземпляр объекта
		Устройство=Объект.ПолучитьУстройство(ТЗ.Объект.Данные.Драйвер,ТЗ.Объект.Данные.ИД);

		Если ПустоеЗначение(Устройство)=1 Тогда
			//в кэше его не было, т.к. там только активные устройства
			//возьмем его экземпляр из базы
			Устройство=ТЗ.Объект;
		КонецЕсли;
		Таб.НоваяСтрока();

		Таб.Активность=ПолучитьНомерФлагаАктивности(Устройство.Данные.Активность);
		Таб.ИД=Устройство.ИД;
		Таб.НомерЛУ=Устройство.НомерЛУ;
		Таб.Наименование=Устройство.Данные.Наименование;
		Попытка
			Таб.Порт=Строка(Устройство.Данные.Порт);
		Исключение
			глДебаг(""+Устройство.Данные.Наименование+" "+ОписаниеОшибки());
		КонецПопытки;


		Таб.Объект=Устройство;
		Таб.Цвет=ПолучитьЦветАктивности(Устройство.Данные.Активность);


		Если Лев(Таб.Порт,3)="COM" Тогда
			Если СписокПортов.Принадлежит(Таб.Порт)=1 Тогда
				ЕстьКонфликтПортов=1;
			Иначе
				СписокПортов.ДобавитьЗначение(Таб.Порт);
			КонецЕсли;  //
		КонецЕсли;  //

	КонецЦикла;


	Если ЕстьКонфликтПортов=1 Тогда
		ТекстПроверки=ТекстПроверки+"Конфликт COM-портов."
	КонецЕсли;


	Если ВРЕГ(ВидУстройства)="УСТРОЙСТВО.СЧИТЫВАТЕЛЬ" Тогда
		УстройствоВводаИнфо=ТекстПроверки;
	ИначеЕсли ВРЕГ(ВидУстройства)="УСТРОЙСТВО.ККМ" Тогда
		ККМИнфо=ТекстПроверки;
	ИначеЕсли ВРЕГ(ВидУстройства)="УСТРОЙСТВО.ДИСПЛЕЙПОКУПАТЕЛЯ" Тогда
		ДИСПЛЕЙПОКУПАТЕЛЯИнфо=ТекстПроверки;
	ИначеЕсли ВРЕГ(ВидУстройства)="УСТРОЙСТВО.ПЛАТЕЖНАЯСИСТЕМА" Тогда
		ДИСПЛЕЙПОКУПАТЕЛЯИнфо=ТекстПроверки;

	КонецЕсли;



КонецПроцедуры

Процедура ПриКлике(Таб_ТО)
Перем ТекущийОбъект,ВидОбъекта,Активность,Порт;

	ТекКолонка=Таб_ТО.ТекущаяКолонка();
	ТекСтр=Таб_ТО.ТекущаяСтрока();

	ТекущийОбъект=Таб_ТО.Объект;
	ВидОбъекта=ТекущийОбъект.Вид();
	ТекущийОбъект.ОткрытьФормуОбъектаМодально();

	ЗаполнитьУстройства(ВидОбъекта,Таб_ТО);
	Попытка
		Таб_ТО.ТекущаяСтрока(ТекСтр);
	Исключение
	КонецПопытки;


КонецПроцедуры


Процедура ИнициализироватьДиалог()
	FRAutoPrint.ДобавитьЗначение("off"    ,"Отключен");
	FRAutoPrint.ДобавитьЗначение("paytype","По типу оплаты");
	FRAutoPrint.ДобавитьЗначение("goods"  ,"По товарам");

	FRAutoPrint.ТекущаяСтрока(1);
	Поз=FRAutoPrint.НайтиЗначение(нрег(глНастройки.Получить("FR/AutoPrint")));
	Если Поз>0 Тогда
		FRAutoPrint.ТекущаяСтрока(Поз);
	КонецЕсли;

	FRDemoMode=глНастройки.ПолучитьКакЧисло("FR/DemoMode");
	FRTestMode=глНастройки.ПолучитьКакЧисло("FR/TestMode");

	FRDriverType.ДобавитьЗначение("SHTRIH","Драйвер фирмы Штрих-М");
	FRDriverType.ДобавитьЗначение("ATOL"  ,"Драйвер фирмы Атол");


	Поз=FRDriverType.НайтиЗначение(ВРЕГ(глНастройки.Получить("FR/DriverType")));
	Если Поз>0 Тогда
		FRDriverType.ТекущаяСтрока(Поз);
	КонецЕсли;


	FRECRStatusCommand.ДобавитьЗначение("GetShortECRStatus");
	FRECRStatusCommand.ДобавитьЗначение("GetECRStatus");

	ECRStatusCommand=СокрЛП(глНастройки.Получить("FR/ECRStatusCommand"));

	Поз=FRECRStatusCommand.НайтиЗначение(ECRStatusCommand);
	Если Поз>0 Тогда
		FRECRStatusCommand.ТекущаяСтрока(Поз);
	Иначе
		FRECRStatusCommand.ТекущаяСтрока(1);
	КонецЕсли;

	//Использовать метод CancelCheck или SysAdminCancelCheck для аннулирования чека
	//По умолчанию SysAdminCancelCheck

	FRCancelCheckCommand.ДобавитьЗначение("CancelCheck");
	FRCancelCheckCommand.ДобавитьЗначение("SysAdminCancelCheck");

	CancelCheckCommand=СокрЛП(глНастройки.Получить("FR/CancelCheckCommand"));
	Поз=FRECRStatusCommand.НайтиЗначение(CancelCheckCommand);
	Если Поз>0 Тогда
		FRECRStatusCommand.ТекущаяСтрока(Поз);
	Иначе
		FRECRStatusCommand.ТекущаяСтрока(1);
	КонецЕсли;


	//Режим использования команды открытия чека
	FRNotUseOpenCheckCommand=глНастройки.ПолучитьКакЧисло("FR/NotUseOpenCheckCommand");
	//Не печатать штрихкоды
	FRNotPrintBarcodes=глНастройки.ПолучитьКакЧисло("FR/NotPrintBarcodes");
	//Не печатать картинки
	FRNotPrintPictures=глНастройки.ПолучитьКакЧисло("FR/NotPrintPictures");
	//Не печатать жирную строку
	FRNotPrintWideString=глНастройки.ПолучитьКакЧисло("FR/NotPrintWideString");
	//Не печатать строку заданным шрифтом
	FRNotPrintStringWithFont=глНастройки.ПолучитьКакЧисло("FR/NotPrintStringWithFont");



	CARDSDiscount_Track.ДобавитьЗначение("","Не определять");
	CARDSDiscount_Track.ДобавитьЗначение("1","1 дорожка");
	CARDSDiscount_Track.ДобавитьЗначение("2","2 дорожка");
	CARDSDiscount_Track.ДобавитьЗначение("3","3 дорожка");

	CARDSDiscount_Track.ТекущаяСтрока(1);
	Поз=CARDSDiscount_Track.НайтиЗначение(нрег(глНастройки.Получить("CARDS/Discount_Track")));
	Если Поз>0 Тогда
		CARDSDiscount_Track.ТекущаяСтрока(Поз);
	КонецЕсли;


	CARDSPersonal_Track.ДобавитьЗначение("","Не определять");
	CARDSPersonal_Track.ДобавитьЗначение("1","1 дорожка");
	CARDSPersonal_Track.ДобавитьЗначение("2","2 дорожка");
	CARDSPersonal_Track.ДобавитьЗначение("3","3 дорожка");

	CARDSPersonal_Track.ТекущаяСтрока(1);
	Поз=CARDSPersonal_Track.НайтиЗначение(нрег(глНастройки.Получить("CARDS/Personal_Track")));
	Если Поз>0 Тогда
		CARDSPersonal_Track.ТекущаяСтрока(Поз);
	КонецЕсли;


	CARDSBonusCard_Track.ДобавитьЗначение("","Не определять");
	CARDSBonusCard_Track.ДобавитьЗначение("1","1 дорожка");
	CARDSBonusCard_Track.ДобавитьЗначение("2","2 дорожка");
	CARDSBonusCard_Track.ДобавитьЗначение("3","3 дорожка");

	CARDSBonusCard_Track.ТекущаяСтрока(1);
	Поз=CARDSBonusCard_Track.НайтиЗначение(нрег(глНастройки.Получить("CARDS/BonusCard_Track")));
	Если Поз>0 Тогда
		CARDSBonusCard_Track.ТекущаяСтрока(Поз);
	КонецЕсли;


	CARDSDebetCard_Track.ДобавитьЗначение("","Не определять");
	CARDSDebetCard_Track.ДобавитьЗначение("1","1 дорожка");
	CARDSDebetCard_Track.ДобавитьЗначение("2","2 дорожка");
	CARDSDebetCard_Track.ДобавитьЗначение("3","3 дорожка");

	CARDSDebetCard_Track.ТекущаяСтрока(1);
	Поз=CARDSDebetCard_Track.НайтиЗначение(нрег(глНастройки.Получить("CARDS/DebetCard_Track")));
	Если Поз>0 Тогда
		CARDSDebetCard_Track.ТекущаяСтрока(Поз);
	КонецЕсли;

	CARDSShowMagneticReaderData	= глНастройки.ПолучитьКакЧисло("CARDS/ShowMagneticReaderData");
	CARDSShowBirthday			= глНастройки.ПолучитьКакЧисло("CARDS/ShowBirthday");
	CARDSShowDiscountPercent	= глНастройки.ПолучитьКакЧисло("CARDS/ShowDiscountPercent");
	CARDSShowDiscountSumm		= глНастройки.ПолучитьКакЧисло("CARDS/ShowDiscountSumm");
	CARDSShowName				= глНастройки.ПолучитьКакЧисло("CARDS/ShowName");
	CARDSShowSales				= глНастройки.ПолучитьКакЧисло("CARDS/ShowSales");



	KEYBOARDLayout	=глНастройки.Получить("KEYBOARD/Layout");
	KEYBOARDSens	=глНастройки.ПолучитьКакЧисло("KEYBOARD/Sens");


	ТО_УстройстваВвода.НоваяКолонка("Цвет","Строка");
	ТО_УстройстваВвода.НоваяКолонка("Активность","Число",,,"",3);

	ТО_УстройстваВвода.НоваяКолонка("ИД","Строка",,,,10);
	ТО_УстройстваВвода.НоваяКолонка("НомерЛУ","Строка",,,"ЛУ",3);
	ТО_УстройстваВвода.НоваяКолонка("Наименование","Строка",,,,15);
	ТО_УстройстваВвода.НоваяКолонка("Порт","Строка",,,,15);
	ТО_УстройстваВвода.НоваяКолонка("Объект");
	ТО_УстройстваВвода.ВидимостьКолонки("Цвет,Объект",0);
	ТО_УстройстваВвода.ВыводитьПиктограммы("Активность");

	ТО_ККМ.НоваяКолонка("Цвет","Строка");
	ТО_ККМ.НоваяКолонка("Активность","Число",,,"",3);

	ТО_ККМ.НоваяКолонка("ИД","Строка",,,,10);
	ТО_ККМ.НоваяКолонка("НомерЛУ","Строка",,,"ЛУ",3);
	ТО_ККМ.НоваяКолонка("Наименование","Строка",,,,15);
	ТО_ККМ.НоваяКолонка("Порт","Строка",,,,15);
	ТО_ККМ.НоваяКолонка("Объект");
	ТО_ККМ.ВидимостьКолонки("Цвет,Объект",0);
	ТО_ККМ.ВыводитьПиктограммы("Активность");

	ТО_ДП.НоваяКолонка("Цвет","Строка");
	ТО_ДП.НоваяКолонка("Активность","Число",,,"",3);

	ТО_ДП.НоваяКолонка("ИД","Строка",,,,10);
	ТО_ДП.НоваяКолонка("НомерЛУ","Строка",,,"ЛУ",3);
	ТО_ДП.НоваяКолонка("Наименование","Строка",,,,15);
	ТО_ДП.НоваяКолонка("Порт","Строка",,,,15);
	ТО_ДП.НоваяКолонка("Объект");
	ТО_ДП.ВидимостьКолонки("Цвет,Объект",0);
	ТО_ДП.ВыводитьПиктограммы("Активность");


	ТО_ПлатежнаяСистема.НоваяКолонка("Цвет","Строка");
	ТО_ПлатежнаяСистема.НоваяКолонка("Активность","Число",,,"",3);

	ТО_ПлатежнаяСистема.НоваяКолонка("ИД","Строка",,,,10);
	ТО_ПлатежнаяСистема.НоваяКолонка("НомерЛУ","Строка",,,"ЛУ",3);
	ТО_ПлатежнаяСистема.НоваяКолонка("Наименование","Строка",,,,15);
	ТО_ПлатежнаяСистема.НоваяКолонка("Порт","Строка",,,,15);
	ТО_ПлатежнаяСистема.НоваяКолонка("Объект");
	ТО_ПлатежнаяСистема.ВидимостьКолонки("Цвет,Объект",0);
	ТО_ПлатежнаяСистема.ВыводитьПиктограммы("Активность");


	ЦветАктивный=глОбщиеФункции.ЦветТаблицы(глОбщиеФункции.ПолучитьЦвет(255,255,74),глОбщиеФункции.ПолучитьЦвет(0,0,0),6);
	ЦветНеактивный=глОбщиеФункции.ЦветТаблицы(глОбщиеФункции.ПолучитьЦвет(255,255,255),глОбщиеФункции.ПолучитьЦвет(100,100,100),6);



	ЗаполнитьУстройства("Устройство.Считыватель",ТО_УстройстваВвода);
	ЗаполнитьУстройства("Устройство.ККМ",ТО_ККМ);
	ЗаполнитьУстройства("Устройство.ДисплейПокупателя",ТО_ДП);
	ЗаполнитьУстройства("Устройство.ПлатежнаяСистема",ТО_ПлатежнаяСистема);
КонецПроцедуры

Процедура Применить()

		//Сканеры
		НомерДорожки=CARDSDiscount_Track.ПолучитьЗначение(CARDSDiscount_Track.ТекущаяСтрока());
		глНастройки.Установить("CARDS/Discount_Track",НомерДорожки);

		НомерДорожки=CARDSPersonal_Track.ПолучитьЗначение(CARDSPersonal_Track.ТекущаяСтрока());
		глНастройки.Установить("CARDS/Personal_Track",НомерДорожки);

		НомерДорожки=CARDSDebetCard_Track.ПолучитьЗначение(CARDSDebetCard_Track.ТекущаяСтрока());
		глНастройки.Установить("CARDS/DebetCard_Track",НомерДорожки);

		НомерДорожки=CARDSBonusCard_Track.ПолучитьЗначение(CARDSBonusCard_Track.ТекущаяСтрока());
		глНастройки.Установить("CARDS/BonusCard_Track",НомерДорожки);


		глНастройки.Установить("CARDS/ShowMagneticReaderData",CARDSShowMagneticReaderData);

		//Показывать имя клиента
		глНастройки.Установить("CARDS/ShowName",CARDSShowName);
		//Показывать дату рождения клиента
		глНастройки.Установить("CARDS/ShowBirthday",CARDSShowBirthday);
		//Показывать сумму продаж клиенту
		глНастройки.Установить("CARDS/ShowSales",CARDSShowSales);
		//Показывать сумму предоставленных скидок клиенту
		глНастройки.Установить("CARDS/ShowDiscountSumm",CARDSShowDiscountSumm);
		//Показывать процент скидки
		глНастройки.Установить("CARDS/ShowDiscountPercent",CARDSShowDiscountPercent);





		//ФР
		глНастройки.Установить("FR/DemoMode",FRDemoMode);
		глНастройки.Установить("FR/TestMode",FRTestMode);
		глНастройки.Установить("FR/AutoPrint",СокрЛП(FRAutoPrint.ПолучитьЗначение(FRAutoPrint.ТекущаяСтрока())));
		глНастройки.Установить("FR/DriverType",СокрЛП(FRDriverType.ПолучитьЗначение(FRDriverType.ТекущаяСтрока())));



		глНастройки.Установить("FR/ECRStatusCommand",СокрЛП(FRECRStatusCommand.ПолучитьЗначение(FRECRStatusCommand.ТекущаяСтрока())));


		глНастройки.Установить("FR/CancelCheckCommand",СокрЛП(FRCancelCheckCommand.ПолучитьЗначение(FRCancelCheckCommand.ТекущаяСтрока())));

		глНастройки.Установить("FR/NotUseOpenCheckCommand",FRNotUseOpenCheckCommand);
		глНастройки.Установить("FR/NotPrintBarcodes",FRNotPrintBarcodes);
		глНастройки.Установить("FR/NotPrintPictures",FRNotPrintPictures);
		глНастройки.Установить("FR/NotPrintWideString",FRNotPrintWideString);
		глНастройки.Установить("FR/NotPrintStringWithFont",FRNotPrintStringWithFont);




		//ДП

		//Клавиатура
		глНастройки.Установить("KEYBOARD/Layout",СокрЛП(KEYBOARDLayout));
		глНастройки.Установить("KEYBOARD/Sens",KEYBOARDSens);

		глНастройки.Записать();

КонецПроцедуры

Процедура ПриОткрытии()

	Если ПустоеЗначение(Форма.Параметр)=1 Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;

	СтруктураПараметров=Форма.Параметр;
	Объект=СтруктураПараметров.Объект;


	ИнициализироватьДиалог();

	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Общие,Кнопки","Общие");
	Форма.Закладки.ДобавитьЗначение("СканерыРидеры,Кнопки","Сканеры и ридеры");
	Форма.Закладки.ДобавитьЗначение("ФР","Фискальные регистраторы");
	Форма.Закладки.ДобавитьЗначение("ДП,Кнопки","Дисплеи покупателя");
	Форма.Закладки.ДобавитьЗначение("ПлатежныеСистемы,Кнопки","Платежные системы");
	Форма.Закладки.ДобавитьЗначение("Клавиатура,Кнопки","Клавиатура");


	Форма.ИспользоватьСлой("Общие,Кнопки",2);

	Форма.кнПрименить.Видимость(0);

КонецПроцедуры	// ПриОткрытии

Процедура ПослеОткрытия()

	СписокЗакладокОбмен=СоздатьОбъект("СписокЗначений");
	СписокЗакладокОбмен.ДобавитьЗначение("ФР,ФРОбщие,Кнопки","Общие");
	СписокЗакладокОбмен.ДобавитьЗначение("ФР,ФРШтрих,Кнопки","Доп.параметры для Штрих-ФР");

	ЗакладкиФР=СоздатьОбъект("Закладки");
	ЗакладкиФР.Инит(Контекст,"тпЗакладкиФР",СписокЗакладокОбмен);

КонецПроцедуры

Процедура ПриВыбореЗакладки(НомерЗакладки,ЗначениеЗакладки)
	Форма.ИспользоватьСлой(ЗначениеЗакладки,2);
	Если НомерЗакладки=1 Тогда
	    Форма.кнПрименить.Видимость(0);
	Иначе
		Форма.кнПрименить.Видимость(1);
	КонецЕсли;  //


	ТекущаяЗакладкаФормы=ЗначениеЗакладки;
	Если ЗначениеЗакладки="ФР" Тогда
		ЗакладкиФР.УстановитьЗакладку("ФР,ФРОбщие,Кнопки");
		Форма.ИспользоватьСлой("ФР,ФРОбщие,Кнопки",2);

	КонецЕсли;
КонецПроцедуры


Процедура тпЗакладкиФР_ВыборЗакладки(ЗначениеЗакладки,Представление)
	Если (ТекущаяЗакладкаФормы="ФР") Тогда
		Форма.ИспользоватьСлой(ЗначениеЗакладки,2);
	КонецЕсли;
КонецПроцедуры


Процедура ПриПовторномОткрытии()
	ПриОткрытии();
КонецПроцедуры	// ПриПовторномОткрытии

Процедура НастройкаРаскладкиКлавиатуры()
	Объект.Клавиатура.ОткрытьФормуОбъектаМодально();
КонецПроцедуры

Процедура РедакторСписковБыстрогоВыбора()

КонецПроцедуры

Процедура ПоказатьСканкоды()
	ОткрытьФормуМодально("Обработка.СканКоды");
КонецПроцедуры

Процедура ДобавитьУстройство(ВидОбъекта,Таб_ТО)
Перем ТекущийОбъект;


    ТекущийОбъект=СоздатьОбъект(ВидОбъекта);

	ТекущийОбъект.Данные.Наименование=ВидОбъекта;
	ТекущийОбъект.НомерЛУ=Таб_ТО.КоличествоСтрок()+1;

	ТекущийОбъект.ОткрытьФормуОбъектаМодально();

	ЗаполнитьУстройства(ВидОбъекта,Таб_ТО);

	Таб_ТО.ТекущаяСтрока(Таб_ТО.КоличествоСтрок());

КонецПроцедуры

Процедура УдалитьУстройство(ВидОбъекта,Таб_ТО)


	ТекСтр=Таб_ТО.ТекущаяСтрока();

	Если ТекСтр>0 Тогда
		Если глВопрос("Удалить устройство?","Да+Нет")<>"Да" Тогда
		    возврат;
		КонецЕсли;  //
	КонецЕсли;
	Если глБД.УдалитьОбъект(Таб_ТО.Объект)=0 Тогда
		Предупреждение("Объект не удален.");
	КонецЕсли;


	ЗаполнитьУстройства(ВидОбъекта,Таб_ТО);


	Попытка
		Если Таб_ТО.КоличествоСтрок()>0 Тогда
			Таб_ТО.ТекущаяСтрока(Мин(ТекСтр,Таб_ТО.КоличествоСтрок()));
		КонецЕсли;

	Исключение
	КонецПопытки;

КонецПроцедуры

Процедура ПриЗакрытии()
	Если глВопрос("Закрыть окно настройки оборудования?","Да+Нет")<>"Да" Тогда
		СтатусВозврата(0);
	КонецЕсли;
КонецПроцедуры

ИнфоДорожки="Если выбрана определенная дорожка, то считанные данные картридера декодируются для разбиения данных по дорожкам.
|Данные, записанные на определенной дорожке магнитной карты используются для поиска в базе данных.
|Если выбран режим ""Не определять"", поиск производится по ""сырым"" данным (без разбиения на дорожки).";

ИнфоРМК="Конфигурация для 1С:Предприятие 7.7
|РБ-Софт: Рабочее место кассира.
|номер версии: "+НомерВерсии+"
|
|www.rbsoft.ru";

ПлатежнаяСистемаИнфо="";
ТекущаяЗакладкаФормы="";