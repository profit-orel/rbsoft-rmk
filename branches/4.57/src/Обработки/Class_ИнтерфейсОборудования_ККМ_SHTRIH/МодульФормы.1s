//Конфигурация для платформы "1С:Предприятие 7.7" РБ-Софт:Рабочее место кассира.
//Версия 4.43 от 19.07.10 20:54:19
//Назначение: Автоматизация POS-узлов в магазинах (Point of sale).
//(c) Баинов Евгений, ООО "РБ-Софт" 2006, г.Улан-Удэ, проспект 50-летия Октября,21А,офис 110 
//e-mail: bainov@rb-soft.ru  icq: 73718937, телефоны: (3012) 44-03-57, 44-76-42, 44-86-58
//---------------------------------------------------------------------------------------
//Данная программа является свободным программным обеспечением.
//Вы вправе распространять ее и/или модифицировать в соответствии с условиями версии 2 
//либо по вашему выбору с условиями более поздней версии Стандартной Общественной Лицензии GNU,
//опубликованной Free Software Foundation. 
//Мы распространяем данную программу в надежде на то, что она будет вам полезной, 
//однако НЕ ПРЕДОСТАВЛЯЕМ НА НЕЕ НИКАКИХ ГАРАНТИЙ, 
//в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
//и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ.
//Для получения более подробной информации ознакомьтесь со Стандартной Общественной Лицензией GNU.
//Вместе с данной программой вы должны были получить экземпляр Стандартной Общественной Лицензии GNU.
//Если вы его не получили, сообщите об этом в Free Software Foundation, Inc.,
//59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//_______________________________________________________________________________________
//Имя модуля:
// <Вставить имя модуля>
//_______________________________________________________________________________________
//Разработчик: Баинов Евгений, e-mail: bainov@rb-soft.ru , icq: 73718937
//_______________________________________________________________________________________
//Назначение модуля:
// <Вставить описание модуля>
//
//_______________________________________________________________________________________
Перем _База Экспорт;
Перем Счетчики Экспорт;


Функция Этот(Конт) Возврат Конт; КонецФункции
Функция Сам() Возврат Этот(Контекст) КонецФункции




//------------------------------------ ------------------------------------
Процедура Конструктор()
	_База = Этот(Контекст).ПолучитьБазовыйКласс("ИнтерфейсОборудования.ККМ");

КонецПроцедуры // Конструктор

//------------------------------------ ------------------------------------
Процедура Деструктор()
КонецПроцедуры // Деструктор

//------------------------------------ ------------------------------------
Процедура ПриОткрытии()

	Форма.Параметр._ПриОткрытии(); // для отладки класса

КонецПроцедуры // ПриОткрытии


Функция СделатьТекущим(ОбъектУстройство=0) Экспорт
	Сам=Сам();
	Если ПустоеЗначение(ОбъектУстройство)=1 Тогда
		НовыйЛУ=Сам.НомерЛУ;
	Иначе
		НовыйЛУ=ОбъектУстройство.НомерЛУ;
	КонецЕсли;
	Сам.Драйвер.НомерЛУ=НовыйЛУ;
	Сам.Драйвер.УстановитьАктивноеЛУ();
	возврат Сам.ПроверкаОшибокДрайвера();
КонецФункции

Функция ВключениеОборудования(ОбъектУстройство=0) Экспорт
	Сам=Сам();
	Если Сам.СделатьТекущим(ОбъектУстройство)=1 Тогда
		Сам.Драйвер.УстановитьСвязь();
	Иначе
		Возврат 0;
	КонецЕсли;

	возврат Сам.ПроверкаОшибокДрайвера();
КонецФункции

Функция ОтключениеОборудования(ОбъектУстройство) Экспорт
	Сам=Сам();
	Сам.Драйвер.РазорватьСвязь();

	возврат Сам.ПроверкаОшибокДрайвера();
КонецФункции

//_____________________________________________________________________________
//Функция ПолучитьНомерСкоростиОбмена
//Назначение:
//Параметры:
//ТипДрайвера="ШтрихМ" номер скорости для драйвера ФР от Штриха
//иначе номер скорости для драйверов Атол
//Скорость
//
//Возвращает:
//
Функция ПолучитьНомерСкоростиОбмена(Скорость) экспорт

	Если Скорость=2400 Тогда
		возврат 0;
	ИначеЕсли Скорость=4800 Тогда
		возврат 1;
	ИначеЕсли Скорость=9600 Тогда
		возврат 2;
	ИначеЕсли Скорость=19200 Тогда
		возврат 3;
	ИначеЕсли Скорость=38400 Тогда
		возврат 4;
	ИначеЕсли Скорость=57600 Тогда
		возврат 5;
	ИначеЕсли Скорость=115200 Тогда
		возврат 6;
	КонецЕсли;  //
	возврат 3;

КонецФункции //ПолучитьНомерСкоростиОбмена

//Функция ПолучитьНомерПорта
//Назначение:
//Параметры:
//Порт - объект Порт
//
//Возвращает:
//ТипЗначения - Число. определяет номер порта в терминах драйвера устройства
//-1 если порт некорректный

Функция ПолучитьНомерПорта(Порт) экспорт

	Если Порт.ТипПорта="RS" Тогда
	    Возврат Порт.НомерПорта();
	КонецЕсли;
	Возврат -1;
КонецФункции //ПолучитьНомерПорта


Функция ПарольПользователя() Экспорт
	//Возврат _База.ПарольПользователя();
	Попытка
		Возврат _База.ПарольПользователя();
	Исключение
		Возврат 30;
	КонецПопытки;
КонецФункции


//должна удалить все настройки драйвера оборудования
Функция УдалитьНастройкиДрайвера() Экспорт

	Сам=Сам();

	Пока Сам.КоличествоЛУ()>1 Цикл
		Если Сам.УдалитьУстройствоПоИндексу(1)=0 Тогда
			Возврат 0;
		КонецЕсли;
	КонецЦикла;

	Возврат 1;
КонецФункции

//должна возвражщать ИД драйвера.
//ИД задается в секции DRIVERS файла rmkconfig
Функция ИдентификаторДрайвера() Экспорт
	Возврат "SHTRIH";
КонецФункции

//количество логических устройств
Функция КоличествоЛУ() Экспорт
	Сам=Сам();
	Сам.Драйвер.ПолучитьКоличествоЛУ();

	возврат Сам.Драйвер.КоличествоЛУ;
КонецФункции

Функция УстановитьПараметрыУстройства(ОбъектУстройство) Экспорт
	Сам=Сам();

	Если Сам.СделатьТекущим(ОбъектУстройство)=0 Тогда
		Сам.УстановитьКодИОшибку(10000,"Не удалось сделать текущим ККМ "+ОбъектУстройство.Данные.Наименование);
		возврат 0;
	КонецЕсли;

	НомерПорта=Сам.ПолучитьНомерПорта(ОбъектУстройство.Данные.Порт);
	Если НомерПорта<0 Тогда
		Сам.УстановитьКодИОшибку(10000,"Некорректный номер порта для ККМ "+ОбъектУстройство.Данные.Наименование);
		возврат 0;
	КонецЕсли;

	Сам.Драйвер.LDComNumber=НомерПорта;
	Сам.Драйвер.LDName=ОбъектУстройство.Данные.Наименование;
	НомерСкорости=ПолучитьНомерСкоростиОбмена(ОбъектУстройство.Данные.Порт.Скорость);
	Сам.Драйвер.LDBaudRate=НомерСкорости;
	Сам.Драйвер.LDTimeOut=ОбъектУстройство.Данные.Порт.ТаймАут;
	Сам.Драйвер.LDComputerName=СокрЛП(ОбъектУстройство.Данные.НаименованиеМашины);

	//Сам.Драйвер.НомерЛУ=ОбъектУстройство.НомерЛУ;
	Сам.Драйвер.SetParamLD();
	Если Сам.ПроверкаОшибокДрайвера()=1 Тогда
	    возврат 1;
	КонецЕсли;
	Сам.УстановитьКодИОшибку(10000,"Не удалось установить параметры оборудования: "+Сам.ОписаниеОшибкиДрайвера());
	возврат 0;
КонецФункции

Функция ДобавитьУстройство() Экспорт
	Сам=Сам();
	Сам.Драйвер.ДобавитьЛУ();
	Если Сам.ПроверкаОшибокДрайвера()=1 Тогда
	    возврат 1;
	КонецЕсли;
	Сам.УстановитьКодИОшибку(10000,"Не удалось добавить устройство ККМ: "+Сам.ОписаниеОшибкиДрайвера());
	Возврат 0;
КонецФункции

Функция УдалитьУстройствоПоИндексу(ИндексЛУ) Экспорт
	Сам=Сам();

	Сам.Драйвер.ИндексЛУ=ИндексЛУ;
	Сам.Драйвер.ПеречислитьЛУ();

	Сам.Драйвер.УдалитьЛУ();

	Если Сам.КодОшибкиДрайвера()<>0 Тогда
		Сам.УстановитьКодИОшибку(10000,"Не удалось удалить устройство ККМ: ИндексЛУ="+ИндексЛУ+" "+Сам.ОписаниеОшибкиДрайвера());
		Возврат 0;
	КонецЕсли;

	Возврат 1;
КонецФункции


Функция КодОшибкиДрайвера() Экспорт
	Сам=Сам();
	возврат Сам.Драйвер.ResultCode;
КонецФункции


Функция ОписаниеОшибкиДрайвера() Экспорт
	Сам=Сам();
	возврат Сам.Драйвер.ResultCodeDescription;
КонецФункции


//проверяет параметры подключенного физического устройства соответствующее устройству ОбъектУстройство
//перед вызовом вызывать ПолучитьПараметрыУстройства
//вернуть 0 если неправильные параметры
//1 - если все верно
//например при подключении ККМ проверяем серийный номер
Функция ПроверитьПараметрыУстройства(ОбъектУстройство=0) Экспорт
	Сам=Сам();
	Если ПустоеЗначение(ОбъектУстройство)=1 Тогда
		УстройствоДляПроверки=Сам.Устройство;
	Иначе

		УстройствоДляПроверки=ОбъектУстройство;
	КонецЕсли;

	Если Сам.СделатьТекущим(УстройствоДляПроверки)=0 Тогда
		Возврат 0;
	КонецЕсли;

	//сравниваем серийник с тем что у нас пришит в справочнике ККМ
	Если Число(Сам.Параметры.СерийныйНомер)<>Число(УстройствоДляПроверки.Данные.СерийныйНомер) Тогда
		Сам.УстановитьКодИОшибку(10000,"Не совпадают серийные номера логических устройств ККМ и ККМ в справочнике.
		|Требуется настройка рабочего места кассира.
		|Требуемый номер логического устройства №"+УстройствоДляПроверки.НомерЛУ+": "+УстройствоДляПроверки.Данные.СерийныйНомер
		+" Фактический № :"+Сам.Параметры.СерийныйНомер);
		возврат 0;

	ИначеЕсли Сам.Драйвер.LDComNumber<>ПолучитьНомерПорта(УстройствоДляПроверки.Данные.Порт) Тогда
		Сам.УстановитьКодИОшибку(10000,"Не совпадают номера коммуникационных портов логических устройств ККМ и ККМ в справочнике.
		|Требуется настройка рабочего места кассира.
		|Требуемый номер порта логического устройства №"+УстройствоДляПроверки.Данные.Порт+"
		|Фактический № :"+Сам.Драйвер.LDComNumber);
		возврат 0;

	КонецЕсли;  //

	возврат 1;
КонецФункции


Функция АннулироватьЧек() Экспорт
	Сам=Сам();
	Если Сам.СделатьТекущим()=0 Тогда
		Возврат 0;
	КонецЕсли;  //Сам.СделатьТекущим()=0

	Если ВРЕГ(глНастройки.Получить("SHTRIH/CancelCheckCommand"))=ВРЕГ("CancelCheck") Тогда

		Сам.Драйвер.Пароль=Сам.ПарольПользователя();
		Сам.Драйвер.CancelCheck();

	Иначе
		Сам.Драйвер.Пароль=Сам.ПарольАдминистратора();
		Сам.Драйвер.ОтменаЧекаСистАдминистратором();

	КонецЕсли;


	возврат Сам.ПроверкаОшибокДрайвера();
КонецФункции

//проверяет состояние и выдает сообщение, если нет чековой ленты
//если документ открыт то он будет отменен
//если после отсутствия бумаги - будет продолжена печать
//Применять при старте системы.

Функция ПроверитьГотовность() Экспорт
	Сам=Сам();
	Если Сам.СделатьТекущим()=0 Тогда
		Возврат 0;
	КонецЕсли;  //Сам.СделатьТекущим()=0

	Если ВРЕГ(глНастройки.Получить("SHTRIH/ECRStatusCommand"))=ВРЕГ("GetECRStatus") Тогда
		Сам.Драйвер.GetECRStatus();
	Иначе
		Сам.Драйвер.GetShortECRStatus();
	КонецЕсли;

	Если Сам.КодОшибкиДрайвера()<>0 Тогда
		Сам.УстановитьОшибку(Сам.ОписаниеОшибкиДрайвера());
		возврат 0;
	КонецЕсли;
	Если Сам.Драйвер.РежимККМ=3 тогда  // после активного отсутствия бумаги ждет команду продолжения печати
		глПредупреждение("24 часа кончились.
		|Необходимо снять Z-отчет.");
		Возврат 0;
	ИначеЕсли Сам.Драйвер.ПодрежимККМ=3 тогда  // после активного отсутствия бумаги ждет команду продолжения печати
		Сам.Драйвер.ПродолжитьПечать();
		Возврат Сам.ПроверитьГотовность();
	ИначеЕсли Сам.Драйвер.ПодрежимККМ=2 тогда // активное отсутствие бумаги
		глПредупреждение("Вставьте чековую ленту");
		Возврат Сам.ПроверитьГотовность();
	ИначеЕсли Сам.Драйвер.РежимККМ=8 тогда

		СостояниеЧека="";
		Если Сам.Драйвер.Статус8Режима=0 Тогда
			СостояниеЧека="Чек продажи";
		ИначеЕсли Сам.Драйвер.Статус8Режима=1 Тогда
			СостояниеЧека="Чек покупки";
		ИначеЕсли Сам.Драйвер.Статус8Режима=2 Тогда
			СостояниеЧека="Чек возврата продажи";
		ИначеЕсли Сам.Драйвер.Статус8Режима=3 Тогда
			СостояниеЧека="Чек возврата покупки";

		КонецЕсли;
		//Отменить открытый чек
		Рез=глВопрос("ККМ в состоянии открытого документа.
		|"+СостояниеЧека+"
		|
		|Отменить предыдущий чек?","Да+Нет");
		Если Рез="Да" Тогда
			Если Сам.АннулироватьЧек()=0 Тогда
			    глПредупреждение("Не удалось аннулировать чек.
				|"+Сам.ПоследняяОшибка());
			КонецЕсли;  //
			Возврат Сам.ПроверитьГотовность();
		Иначе
			Возврат 0;
		КонецЕсли;

	Иначе
		//тут датчик бумаги может врать. комментируем
		//Если Сам.Драйвер.РулонЧековойЛентыЕсть=0 Тогда
		//    глПредупреждение("Вставьте чековую ленту");
		//КонецЕсли;  //
	КонецЕсли;
	Возврат 1;
КонецФункции


//возврат 	1 - ошибок нет
//			0 - ошибка при печати
Функция ОбработкаОшибокПриПечати() Экспорт

	Сам=Сам();

	Код = Сам.КодОшибкиДрайвера();
	Если Код = 0 Тогда
		//ошибок нет
		Возврат 1;
	Иначе
		Пока Код = 80 Цикл //Идет печать предыдущей команды
			Сам.Драйвер.ПродолжитьПечать();
			глОбщиеФункции.Пауза(100);
		КонецЦикла;

		~ПроверкаСостояния:
		Код = Сам.КодОшибкиДрайвера();
		Если Сам.НетОшибокВДрайвере(Код) = 1 Тогда
			Возврат 1;
		Иначе
			Сам.УстановитьКодИОшибку(Код,Сам.ОписаниеОшибкиДрайвера());
			Если (Код = 88) Тогда //ожидание команды продолжения печати
				Сам.Драйвер.ПродолжитьПечать();
			ИначеЕсли (Код = 115) Тогда // Команда не поддерживается в данном режиме
				Если Сам.Драйвер.РежимККМ=3 Тогда  //Открытая смена 24 часа кончилась
					глПредупреждение("Смена превысила 24 часа, необходимо снять Z-отчет!");
					Сам.АннулироватьЧек();
					Сам.Отключить();
					Возврат 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Код = Сам.КодОшибкиДрайвера();

		Если Сам.НетОшибокВДрайвере(Код) = 0 Тогда
			Ошибка = Сам.ОписаниеОшибкиДрайвера();
			рез=глВопрос("ОШИБКА ККМ №" +Код+": "+ Ошибка + ".
			|Повторить?","Да+Нет");

			Если Рез="Нет" тогда

				Сам.УстановитьКодИОшибку(Код,Ошибка);
				Если Сам.Драйвер.РежимККМ=8 Тогда //открытый документ

					Сам.АннулироватьЧек();

				КонецЕсли;

				Сам.Отключить();

				Возврат 0;
			КонецЕсли;

		КонецЕсли;

		Сам.Драйвер.Пароль=Сам.ПарольПользователя();
		Сам.Драйвер.ПолучитьСостояниеККМ();
		Если Сам.Драйвер.ПодрежимККМ=3 тогда  // после активного отсутствия бумаги ждет команду продолжения печати
			Сам.Драйвер.ПродолжитьПечать();
		ИначеЕсли Сам.Драйвер.ПодрежимККМ=2 тогда // активное отсутствие бумаги
			глПредупреждение("Вставьте чековую ленту");
		КонецЕсли;
		Перейти ~ПроверкаСостояния;
	КонецЕсли;
	Возврат 0;
КонецФункции



Функция ЗакрытьСмену() Экспорт

	Сам=Сам();

	Если Сам.Включить()=0 Тогда
		Возврат 0;
	КонецЕсли;

	Сам.Драйвер.Пароль=Сам.ПарольАдминистратора();

	Сам.Драйвер.СнятьОтчётСГашением();

	Результат = Сам.ОбработкаОшибокПриПечати();
	Сам.Отключить();
	Возврат Результат;
КонецФункции

Функция ОтчетБезГашения() Экспорт
	Сам=Сам();

	Если Сам.Включить()=0 Тогда
		Возврат 0;
	КонецЕсли;


	Сам.Драйвер.Пароль=Сам.ПарольАдминистратора();


	Сам.Драйвер.СнятьОтчётБезГашения();

	Результат = Сам.ОбработкаОшибокПриПечати();
	Сам.Отключить();
	Возврат Результат;
КонецФункции

Функция Внесение(СуммаВнесения) Экспорт
	Сам=Сам();

	Если Сам.Включить()=0 Тогда
		Возврат 0;
	КонецЕсли;

	Сам.Драйвер.Пароль=Сам.ПарольПользователя();

	Сам.Драйвер.Сумма1=СуммаВнесения;
	Сам.Драйвер.Внесение();

	Результат = Сам.ОбработкаОшибокПриПечати();
	Сам.Отключить();
	Возврат Результат;
КонецФункции

Функция Выплата(СуммаВыплаты) Экспорт
	Сам=Сам();

	Если Сам.Включить()=0 Тогда
		Возврат 0;
	КонецЕсли;

	Сам.Драйвер.Пароль=Сам.ПарольПользователя();

	Сам.Драйвер.Сумма1=СуммаВыплаты;
	Сам.Драйвер.Выплата();

	Результат = Сам.ОбработкаОшибокПриПечати();
	Сам.Отключить();
	Возврат Результат;
КонецФункции




Функция ПечатьЖирнойСтроки(СтрокаДляПечати) Экспорт
	Сам=Сам();
	Сам.Драйвер.СтрокаДляПечати=СтрокаДляПечати;

	Если глНастройки.ПолучитьКакЧисло("SHTRIH/NotPrintWideString")=1 Тогда
		Сам.Драйвер.ПечатьСтроки();
	Иначе
		Сам.Драйвер.ПечатьЖирнойСтроки();
	КонецЕсли;



	возврат Сам.ОбработкаОшибокПриПечати();
КонецФункции


Функция ПечатьСтроки(СтрокаДляПечати) Экспорт
	Сам=Сам();
	Сам.Драйвер.СтрокаДляПечати=СтрокаДляПечати;
	Сам.Драйвер.UseJournalRibbon=Сам.ИспользоватьКонтрольнуюЛенту;
	Сам.Драйвер.ПечатьСтроки();

	возврат Сам.ОбработкаОшибокПриПечати();
КонецФункции

Функция ПечатьСтрокиШрифтом(СтрокаДляПечати,ТипШрифта) Экспорт
	Сам=Сам();

	Сам.Драйвер.СтрокаДляПечати=СтрокаДляПечати;
	Сам.Драйвер.UseJournalRibbon=Сам.ИспользоватьКонтрольнуюЛенту;

	Если глНастройки.ПолучитьКакЧисло("SHTRIH/NotPrintStringWithFont")=1 Тогда
		Сам.Драйвер.ПечатьСтроки();
	Иначе
		Сам.Драйвер.ТипШрифта=ТипШрифта;
		Сам.Драйвер.ПечатьСтрокиДаннымШрифтом();
	КонецЕсли;

	возврат Сам.ОбработкаОшибокПриПечати();
КонецФункции


Функция ПечатьШтрихкода(СтрокаШтрихкода,ТипШтрихкода) Экспорт
	Сам=Сам();

	Если глНастройки.ПолучитьКакЧисло("SHTRIH/NotPrintBarcodes")=1 Тогда
		Возврат 1;
	КонецЕсли;
	Сам.Драйвер.Штрихкод=СтрокаШтрихкода;
	Сам.Драйвер.Пароль=Сам.ПарольПользователя();
	Сам.Драйвер.ПечатьШтрихКода();
	возврат Сам.ОбработкаОшибокПриПечати();
КонецФункции


Функция ПечатьКартинки(ИмяКартинки) Экспорт
	Сам=Сам();

	Если глНастройки.ПолучитьКакЧисло("SHTRIH/NotPrintPictures")=1 Тогда
		Возврат 1;
	КонецЕсли;

	Сам.Драйвер.Пароль=Сам.ПарольПользователя();
	//надо разобраться...

	возврат Сам.ОбработкаОшибокПриПечати();
КонецФункции

//

Функция ПолучитьСквознойНомерДокумента() Экспорт
	Сам=Сам();

	возврат Сам.Драйвер.СквознойНомерДокумента+1;
КонецФункции


//
Функция ПолучитьНомерСмены() Экспорт
	Сам=Сам();

	Если Сам.Драйвер.НомерСмены=0 Тогда

		Сам.Драйвер.Пароль=Сам.ПарольПользователя();
		Сам.Драйвер.НомерРегистра=159;
		Сам.Драйвер.ПолучитьОперационныйРегистр();
		возврат	Число(Сам.Драйвер.СодержимоеОперационногоРегистра)+1;
	КонецЕсли;
	возврат Число(Сам.Драйвер.НомерСмены)+1;
КонецФункции

Функция ПолучитьПараметрыУстройства(ОбъектУстройство=0) Экспорт
	Сам=Сам();
	Если ПустоеЗначение(ОбъектУстройство)=1 Тогда
		лУстройство=Сам.Устройство;
	Иначе
		лУстройство=ОбъектУстройство;
	КонецЕсли;

	Если Сам.СделатьТекущим(лУстройство)=0 Тогда
		Возврат 0;
	КонецЕсли;

	Сам.Драйвер.Пароль=Сам.ПарольПользователя();
	Сам.Драйвер.ПолучитьСостояниеККМ();


	Сам.Параметры.СерийныйНомер=Сам.Драйвер.ЗаводскойНомер;
	Сам.Параметры.РежимККМ=Сам.Драйвер.РежимККМ;
	Сам.Параметры.ОписаниеРежимаККМ=Сам.Драйвер.ОписаниеРежимаККМ;

	Сам.Параметры.ПодРежим=Сам.Драйвер.ECRAdvancedMode;
	Сам.Параметры.ОписаниеПодрежимаККМ=Сам.Драйвер.ECRAdvancedModeDescription;

	Сам.Параметры.НомерКассира=Сам.Драйвер.OperatorNumber;
	Сам.Параметры.ЛогическийНомер=Сам.Драйвер.LogicalNumber;
	Сам.Параметры.ВерсияПЗУ=Сам.Драйвер.ECRSoftVersion;
	Сам.Параметры.СборкаПЗУ=Сам.Драйвер.ECRBuild;
	Сам.Параметры.ДатаВнутреннегоПО=Сам.Драйвер.ECRSoftDate;
	Сам.Параметры.НомерПоследнегоЧека=Сам.Драйвер.OpenDocumentNumber;
	Сам.Параметры.Флаги=Сам.Драйвер.ECRFlags;
	Сам.Параметры.НаличиеЧековойЛенты=Сам.Драйвер.РулонЧековойЛентыЕсть;
	Сам.Параметры.НаличиеКонтрольнойЛенты=Сам.Драйвер.РулонОперационногоЖурналаЕсть;
	Сам.Параметры.ПодкладнойДокумент=Сам.Драйвер.ПодкладнойДокументЕсть;
	Сам.Параметры.ПодкладнойДокументПроходит=Сам.Драйвер.ПодкладнойДокументПроходит;
	Сам.Параметры.ПоложениеТочки=Сам.Драйвер.ПоложениеТочки;
	Сам.Параметры.НаличиеЭКЛЗ=Сам.Драйвер.ЭКЛЗЕсть;

	Сам.Параметры.ЯщикОткрыт=Сам.Драйвер.ДенежныйЯщикОткрыт;
	Сам.Параметры.КрышкаОткрыта=Сам.Драйвер.ДатчикКрышкиКорпуса;

	Сам.Параметры.ВремяФР=Сам.Драйвер.TimeStr;
	ДатаФР=Сам.Драйвер.Date;
	ДатаФР=СтрЗаменить(ДатаФР,".",РазделительСтрок);
	ДД=Число(СтрПолучитьСтроку(ДатаФР,1));
	ММ=Число(СтрПолучитьСтроку(ДатаФР,2));
	ГГ=2000+Число(СтрПолучитьСтроку(ДатаФР,3));

	Сам.Параметры.ДатаФР=Дата(ГГ,ММ,ДД);

	Сам.Параметры.ИНН=Сам.Драйвер.INN;//Только для Штрихов

	Сам.Параметры.НомерСмены=Сам.ПолучитьНомерСмены(); //Номер последней закрытой смены. До фискализации всегда =0

	Сам.Параметры.СменаОткрыта= Сам.Драйвер.СменаВФПОткрыта;


	Сам.Параметры.НомерСменыДоФискализации=0;

	Если Сам.Драйвер.НомерСмены=0 Тогда

		Сам.Драйвер.Пароль=Сам.ПарольПользователя();
		Сам.Драйвер.НомерРегистра=159;
		Сам.Драйвер.ПолучитьОперационныйРегистр();
		Сам.Параметры.НомерСменыДоФискализации=	Сам.Драйвер.СодержимоеОперационногоРегистра;
	КонецЕсли;

	Возврат Сам.ПроверкаОшибокДрайвера();
КонецФункции

Функция ПолучитьПараметрыСмены() Экспорт
	Сам=Сам();

	Сам.ПолучитьПараметрыУстройства();

	Структура=НовыйОбъект("ПараметрыКассовойСмены");

	Структура.НомерСмены=Сам.Параметры.НомерСмены;
	Структура.СерийныйНомер=Сам.Параметры.СерийныйНомер;
	Структура.Дата=Сам.Параметры.ДатаФР;
	Структура.Время=Сам.Параметры.ВремяФР;


	Возврат Структура;
КонецФункции

Функция СуммаНаличности() Экспорт
	Сам=Сам();

	Если Сам.ВключениеОборудования()=0 Тогда
		Возврат 0;
	КонецЕсли;

	Сам.Драйвер.Пароль=Сам.ПарольПользователя();
	Сам.Драйвер.НомерРегистра=241;

	Сам.Драйвер.GetCashReg();
	Если Сам.ПроверкаОшибокДрайвера()=1 Тогда
	    возврат Сам.Драйвер.СодержимоеДенежногоРегистра;
	КонецЕсли;  //
	возврат 0;
КонецФункции

Функция СуммаВнесенийЗаСмену() Экспорт
	Сам=Сам();
	Сам.Драйвер.Пароль=Сам.ПарольПользователя();
	Сам.Драйвер.НомерРегистра=242;

	Сам.Драйвер.GetCashReg();
	Если Сам.ПроверкаОшибокДрайвера()=1 Тогда
	    возврат Сам.Драйвер.СодержимоеДенежногоРегистра;
	КонецЕсли;  //
	возврат 0;
КонецФункции

Функция СуммаВыплатЗаСмену() Экспорт
	Сам=Сам();
	Сам.Драйвер.Пароль=Сам.ПарольПользователя();
	Сам.Драйвер.НомерРегистра=243;

	Сам.Драйвер.GetCashReg();
	Если Сам.ПроверкаОшибокДрайвера()=1 Тогда
	    возврат Сам.Драйвер.СодержимоеДенежногоРегистра;
	КонецЕсли;  //
	возврат 0;
КонецФункции

Функция НеобнуляемаяСуммаДоФискализации() Экспорт
	Сам=Сам();
	Сам.Драйвер.Пароль=Сам.ПарольПользователя();
	Сам.Драйвер.НомерРегистра=244;

	Сам.Драйвер.GetCashReg();
	Если Сам.ПроверкаОшибокДрайвера()=1 Тогда
	    возврат Сам.Драйвер.СодержимоеДенежногоРегистра;
	КонецЕсли;  //
	возврат 0;
КонецФункции

Функция ПолучитьНомерККМ() Экспорт
	Сам=Сам();
	Сам.ПолучитьПараметрыУстройства();
	возврат Сам.Параметры.СерийныйНомер;
КонецФункции



Функция ПолучитьНомерПродажи() Экспорт

	Сам=Сам();
	Сам.Драйвер.Пароль=Сам.ПарольПользователя();
	Сам.Драйвер.НомерРегистра=148;

	Сам.Драйвер.ПолучитьОперационныйРегистр();
	Если Сам.ПроверкаОшибокДрайвера()=1 Тогда
	    возврат Сам.Драйвер.СодержимоеОперационногоРегистра;
	КонецЕсли;  //
	возврат 0;
КонецФункции

Функция ПолучитьНомерВозвратаПродажи() Экспорт
	Сам=Сам();
	Сам.Драйвер.Пароль=Сам.ПарольПользователя();
	Сам.Драйвер.НомерРегистра=148;

	Сам.Драйвер.ПолучитьОперационныйРегистр();
	Если Сам.ПроверкаОшибокДрайвера()=1 Тогда
	    возврат Сам.Драйвер.СодержимоеОперационногоРегистра;
	КонецЕсли;  //
	возврат 0;
КонецФункции

Функция ПолучитьНомерПокупки() Экспорт
	Сам=Сам();
	Сам.Драйвер.Пароль=Сам.ПарольПользователя();
	Сам.Драйвер.НомерРегистра=148;
	Сам.Драйвер.ПолучитьОперационныйРегистр();
	Если Сам.ПроверкаОшибокДрайвера()=1 Тогда
	    возврат Сам.Драйвер.СодержимоеОперационногоРегистра;
	КонецЕсли;  //
	возврат 0;
КонецФункции

Функция ПолучитьНомерВозвратаПокупки() Экспорт
	Сам=Сам();
	Сам.Драйвер.Пароль=Сам.ПарольПользователя();
	Сам.Драйвер.НомерРегистра=148;

	Сам.Драйвер.ПолучитьОперационныйРегистр();
	Если Сам.ПроверкаОшибокДрайвера()=1 Тогда
	    возврат Сам.Драйвер.СодержимоеОперационногоРегистра;
	КонецЕсли;  //
	возврат 0;
КонецФункции


Функция ПолучитьНомерОтчетаСГашением() Экспорт
	Сам=Сам();
	Сам.Драйвер.Пароль=Сам.ПарольПользователя();
	Сам.Драйвер.НомерРегистра=157;

	Сам.Драйвер.ПолучитьОперационныйРегистр();
	Если Сам.ПроверкаОшибокДрайвера()=1 Тогда
	    возврат Сам.Драйвер.СодержимоеОперационногоРегистра;
	КонецЕсли;  //
	возврат 0;
КонецФункции


Функция ПолучитьНомерCменногоОтчетаСГашениемДоФискализации() Экспорт
	Сам=Сам();
	Сам.Драйвер.Пароль=Сам.ПарольПользователя();
	Сам.Драйвер.НомерРегистра=155;

	Сам.Драйвер.ПолучитьОперационныйРегистр();
	Если Сам.ПроверкаОшибокДрайвера()=1 Тогда
	    возврат Сам.Драйвер.СодержимоеОперационногоРегистра;
	КонецЕсли;  //
	возврат 0;
КонецФункции


Функция ПолучитьНомерОтчетаБезГашения() Экспорт
	Сам=Сам();
	Сам.Драйвер.Пароль=Сам.ПарольПользователя();
	Сам.Драйвер.НомерРегистра=154;

	Сам.Драйвер.ПолучитьОперационныйРегистр();
	Если Сам.ПроверкаОшибокДрайвера()=1 Тогда
	    возврат Сам.Драйвер.СодержимоеОперационногоРегистра;
	КонецЕсли;  //
	возврат 0;
КонецФункции

Функция ПолучитьНомерВнесения() Экспорт
	Сам=Сам();
	Сам.Драйвер.Пароль=Сам.ПарольПользователя();
	Сам.Драйвер.НомерРегистра=151;

	Сам.Драйвер.ПолучитьОперационныйРегистр();
	Если Сам.ПроверкаОшибокДрайвера()=1 Тогда
	    возврат Сам.Драйвер.СодержимоеОперационногоРегистра;
	КонецЕсли;  //
	возврат 0;
КонецФункции

Функция ПолучитьНомерВыплаты() Экспорт
	Сам=Сам();
	Сам.Драйвер.Пароль=Сам.ПарольПользователя();
	Сам.Драйвер.НомерРегистра=152;

	Сам.Драйвер.ПолучитьОперационныйРегистр();
	Если Сам.ПроверкаОшибокДрайвера()=1 Тогда
	    возврат Сам.Драйвер.СодержимоеОперационногоРегистра;
	КонецЕсли;  //
	возврат 0;
КонецФункции


Функция КоличествоВнесенийЗаСмену() Экспорт
	Сам=Сам();
	Сам.Драйвер.Пароль=Сам.ПарольПользователя();
	Сам.Драйвер.НомерРегистра=149;

	Сам.Драйвер.ПолучитьОперационныйРегистр();
	Если Сам.ПроверкаОшибокДрайвера()=1 Тогда
	    возврат Сам.Драйвер.СодержимоеОперационногоРегистра;
	КонецЕсли;  //
	возврат 0;
КонецФункции

Функция КоличествоВыплатЗаСмену() Экспорт
	Сам=Сам();
	Сам.Драйвер.Пароль=Сам.ПарольПользователя();
	Сам.Драйвер.НомерРегистра=150;

	Сам.Драйвер.ПолучитьОперационныйРегистр();
	Если Сам.ПроверкаОшибокДрайвера()=1 Тогда
	    возврат Сам.Драйвер.СодержимоеОперационногоРегистра;
	КонецЕсли;  //
	возврат 0;
КонецФункции

Функция КоличествоОтмененныхДокументов() Экспорт
	Сам=Сам();
	Сам.Драйвер.Пароль=Сам.ПарольПользователя();
	Сам.Драйвер.НомерРегистра=153;

	Сам.Драйвер.ПолучитьОперационныйРегистр();
	Если Сам.ПроверкаОшибокДрайвера()=1 Тогда
	    возврат Сам.Драйвер.СодержимоеОперационногоРегистра;
	КонецЕсли;  //
	возврат 0;
КонецФункции

Функция НомерОбщегоГашения() Экспорт
	Сам=Сам();
	Сам.Драйвер.Пароль=Сам.ПарольПользователя();
	Сам.Драйвер.НомерРегистра=156;

	Сам.Драйвер.ПолучитьОперационныйРегистр();
	Если Сам.ПроверкаОшибокДрайвера()=1 Тогда
	    возврат Сам.Драйвер.СодержимоеОперационногоРегистра;
	КонецЕсли;  //
	возврат 0;
КонецФункции

Функция НомерПолногоФискальногоОтчета()

	Сам=Сам();
	Сам.Драйвер.Пароль=Сам.ПарольПользователя();
	Сам.Драйвер.НомерРегистра=157;

	Сам.Драйвер.ПолучитьОперационныйРегистр();
	Если Сам.ПроверкаОшибокДрайвера()=1 Тогда
	    возврат Сам.Драйвер.СодержимоеОперационногоРегистра;
	КонецЕсли;  //
	возврат 0;
КонецФункции


Функция НомерCокращенногоФискальногоОтчета()

	Сам=Сам();
	Сам.Драйвер.Пароль=Сам.ПарольПользователя();
	Сам.Драйвер.НомерРегистра=158;

	Сам.Драйвер.ПолучитьОперационныйРегистр();
	Если Сам.ПроверкаОшибокДрайвера()=1 Тогда
	    возврат Сам.Драйвер.СодержимоеОперационногоРегистра;
	КонецЕсли;  //
	возврат 0;
КонецФункции


Функция КоличествоАктивизацийЭКЛЗ() Экспорт

	Сам=Сам();
	Сам.Драйвер.Пароль=Сам.ПарольПользователя();
	Сам.Драйвер.НомерРегистра=164;

	Сам.Драйвер.ПолучитьОперационныйРегистр();
	Если Сам.ПроверкаОшибокДрайвера()=1 Тогда
	    возврат Сам.Драйвер.СодержимоеОперационногоРегистра;
	КонецЕсли;  //
	возврат 0;
КонецФункции


//максимальное количество символов в строке чека ККМ
Функция ПолучитьДлинуСтрокиЧека() Экспорт
	возврат Сам().Данные.ДлинаСтроки;
КонецФункции


Функция ПрочитатьСчетчики() Экспорт
	Сам=Сам();
	Структура=СоздатьОбъект("Структура");
	Инд=0;
	Для Инд=1 по 255 Цикл
	    Сам.Драйвер.Пароль=Сам.ПарольПользователя();
		Сам.Драйвер.НомерРегистра=Инд;

		Сам.Драйвер.ПолучитьОперационныйРегистр();

		Если Сам.ПроверкаОшибокДрайвера()=1 Тогда
		    Структура.Вставить("_"+Инд+"_"+СтрЗаменить(Сам.Драйвер.НазваниеОперационногоРегистра," ","_"),Сам.Драйвер.СодержимоеОперационногоРегистра);
		Иначе
			Возврат Структура;
		КонецЕсли;  //
	КонецЦикла;
	Возврат Структура;
КонецФункции


Функция ПрочитатьДенежныеСчетчики() Экспорт
	Сам=Сам();
	Структура=СоздатьОбъект("Структура");
	Инд=0;
	Для Инд=1 по 255 Цикл
	    Сам.Драйвер.Пароль=Сам.ПарольПользователя();
		Сам.Драйвер.НомерРегистра=Инд;

		Сам.Драйвер.GetCashReg();

		Если Сам.ПроверкаОшибокДрайвера()=1 Тогда
		    Структура.Вставить("_"+Инд+"_"+СтрЗаменить(Сам.Драйвер.НазваниеДенежногоРегистра," ","_"),Сам.Драйвер.СодержимоеДенежногоРегистра);
		Иначе
			Возврат Структура;
		КонецЕсли;  //
	КонецЦикла;
	Возврат Структура;
КонецФункции


Функция ОткрытьЧек(ТипЧека) Экспорт
	Сам=Сам();

	Если Сам.ПроверитьГотовность()=0 Тогда
		Возврат 0;
	КонецЕсли;

	Сам.Драйвер.Пароль=Сам.ПарольПользователя();
	Если ВРЕГ(ТипЧека)="ПРОДАЖА" Тогда
		Сам.Драйвер.ТипЧека=0;
	ИначеЕсли ВРЕГ(ТипЧека)="ПОКУПКА" Тогда
		Сам.Драйвер.ТипЧека=1;
	ИначеЕсли ВРЕГ(ТипЧека)="ВОЗВРАТ" Тогда
		Сам.Драйвер.ТипЧека=2;
	ИначеЕсли ВРЕГ(ТипЧека)="ВОЗВРАТПОКУПКИ" Тогда
		Сам.Драйвер.ТипЧека=3;
	КонецЕсли;

	Сам.Драйвер.ОткрытьЧек();

	КодОшибки = Сам.КодОшибкиДрайвера();
	ТекущийРежимККМ="";
	ОписаниеОшибкиККМ="";
	Если Сам.ПроверкаОшибокДрайвера()=1 Тогда
		//ошибок нет
		Возврат 1;
	Иначе
		ОписаниеОшибкиККМ=Сам.ПоследняяОшибка();

		Сам.ПолучитьПараметрыУстройства();

		ТекущийРежимККМ="Номер режима="+Сам.Параметры.РежимККМ+"
		|Описание режима="+Сам.Параметры.ОписаниеРежимаККМ;
		глДебаг(ТекущийРежимККМ,"SHTRIH ОткрытьЧек");
	КонецЕсли;

	ТекстОшибки="Код ошибки ФР = "+КодОшибки+"
	|Описание ошибки ФР:"+ОписаниеОшибкиККМ+"
	|Текущий режим ККМ :"+ТекущийРежимККМ;
	Сам.УстановитьКодИОшибку(1006,ТекстОшибки);
	глДебаг(ТекстОшибки,"SHTRIH ОткрытьЧек");
	Возврат 0;
КонецФункции


Функция ЗакрытьЧек(Чек) Экспорт

	Сам=Сам();
	Данные=Чек.Данные;

	Пароль=Сам.ПарольПользователя();
	Сам.Драйвер.Пароль=Пароль;
	Сам.Драйвер.Количество=1;
	Сам.Драйвер.Цена=Данные.СуммаБезСкидки;
	Сам.Драйвер.Отдел=0;//0-1 секция
	Сам.Драйвер.СтрокаДляПечати="";
	Если Данные.КодОперации=0 Тогда
		//это продажа
		Сам.Драйвер.Продажа();
	ИначеЕсли Данные.КодОперации=1 Тогда
		//Это возврат
		Сам.Драйвер.ВозвратПродажи();
	Иначе
		//это непонятно что
		Сам.УстановитьКодИОшибку(1005,"Неизвестный код операции чека ККМ. КодОперации="+Данные.КодОперации);
		Возврат 0;
	КонецЕсли;


	Если Данные.СуммаСкидки>0 Тогда
		Сам.Драйвер.Пароль=Пароль;
		Сам.Драйвер.Сумма1=Данные.СуммаСкидки;
		Сам.Драйвер.Скидка();
	ИначеЕсли Данные.СуммаСкидки<0 Тогда
		Сам.Драйвер.Пароль=Пароль;
		Сам.Драйвер.Сумма1=-Данные.СуммаСкидки;
		Сам.Драйвер.Надбавка();
	КонецЕсли;  //

	Если Данные.СуммаНаценки>0 Тогда
		Сам.Драйвер.Пароль=Пароль;
		Сам.Драйвер.Сумма1=Данные.СуммаСкидки;
		Сам.Драйвер.Надбавка();
	ИначеЕсли Данные.СуммаНаценки<0 Тогда
		Сам.Драйвер.Пароль=Пароль;
		Сам.Драйвер.Сумма1=-Данные.СуммаНаценки;
		Сам.Драйвер.Скидка();
	КонецЕсли;  //

	Сам.Драйвер.Пароль=Пароль;
	Сам.Драйвер.СтрокаДляПечати="";
	Сам.Драйвер.Сумма1=Чек.ОплатаНаличными;
	Сам.Драйвер.Сумма2=Чек.ОплатаКредит;
	Сам.Драйвер.Сумма3=Чек.ОплатаТарой;
	Сам.Драйвер.Сумма4=Чек.ОплатаКартой;

	НомерДок=0;

	//Пробъем чек
	Сам.Драйвер.ЗакрытьЧек();
	Результат = Сам.ОбработкаОшибокПриПечати();
	Если Результат=1 Тогда
		Возврат 1;
	КонецЕсли;

	Возврат 0;
КонецФункции

//режет чековую ленту
//ТипОтрезки - 0 (по умолчанию) полная отрезка
//             1 - неполная отрезка
Функция ОтрезатьЛенту(ТипОтрезки=0) Экспорт
	Сам=Сам();
	Результат = Сам.ОбработкаОшибокПриПечати();
	Если Результат=1 Тогда
		Сам.Драйвер.ИспользоватьЧековуюЛенту=1;
		Сам.Драйвер.ИспользоватьОперационныйЖурнал=0;
		Сам.Драйвер.ИспользоватьПодкладнойДокумент=0;
		Сам.Драйвер.КоличествоСтрок=5;
		Сам.Драйвер.ПродвинутьДокумент();
	Иначе
		Возврат 0;
	КонецЕсли;

	Сам.Драйвер.Пароль=Сам.ПарольПользователя();
	Сам.Драйвер.ТипОтрезки=ТипОтрезки;
	Сам.Драйвер.CutCheck();
	Возврат 1;
КонецФункции


Функция ОткрытьДенежныйЯщик() Экспорт
	Сам=Сам();
	Сам.Драйвер.Пароль=Сам.ПарольПользователя();
	Сам.Драйвер.НомерДенежногоЯщика=0;
	Сам.Драйвер.ОткрытьДенежныйЯщик();
	возврат Сам.ОбработкаОшибокПриПечати();
КонецФункции

//вызывать эту функцию, если ККМ в состоянии ожидания продолжения печати. Обычно после обрыва ленты
Функция ПродолжитьПечать() Экспорт
	Сам=Сам();
	Сам.Драйвер.Пароль=Сам.ПарольПользователя();
	Сам.Драйвер.ПродолжитьПечать();

	возврат Сам.КодОшибкиДрайвера();
КонецФункции

//вызов диалога настройки свойств драйвера
Процедура НастройкаСвойств() Экспорт
	Сам=Сам();
	Если Сам.СделатьТекущим()=1 Тогда
		Сам.Драйвер.Пароль=Сам.ПарольПользователя();
		Сам.Драйвер.НастройкаСвойств();
	Иначе
		Предупреждение("Не удалось сделать текущим");
	КонецЕсли;

КонецПроцедуры


