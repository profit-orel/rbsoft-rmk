//Конфигурация для платформы "1С:Предприятие 7.7" РБ-Софт:Рабочее место кассира.
//Версия 4.57 от 05.06.11 23:24:52
//(c) Баинов Евгений, ООО "РБ-Софт" 2006-2011 г.Улан-Удэ, ул.Балтахинова,17Е,офис 215
//e-mail: bainov@rb-soft.ru  icq: 73718937, телефоны: (3012) 440-357, 278-228
//Сайт проекта: http://code.google.com/p/rbsoft-rmk/
//_______________________________________________________________________________________
//Класс ОбменДанными
//_______________________________________________________________________________________
Перем _База Экспорт;

Перем ПериодичностьПроверки экспорт;
Перем Интерфейс Экспорт; //объект-интерфейс

Перем ZIP Экспорт; //объект архиватор


Функция Этот(Конт) 		Возврат Конт; 			КонецФункции
Функция Сам() 			Возврат Этот(Контекст) 	КонецФункции


Процедура Конструктор()
    _База = Этот(Контекст).ПолучитьБазовыйКласс("Объект");
	ПериодичностьПроверки=30;


	ZIP = СоздатьОбъект("AddIn.ZIP");
	ZIP.ПутьКБиблиотекам = глОбработатьМакроСтроку("%DLL%");


	Сам=Сам();
	Сам.Инит();
КонецПроцедуры

Процедура Деструктор()
	ZIP=0;
КонецПроцедуры


Функция Инит() Экспорт

	ВидИнтерфейса="РБСофтDBF";

	Сам=Сам();
	Значение=глНастройки.Получить("EXCHANGE/TYPE");
	Если ПустоеЗначение(Значение)=0 Тогда
		ВидИнтерфейса=ВРЕГ(Значение);
	КонецЕсли;  //ПустоеЗначение(Значение)=1

	ПериодичностьПроверки=глНастройки.ПолучитьКакЧисло("EXCHANGE/TestOfData");
	Попытка

		Интерфейс=СоздатьОбъект("ИнтерфейсОбменаДанными."+ВидИнтерфейса);

		Возврат Интерфейс.Инит(Сам);
	Исключение
		Сам.УстановитьОшибку("Не удалось инициализировать интерфейс обмена данными "+ВидИнтерфейса+"
		|"+ОписаниеОшибки());
		Возврат 0;
	КонецПопытки;

КонецФункции

//_____________________________________________________________________________
//Процедура ОтключитьожиданиеЗагрузки
//Назначение:
//Отключает периодическую фоновую проверку входящих данных
//Параметры:
//нет
//
Процедура ОтключитьОжиданиеЗагрузки() экспорт
Перем Сервис;
	Сервис=СоздатьОбъект("Сервис");
	Сервис.ОбработкаОжидания("",0);
КонецПроцедуры //ОтключитьожиданиеЗагрузки

//_____________________________________________________________________________
//Процедура ОжтданиеЗагрузки
//Назначение:
//Включает периодическую фоновую проверку входящих данных
//Параметры:
//
//
Процедура ВключитьОжиданиеЗагрузки() экспорт
Перем Сервис;
	Сервис=СоздатьОбъект("Сервис");
	Сервис.ОбработкаОжидания("ОжиданиеЗагрузки",ПериодичностьПроверки*1000);
КонецПроцедуры //ОжтданиеЗагрузки



//возврат -1 - каталог заблокирован
//1- данные есть
//0- данных нет
Функция ЕстьДанныеДляЗагрузки() Экспорт
	Возврат Интерфейс.ЕстьДанныеДляЗагрузки() ;
КонецФункции	// глЕстьДанныеДляЗагрузки


//должна проверять текущее состояние загрузки и возвращать процент выполнения
Функция ПроцентВыполненияЗагрузки() Экспорт
	Возврат Интерфейс.ПроцентВыполненияЗагрузки();
КонецФункции

//Текстовое описание состояния обмена
Функция СостояниеОбмена() Экспорт
	Возврат Интерфейс.СостояниеОбмена();
КонецФункции

Функция ПроцессЗавершен() Экспорт
	Возврат Интерфейс.ПроцессЗавершен();
КонецФункции

// проверяет наличие данных и загружает данные
// если данных нет то возвращается 0
//Режим=1 - выводить диалоги
//0 - делать работу молча

//возврат 1 - данные загружены

Функция ЗагрузкаДанных(Режим=0) Экспорт



	Результат=0;
	Сам=Сам();

	Состояние("Проверка загрузки данных...");
	Если Режим=0 Тогда
		Если ЕстьДанныеДляЗагрузки()=1 Тогда
			ОтключитьОжиданиеЗагрузки();
			ОписаниеОшибкиЗагрузки="";

			Результат= Интерфейс.ЗагрузитьДанные();

			ВключитьОжиданиеЗагрузки();
		Иначе
			Сам.УстановитьОшибку("Нет данных для загрузки.");
			Результат=0;
		КонецЕсли;

	Иначе
		Если ЕстьДанныеДляЗагрузки()=1 Тогда
			ОтключитьОжиданиеЗагрузки();
			ОписаниеОшибкиЗагрузки="";

				Рез=глВопрос("Есть данные для загрузки.
				|Загрузить?","Да+Нет",10);
				Если (ВРЕГ(Рез)="ДА")Или(ВРЕГ(Рез)="ТАЙМАУТ") ИЛИ (Рез="-1") Тогда


					Результат=Сам.ОткрытьФормуОбъектаМодально("ФормаЗагрузки");

					Если Результат=1 Тогда
						глПредупреждение("Данные успешно загружены",3);
					Иначе


						глПредупреждение("Данные НЕ ЗАГРУЖЕНЫ!
						|"+Сам.ПоследняяОшибка(),10);
					КонецЕсли;
				КонецЕсли;  //

			ВключитьОжиданиеЗагрузки();
		Иначе
			Сам.УстановитьОшибку("Нет данных для загрузки.");
			глПредупреждение(Сам.ПоследняяОшибка(),10);
			Результат=0;
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции	// глЗагрузкаДанных



Функция ВыгрузкаДанных(ККМ,ПараметрыВыгрузки) Экспорт
	Сам=Сам();
	Результат=Интерфейс.ВыгрузкаДанных(ККМ,ПараметрыВыгрузки);
	Если Результат=0 Тогда
		Сам.УстановитьОшибку(Интерфейс.ПоследняяОшибка());
	Иначе
		Сам.СброситьОшибку();
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция УстановитьЭтапЗагрузки(НаименованиеОперации,ПроцентВыполнения=0) Экспорт
	Возврат Интерфейс.УстановитьЭтапЗагрузки(НаименованиеОперации,ПроцентВыполнения);
КонецФункции

//Возвращает текущее состояние обмена в виде таблицы значений
Функция ПолучитьТаблицуЗагрузки() Экспорт
	Возврат Интерфейс.ПолучитьТаблицуЗагрузки() ;
КонецФункции