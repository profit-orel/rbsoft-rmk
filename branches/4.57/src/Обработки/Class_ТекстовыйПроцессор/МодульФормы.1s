//Конфигурация для платформы "1С:Предприятие 7.7" РБ-Софт:Рабочее место кассира.
//Версия 4.43 от 19.07.10 20:54:20
//Назначение: Автоматизация POS-узлов в магазинах (Point of sale).
//(c) Баинов Евгений, ООО "РБ-Софт" 2006, г.Улан-Удэ, проспект 50-летия Октября,21А,офис 110 
//e-mail: bainov@rb-soft.ru  icq: 73718937, телефоны: (3012) 44-03-57, 44-76-42, 44-86-58
//---------------------------------------------------------------------------------------
//Данная программа является свободным программным обеспечением.
//Вы вправе распространять ее и/или модифицировать в соответствии с условиями версии 2 
//либо по вашему выбору с условиями более поздней версии Стандартной Общественной Лицензии GNU,
//опубликованной Free Software Foundation. 
//Мы распространяем данную программу в надежде на то, что она будет вам полезной, 
//однако НЕ ПРЕДОСТАВЛЯЕМ НА НЕЕ НИКАКИХ ГАРАНТИЙ, 
//в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
//и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ.
//Для получения более подробной информации ознакомьтесь со Стандартной Общественной Лицензией GNU.
//Вместе с данной программой вы должны были получить экземпляр Стандартной Общественной Лицензии GNU.
//Если вы его не получили, сообщите об этом в Free Software Foundation, Inc.,
//59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//_______________________________________________________________________________________
//Имя модуля:
// <Вставить имя модуля>
//_______________________________________________________________________________________
//Разработчик: Баинов Евгений, e-mail: bainov@rb-soft.ru , icq: 73718937
//_______________________________________________________________________________________
//Назначение модуля:
// <Вставить описание модуля>
//
//_______________________________________________________________________________________
Перем _База Экспорт;
Перем ИмяФайлаМакетов Экспорт;


Функция Этот(Конт) 		Возврат Конт; 			КонецФункции
Функция Сам() 			Возврат Этот(Контекст) 	КонецФункции




//------------------------------------ ------------------------------------
Процедура Конструктор()

	_База = Этот(Контекст).ПолучитьБазовыйКласс("Объект");
	ИмяФайлаМакетов=КаталогИБ();
КонецПроцедуры // Конструктор


//------------------------------------ ------------------------------------
Процедура Деструктор()

КонецПроцедуры // Деструктор




//создает пустой макет печати
Функция СоздатьМакетПечати() Экспорт
	Структура=СоздатьОбъект("Структура");
    Структура.Вставить("ПараметрВысота",0);
	Структура.Вставить("ПараметрШирина",50);

	возврат Структура;
КонецФункции

//******************************************************************************
// ДополнитьСтрокуЛ(Стр,Чем,Длина)
//
// Параметры:
//  Стр   - исходная строка
//  Чем   - символ, которым дополняем строку
//  Длина - длина, до которой заполняем строку
//
// Возвращаемое значение:
//  Результирующая строка
//
// Описание:
//  Дополняет передаваемую строку Стр символами Чем до строки длиной Длина
//  слева
//
Функция ДополнитьСтрокуЛ(Стр,Чем,Длина) Экспорт
	Рез=Стр;
	Пока СтрДлина(Рез)<Длина Цикл
	    Рез=Чем+Рез;
	КонецЦикла;
	Возврат Рез;
КонецФункции

//Получает строку Стр и длину результирующей строки Длина
//на выход получаем список значений со строками с длиной не более чем параметр Длина
//строки получаются обрубанием строки Стр на строки с длиной Длина

Функция РазбитьСтроку(_Стр,Длина) экспорт
	Стр=_Стр;
	сп=СоздатьОбъект("СписокЗначений");
	Пока СтрДлина(Стр)>Длина Цикл
		Стр1=Лев(Стр,Длина);
		Сп.ДобавитьЗначение(Стр1);
		Стр=Сред(Стр,Длина+1);
	КонецЦикла;
	Если СтрДлина(Стр)>0 Тогда
		Сп.ДобавитьЗначение(Стр);
	Иначе
		Если Сп.РазмерСписка()=0 Тогда
			Сп.ДобавитьЗначение(Стр);
		КонецЕсли;
	КонецЕсли;
	возврат Сп;
КонецФункции

//должна вычислить значения логического выражения ТекстУсловия и вернуть 0 или 1
// 0 - выражение ЛОЖЬ
// 1 - выражение ИСТИНА
Функция ВычислитьЗначениеУсловия(ТекстУсловия,СтруктураПараметров)
	Сам=Сам();
	Инд=0;
	Условие=СтрЗаменить(ТекстУсловия," ","");
	ИмяПоля="";
	ЗнакОперации="";
	ЗначениеСправа="";

	ЧитаемЛевуюЧасть=1;
	ЧитаемОперацию=0;

	Для Инд=1 По СтрДлина(Условие) Цикл
		Символ=Сред(Условие,Инд,1);
		Если ЧитаемЛевуюЧасть=1 Тогда
			Если Найти("=<>",Символ)>0 Тогда
				ЧитаемЛевуюЧасть=0;
				ЧитаемОперацию=1;
				ЗнакОперации=ЗнакОперации+Символ;
			Иначе
				ИмяПоля=ИмяПоля+Символ;
			КонецЕсли;
		ИначеЕсли ЧитаемОперацию=1 Тогда
			Если Найти("=<>",Символ)>0 Тогда
				ЧитаемОперацию=1;
				ЗнакОперации=ЗнакОперации+Символ;
			Иначе
				ЧитаемОперацию=0;
				ЗначениеСправа=ЗначениеСправа+Символ;
			КонецЕсли;
		Иначе

			Если Найти("=<>",Символ)>0 Тогда
				Сам.УстановитьКодИОшибку(2010,"Неверное описание условия"+ТекстУсловия);
				возврат 0;
			Иначе
				ЧитаемОперацию=0;
				ЗначениеСправа=ЗначениеСправа+Символ;
			КонецЕсли;
	    КонецЕсли;
	КонецЦикла;

	Если (ИмяПоля="")Или((ЗначениеСправа="")И(ЗнакОперации<>"")) Тогда
		Сам.УстановитьКодИОшибку(2010,"Неверное описание условия "+ТекстУсловия);
		Возврат 0;
	ИначеЕсли (ЗнакОперации="")И(ИмяПоля<>"") Тогда
		//проверить на пустоту поля объекта Чек с именем ИмяПоля
		ЗначениеПоля="";
		Если СтруктураПараметров.Свойство(ИмяПоля,ЗначениеПоля)=1 Тогда
			Если ПустоеЗначение(ЗначениеПоля)=1 Тогда
				Возврат 0;
			Иначе
				Возврат 1;
			КонецЕсли;
		КонецЕсли;

		Возврат 0;

	Иначе
		ЗначениеПоляСлева=0;
		Если СтруктураПараметров.Свойство(ИмяПоля,ЗначениеПоляСлева)=0 Тогда
			Сам.УстановитьКодИОшибку(2011,"Нет поля """+ИмяПоля+""" в переданной структуре параметров."+ТекстУсловия);
			Возврат 0;
		Иначе
			Если Лев(ЗначениеСправа,1)="""" Тогда

				Если Прав(ЗначениеСправа,1)="""" Тогда
					ЗначениеПоляСправа=Сред(ЗначениеСправа,2,СтрДлина(ЗначениеСправа)-2);
				Иначе
					Сам.УстановитьКодИОшибку(2012,"Неверное описание значения строкового параметра. Ожидается закрывающая кавычка"+ТекстУсловия);
					Возврат 0;
				КонецЕсли;
			Иначе
				Попытка
					ЗначениеПоляСправа=Число(ЗначениеСправа);
				Исключение
					//справа не число
					//если строка- то считаем ее именем поля структуры
					ЗначениеПоляСправа="";
					Если СтруктураПараметров.Свойство(ЗначениеСправа,ЗначениеПоляСправа)=0 Тогда
						Сам.УстановитьКодИОшибку(2013,"Неверное описание имени поля в правой части выражения условия."+ТекстУсловия);
						возврат 0;
					КонецЕсли;

				КонецПопытки;
			КонецЕсли;

			Если ТипЗначенияСтр(ЗначениеПоляСправа)="Число" Тогда
				Попытка
					ЗначениеПоляСлева=Число(ЗначениеПоляСлева);
				Исключение
					Сам.УстановитьКодИОшибку(2014,"Неверное описание поля в левой части выражения условия. Не переводится в число строка """+ЗначениеПоляСлева+""""+ТекстУсловия);
					возврат 0;
				КонецПопытки;


			КонецЕсли;

			Если ЗнакОперации="=" Тогда
				Если ЗначениеПоляСлева=ЗначениеПоляСправа Тогда
					Возврат 1;
				Иначе
					Возврат 0;
				КонецЕсли;
			ИначеЕсли ЗнакОперации="<" Тогда
				Если ЗначениеПоляСлева<ЗначениеПоляСправа Тогда
					Возврат 1;
				Иначе
					Возврат 0;
				КонецЕсли;
			ИначеЕсли ЗнакОперации=">" Тогда
				Если ЗначениеПоляСлева>ЗначениеПоляСправа Тогда
					Возврат 1;
				Иначе
					Возврат 0;
				КонецЕсли;
			ИначеЕсли ЗнакОперации="<=" Тогда
				Если ЗначениеПоляСлева<=ЗначениеПоляСправа Тогда
					Возврат 1;
				Иначе
					Возврат 0;
				КонецЕсли;
			ИначеЕсли ЗнакОперации=">=" Тогда
				Если ЗначениеПоляСлева>=ЗначениеПоляСправа Тогда
					Возврат 1;
				Иначе
					Возврат 0;
				КонецЕсли;
			ИначеЕсли ЗнакОперации="<>" Тогда
				Если ЗначениеПоляСлева<>ЗначениеПоляСправа Тогда
					Возврат 1;
				Иначе
					Возврат 0;
				КонецЕсли;
			Иначе
				Сам.УстановитьКодИОшибку(2015,"Неверный логический оператор."+ТекстУсловия);
				Возврат 0;
			КонецЕсли;


		КонецЕсли;
	КонецЕсли;
	Сам.УстановитьКодИОшибку(2016,"Не удалось обработать логическое выражение: "+ТекстУсловия);
	возврат 0;
КонецФункции


//создает результирующую таблицу строк на основе описания текстовой секции с именем имяСекции из структуры Макет
//Данные для заполнения полей берутся из структуры СтруктураПараметров

Функция УстановитьПараметрыСекции(Макет,ИмяСекции,СтруктураПараметров) Экспорт
Перем ОписательСекции;
	Сам=Сам();
	ТЗ_Строки=Сам.СоздатьОписательТекста();
	ОписательСекции="";
	Если Макет.Свойство(ИмяСекции,ОписательСекции)=0 Тогда
		//нет такой секции
		возврат ТЗ_Строки;
	КонецЕсли;

	ЗначениеВыравнивания="ВЛЕВО";
	ШиринаСтроки=Число(Макет.ПараметрШирина);
	НомерШрифта=0;
	ПечататьЖирным=0;

	ВыводитьШтрихкод=0;
	ВыводитьКартинку=0;
	ВыводитьТекст=1;

	ОписаниеПараметровСтроки="";
	Если Лев(ОписательСекции,1)="{" Тогда
		//строка секции начинается с описания параметров выводимой строки

		Инд=1;
		ЗакончилиЧтениеПараметров=0;
		ДлинаСтрокиОписателя=СтрДлина(ОписательСекции);
		Пока ЗакончилиЧтениеПараметров=0 Цикл
		   Инд=Инд+1;

		   Если Инд>ДлинаСтрокиОписателя Тогда
		   		Прервать;
		   КонецЕсли;
		   Символ=Сред(ОписательСекции,Инд,1);
		   Если Символ="}" Тогда
				ЗакончилиЧтениеПараметров=1;
			Иначе

				ОписаниеПараметровСтроки=ОписаниеПараметровСтроки+Символ;
		   КонецЕсли;
		КонецЦикла;
		Если ЗакончилиЧтениеПараметров=0 Тогда
			Сам.УстановитьКодИОшибку(2001,"Не завершено описание параметров секции. Ожидалась закрывающая скобка ""}""");
			возврат ТЗ_Строки;
		КонецЕсли;
		ОписательСекции=Сред(ОписательСекции,СтрДлина(ОписаниеПараметровСтроки)+3);
		//параметры разделяются точкой с запятой. Поэтому разделяем параметры для обработки...
		ОписаниеПараметровСтроки=СтрЗаменить(ОписаниеПараметровСтроки,";",РазделительСтрок);
		//обрабатываем каждый параметр в отдельности
		Для Инд=1 По СтрКоличествоСтрок(ОписаниеПараметровСтроки) Цикл
			Параметр=СокрЛП(СтрПолучитьСтроку(ОписаниеПараметровСтроки,Инд));
			Если ВРЕГ(Лев(Параметр,7))="УСЛОВИЕ" Тогда
				//это описание условия вывода строки
				//здесь интерпретирутся значения переданной структуры параметров

				ТекстУсловия= Сред(Параметр,9);

				Если ВычислитьЗначениеУсловия(ТекстУсловия,СтруктураПараметров)=0 Тогда
					КодОшибки=Сам.КодОшибки();
					//Если КодОшибки<>0 Тогда
					//	Сам.УстановитьКодИОшибку(2000,"Не требуется вывод строки");
					//КонецЕсли;
					//
					возврат ТЗ_Строки;
				КонецЕсли;
			ИначеЕсли ВРЕГ(Лев(Параметр,12))="ВЫРАВНИВАНИЕ" Тогда
				ТекстВыравнивания= СтрЗаменить(Параметр,"=",РазделительСтрок);
				ЗначениеВыравнивания=ВРЕГ(СокрЛП(СтрПолучитьСтроку(ТекстВыравнивания,2)));

				Если Найти("ВЛЕВО/ВПРАВО/ЦЕНТР",ЗначениеВыравнивания)=0 Тогда
					Сам.УстановитьКодИОшибку(2002,"Некорректное описание выравнивания");
					возврат ТЗ_Строки;
				КонецЕсли;

			ИначеЕсли ВРЕГ(Лев(Параметр,5))="ШРИФТ" Тогда
				ТекстШрифта= СтрЗаменить(Параметр,"=",РазделительСтрок);
				Попытка
					ЗначениеШрифта=ВРЕГ(СокрЛП(СтрПолучитьСтроку(ТекстШрифта,2)));
					НомерШрифта=Число(ЗначениеШрифта);

				Исключение
					Сам.УстановитьКодИОшибку(2003,"Некорректное описание шрифта");
					Возврат ТЗ_Строки;
				КонецПопытки;
			ИначеЕсли ВРЕГ(Лев(Параметр,12))="ЖИРНЫЙ_ШРИФТ" Тогда
				ПечататьЖирным=1;
			ИначеЕсли ВРЕГ(Лев(Параметр,8))="ШТРИХКОД" Тогда
				ВыводитьШтрихкод=1;
				ВыводитьТекст=0;
				ВыводитьКартинку=0;
			ИначеЕсли ВРЕГ(Лев(Параметр,8))="КАРТИНКА" Тогда
				ВыводитьКартинку=1;
				ВыводитьТекст=0;
				ВыводитьШтрихкод=0;
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;


	Инд=0;
	СтрИтог=ОписательСекции;
	СтрИтог=СтрЗаменить(СтрИтог,"[",РазделительСтрок+"V:"+РазделительСтрок);
	СтрИтог=СтрЗаменить(СтрИтог,"]{",РазделительСтрок+"F:"+РазделительСтрок);//строка форматрования сразу после описателя поля
	СтрИтог=СтрЗаменить(СтрИтог,"{",РазделительСтрок+"F:"+РазделительСтрок);//строка форматирования после обчной строки
	СтрИтог=СтрЗаменить(СтрИтог,"}",РазделительСтрок);
	СтрИтог=СтрЗаменить(СтрИтог,"]",РазделительСтрок);
	СтрИтог=СтрЗаменить(СтрИтог,"\n",РазделительСтрок+"\n");

	//После замен строка, в которую надо подставить значение будет идти после строки V:
	//Если же будет идти строка за строкой F: , то это строка форматирования предыдущей строки

	СписокСтрок=СоздатьОбъект("СписокЗначений");

	Инд=1;
	Пока Инд<= СтрКоличествоСтрок(СтрИтог) Цикл

		ПодСтрока=СтрПолучитьСтроку(СтрИтог,Инд);
		Если ПодСтрока="V:" Тогда
			Инд=Инд+1;
			ИмяПараметра=СтрПолучитьСтроку(СтрИтог,Инд);
			Если (ИмяПараметра="_")Или(ИмяПараметра="-")Или(ИмяПараметра="+")Или(ИмяПараметра="*")Или(ИмяПараметра="/")
			  Или(ИмяПараметра="\")Или(ИмяПараметра=".")
			Тогда
				СписокСтрок.ДобавитьЗначение(ДополнитьСтрокуЛ(ИмяПараметра,ИмяПараметра,ШиринаСтроки));
			Иначе
				Значение="";
				Если СтруктураПараметров.Свойство(ИмяПараметра, Значение)=1 Тогда
				    СписокСтрок.ДобавитьЗначение(СокрЛП(Строка(Значение)));
				КонецЕсли;  //

			КонецЕсли;

		ИначеЕсли ПодСтрока="F:" Тогда
			//отформатировать последнюю строку
			Значение=СписокСтрок.ПолучитьЗначение(СписокСтрок.РазмерСписка());
			Инд=Инд+1;
			СтрокаФормата=СтрПолучитьСтроку(СтрИтог,Инд);
			ЗнакВыравниванияПодстроки=Лев(СтрокаФормата,1);
			Если (ЗнакВыравниванияПодстроки="L")или(ЗнакВыравниванияПодстроки="R")или(ЗнакВыравниванияПодстроки="C") Тогда
				//выравниваем

				ДлинаПоляСтр=Сред(СтрокаФормата,2);
				ДлинаПодСтроки=0;
				Если СтрДлина(ДлинаПоляСтр)>0  Тогда
				    ДлинаПодСтроки=Число(ДлинаПоляСтр);
				КонецЕсли;

				Если ДлинаПодСтроки>0 Тогда
					Если СтрДлина(Значение)<ДлинаПодСтроки Тогда
						Если ЗнакВыравниванияПодстроки="R" Тогда
							Значение=ДополнитьСтрокуЛ(Значение," ",ДлинаПодСтроки);
						ИначеЕсли ЗнакВыравниванияПодстроки="L" Тогда
							Значение=Формат(Значение,"С"+ДлинаПодСтроки);
						ИначеЕсли ЗнакВыравниванияПодстроки="C" Тогда
							Разница=ДлинаПодСтроки-СтрДлина(Значение);
							КоличествоПробелов=Цел(Разница/2);
							Значение=ДополнитьСтрокуЛ(Значение," ",ДлинаПодСтроки-КоличествоПробелов);
							Значение=Формат(Значение,"С"+ДлинаПодСтроки);
						КонецЕсли;
					ИначеЕсли СтрДлина(Значение)>ДлинаПодСтроки Тогда
						Значение=Лев(Значение,ДлинаПодСтроки);
					КонецЕсли;  //
					//Значение="["+Значение+"]";
				КонецЕсли;

				СписокСтрок.УдалитьЗначение(СписокСтрок.РазмерСписка());
				СписокСтрок.ДобавитьЗначение(Значение);
			КонецЕсли;
		ИначеЕсли Лев(ПодСтрока,2)="\n" Тогда
			СписокСтрок.ДобавитьЗначение("\n");
			ПодСтрока=Сред(ПодСтрока,3);
			СписокСтрок.ДобавитьЗначение(ПодСтрока);
		Иначе
			СписокСтрок.ДобавитьЗначение(Подстрока);
		КонецЕсли;

		Инд=Инд+1;
	КонецЦикла;

	//Теперь строим строку обратно
	Инд=0;
	Стр="";
	Для Инд=1 По СписокСтрок.РазмерСписка() Цикл
		Подстрока=СписокСтрок.ПолучитьЗначение(Инд);
		Стр=Стр+?(Подстрока="\n",РазделительСтрок,Подстрока)
	КонецЦикла;


	Если ВыводитьТекст=1 Тогда
		СтрИтог="";

		//Нарубим по максимальной ширине строки текста
		Для Инд=1 По СтрКоличествоСтрок(Стр) Цикл
			Подстрока=СтрПолучитьСтроку(Стр,Инд);
			СписокСтрок=РазбитьСтроку(Подстрока,ШиринаСтроки);

			Стр1=СокрП(СписокСтрок.ПолучитьЗначение(1));

			Если ПустаяСтрока(Стр1)=1 Тогда
				Стр1=РазделительСтрок;
			ИначеЕсли СтрДлина(Стр1)<ШиринаСтроки Тогда
				Если ЗначениеВыравнивания="ВПРАВО" Тогда
					Стр1=ДополнитьСтрокуЛ(Стр1," ",ШиринаСтроки);
				ИначеЕсли ЗначениеВыравнивания="ЦЕНТР" Тогда
					Стр1=ДополнитьСтрокуЛ(Стр1," ",СтрДлина(Стр1)+Цел((ШиринаСтроки-СтрДлина(Стр1))/2));
				КонецЕсли;
			Иначе
				Стр1=Лев(Стр1,ШиринаСтроки);
			КонецЕсли;
			Если Инд=1 Тогда
				СтрИтог=Стр1;
			Иначе
				СтрИтог=СтрИтог+РазделительСтрок+Стр1;
			КонецЕсли;



			Для К=2 По СписокСтрок.РазмерСписка() Цикл
				Стр1=СокрП(СписокСтрок.ПолучитьЗначение(К));

				Если СтрДлина(Стр1)<ШиринаСтроки Тогда
					Если ЗначениеВыравнивания="ВПРАВО" Тогда
						Стр1=ДополнитьСтрокуЛ(Стр1," ",ШиринаСтроки);
					ИначеЕсли ЗначениеВыравнивания="ЦЕНТР" Тогда
						Стр1=ДополнитьСтрокуЛ(Стр1," ",СтрДлина(Стр1)+Цел((ШиринаСтроки-СтрДлина(Стр1))/2));
					КонецЕсли;
				Иначе
					Стр1=Лев(Стр1,ШиринаСтроки);
				КонецЕсли;

				СтрИтог=СтрИтог+РазделительСтрок+Стр1;


			КонецЦикла;
		КонецЦикла;

		Для Инд=1 По СтрКоличествоСтрок(СтрИтог) Цикл
			ТЗ_Строки.НоваяСтрока();
			ТЗ_Строки.ТипПечати=0;
			ТЗ_Строки.ТипШтрихкода=0;
			ТЗ_Строки.НомерШрифта=НомерШрифта;
			ТЗ_Строки.ПечататьЖирным=ПечататьЖирным;
			ТЗ_Строки.Строка=СтрПолучитьСтроку(СтрИтог,Инд);

		КонецЦикла;


	ИначеЕсли ВыводитьКартинку=1 Тогда
		СтрИтог=СтрЗаменить(Стр,РазделительСтрок,"");
		ТЗ_Строки.НоваяСтрока();
		ТЗ_Строки.ТипПечати=1;
		ТЗ_Строки.ТипШтрихкода=0;
		ТЗ_Строки.НомерШрифта=0;
		ТЗ_Строки.ПечататьЖирным=0;
		ТЗ_Строки.Строка=СтрИтог;

	ИначеЕсли ВыводитьШтрихкод=1 Тогда
		СтрИтог=СтрЗаменить(Стр,РазделительСтрок,"");
		ТЗ_Строки.НоваяСтрока();
		ТЗ_Строки.ТипПечати=2;
		ТЗ_Строки.ТипШтрихкода=0;
		ТЗ_Строки.НомерШрифта=0;
		ТЗ_Строки.ПечататьЖирным=0;
		ТЗ_Строки.Строка=СтрИтог;
	КонецЕсли;


	Возврат ТЗ_Строки;
КонецФункции


//ищет в макете все секции формата ИмяСекции[1..10] и возвращает готовый текст
Функция ОбработатьСекции(МакетПечати,ИмяСекции,СтруктураПараметров) Экспорт
Перем ОписаниеСекции,Инд,КодОшибки;
	Сам=Сам();
	ТЗ_Текст=Сам.СоздатьОписательТекста();;


	Для Инд=1 по 10 Цикл
		ИмяТекущейСекции=ИмяСекции+Инд;
	    Если МакетПечати.Свойство(ИмяТекущейСекции,ОписаниеСекции)=1 Тогда
			Строки=Сам.УстановитьПараметрыСекции(МакетПечати,ИмяТекущейСекции,СтруктураПараметров);
			КодОшибки=Сам.КодОшибки();

	        ТЗ_Текст.Объединить(Строки);
		КонецЕсли;  //
	КонецЦикла;

	возврат ТЗ_Текст;
КонецФункции

//возвращает таблицу-описатель текста
//используется при построении алгоритма вывода строки
Функция СоздатьОписательТекста() Экспорт
	ТЗ=СоздатьОбъект("ИндексированнаяТаблица");
	ТЗ.НоваяКолонка("ТипПечати");//0-строка 1-картинка 2-штрихкод
	ТЗ.НоваяКолонка("ТипШтрихкода");//0-EAN13
	ТЗ.НоваяКолонка("НомерШрифта");
	ТЗ.НоваяКолонка("ПечататьЖирным");
	ТЗ.НоваяКолонка("Строка");
	Возврат ТЗ;
КонецФункции

//возвращает структуру с описанием макета печатной формы чека
//макеты печатных форм хранятся в файле print.ini в каталоге %ETC%
Функция ПолучитьМакетПечати(ИмяМакета)  Экспорт
	Сам=Сам();
	СтруктураМакета=СоздатьМакетПечати();
	ИниФайл=СоздатьОбъект("Файл.INI");
	ИниФайл.ИмяФайла=ИмяФайлаМакетов;
	Если ИниФайл.ПрочитатьСекцию(ИмяМакета)=0 Тогда
		Возврат СтруктураМакета;
	КонецЕсли;

	СсылкаНаСекцию=ИниФайл.ПолучитьСекцию(ИмяМакета);
	Если ПустоеЗначение(СсылкаНаСекцию)=1 Тогда
		Сам.УстановитьКодИОшибку(1500,"Не найден макет печати. Имямакета="+ИмяМакета);
		Возврат СтруктураМакета;
	КонецЕсли;  //

	СсылкаНаСекцию.ВыбратьСвойства();
	СсылканаПоле="";
	ИмяПоля="";
	Пока СсылкаНаСекцию.ПолучитьСвойство(СсылканаПоле,ИмяПоля)=1 Цикл

		Если ИмяПоля="_Комментарий" Тогда
			Продолжить;
		ИначеЕсли ИмяПоля="_ИД" Тогда
			Продолжить;
		КонецЕсли;
		Если (ВРЕГ(ИмяПоля)="ПАРАМЕТРШИРИНА")ИЛИ(ВРЕГ(ИмяПоля)="ПАРАМЕТРВЫСОТА") Тогда
			Попытка
				СтруктураМакета.Вставить(СокрЛП(ИмяПоля),Число(СсылканаПоле.Значение));
			Исключение
				Сам.УстановитьКодИОшибку(1501,"Неверное значение параметра "+ИмяПоля+" = "+СсылканаПоле.Значение+". Ожидается числовое значение.");
				Возврат СтруктураМакета;
			КонецПопытки;

		Иначе
			СтруктураМакета.Вставить(СокрЛП(ИмяПоля),Строка(СсылканаПоле.Значение));
		КонецЕсли;

	КонецЦикла;

	Возврат СтруктураМакета;

КонецФункции