//Конфигурация для платформы "1С:Предприятие 7.7" РБ-Софт:Рабочее место кассира.
//Версия 4.57 от 05.06.11 23:24:51
//(c) Баинов Евгений, ООО "РБ-Софт" 2006-2011 г.Улан-Удэ, ул.Балтахинова,17Е,офис 215
//e-mail: bainov@rb-soft.ru  icq: 73718937, телефоны: (3012) 440-357, 278-228
//Сайт проекта: http://code.google.com/p/rbsoft-rmk/
//_______________________________________________________________________________________
//Класс ИнтерфейсОборудования.ККМ
//_______________________________________________________________________________________
Перем _База Экспорт;
Перем ИспользоватьКонтрольнуюЛенту Экспорт;
Перем ДополнительныеПараметры Экспорт;

Функция Этот(Конт) Возврат Конт; КонецФункции
Функция Сам() Возврат Этот(Контекст) КонецФункции



Процедура СоздатьСтруктуруПараметров() Экспорт
	Сам=Сам();
	Сам.Параметры.Вставить("СерийныйНомер",0);
	Сам.Параметры.Вставить("РежимККМ",0);
	Сам.Параметры.Вставить("ОписаниеРежимаККМ","");
	Сам.Параметры.Вставить("ПодРежим",0);
	Сам.Параметры.Вставить("ОписаниеПодрежимаККМ","");

	Сам.Параметры.Вставить("НомерКассира",0);
	Сам.Параметры.Вставить("ЛогическийНомер",0);
	Сам.Параметры.Вставить("ВерсияПЗУ",0);
	Сам.Параметры.Вставить("СборкаПЗУ",0);
	Сам.Параметры.Вставить("ДатаВнутреннегоПО",0);
	Сам.Параметры.Вставить("НомерПоследнегоЧека",0);
	Сам.Параметры.Вставить("НомерСмены",0);
	Сам.Параметры.Вставить("НомерСменыДоФискализации",0);
	Сам.Параметры.Вставить("Флаги",0);
	Сам.Параметры.Вставить("НаличиеЧековойЛенты",0);
	Сам.Параметры.Вставить("НаличиеКонтрольнойЛенты",0);
	Сам.Параметры.Вставить("ПодкладнойДокумент",0);
	Сам.Параметры.Вставить("ПодкладнойДокументПроходит",0);
	Сам.Параметры.Вставить("ПоложениеТочки",0);
	Сам.Параметры.Вставить("НаличиеЭКЛЗ",0);

	Сам.Параметры.Вставить("ЯщикОткрыт",0);
	Сам.Параметры.Вставить("КрышкаОткрыта",0);

	Сам.Параметры.Вставить("ВремяФР","");
	Сам.Параметры.Вставить("ДатаФР","");

	Сам.Параметры.Вставить("ИНН",0);

	Сам.Параметры.Вставить("СменаОткрыта",0);

КонецПроцедуры


//------------------------------------ ------------------------------------
Процедура Конструктор()
	_База = Этот(Контекст).ПолучитьБазовыйКласс("ИнтерфейсОборудования");

	ИспользоватьКонтрольнуюЛенту=глНастройки.ПолучитьКакЧисло("FR/UseJournalRibbon");
	ДополнительныеПараметры=СоздатьОбъект("Структура");
КонецПроцедуры // Конструктор

//------------------------------------ ------------------------------------
Процедура Деструктор()
КонецПроцедуры // Деструктор



Функция ПарольПользователя() Экспорт
	Возврат Сам().Устройство.Данные.ПарольПользователя;
КонецФункции

Функция ПарольАдминистратора() Экспорт
	Возврат Сам().Устройство.Данные.ПарольАдминистратора;
КонецФункции

///абстрактный метод.переопределять обязательно
Функция ПечатьЖирнойСтроки(СтрокаДляПечати) Экспорт
	возврат 1;
КонецФункции

///абстрактный метод.переопределять обязательно
Функция ПечатьСтроки(СтрокаДляПечати) Экспорт
	возврат 1;
КонецФункции
//абстрактный метод.
Функция ПечатьСтрокиШрифтом(СтрокаДляПечати,ТипШрифта) Экспорт
	возврат 1;
КонецФункции

///абстрактный метод.переопределять обязательно
Функция ПечатьШтрихкода(СтрокаШтрихкода,ТипШтрихкода) Экспорт
	возврат 1;
КонецФункции
///абстрактный метод.переопределять обязательно
Функция ПечатьКартинки(ИмяКартинки) Экспорт
	возврат 1;
КонецФункции
///абстрактный метод.переопределять обязательно
Функция АннулироватьЧек() Экспорт
	Возврат 1;
КонецФункции
//абстрактный метод.
Функция ОбработкаОшибокПриПечати() Экспорт
	возврат 1;
КонецФункции

Функция НапечататьТекст(ТекстовыйМакет,ТекстовыйРезультат="") Экспорт
	Сам=Сам();
    Если Сам.Включить()=0 Тогда
		Возврат 0;
	КонецЕсли;
	Инд=0;

	ТекстовыйРезультат="";

	ТекстовыйМакет.ВыбратьСтроки();
	Пока ТекстовыйМакет.ПолучитьСтроку()=1 Цикл


		Если ТекстовыйМакет.ТипПечати=0 Тогда
			//печатаем строку

			ТекстовыйРезультат=ТекстовыйРезультат+?(ТекстовыйРезультат="","",РазделительСтрок)+ТекстовыйМакет.Строка;

			Если ТекстовыйМакет.ПечататьЖирным=1 Тогда
				Сам.ПечатьЖирнойСтроки(ТекстовыйМакет.Строка);
			Иначе
				Если ТекстовыйМакет.НомерШрифта=0 Тогда
					Сам.ПечатьСтроки(ТекстовыйМакет.Строка);
				Иначе
					Сам.ПечатьСтрокиШрифтом(ТекстовыйМакет.Строка,ТекстовыйМакет.НомерШрифта);
				КонецЕсли;
			КонецЕсли;

			Если Сам.ОбработкаОшибокПриПечати()=0 Тогда
				Возврат 0;
			КонецЕсли;  //
		ИначеЕсли ТекстовыйМакет.ТипПечати=1 Тогда
			//печататем картинку
			Сам.ПечатьКартинки(ТекстовыйМакет.Строка);
		ИначеЕсли ТекстовыйМакет.ТипПечати=2 Тогда
		    //печатаем штрихкод
			Сам.ПечатьШтрихкода(ТекстовыйМакет.Строка,ТекстовыйМакет.ТипШтрихкода);
		КонецЕсли;  //

		Если Сам.ОбработкаОшибокПриПечати()=0 Тогда
		    Возврат 0;
		КонецЕсли;  //
	КонецЦикла;
	возврат 1;
КонецФункции

//абстрактный метод.переопределять обязательно
//проверить готовность ККМ к работе
//1 - готова
//0 - не готова
Функция ПроверитьГотовность() Экспорт

	Возврат 1;
КонецФункции


Функция СоздатьСтруктуруСчетчиков() Экспорт
	Структура=СоздатьОбъект("Структура");
	Структура.Вставить("НомерПродажи",0);
	Структура.Вставить("НомерВозвратаПродажи",0);
	Структура.Вставить("НомерПокупки",0);
	Структура.Вставить("НомерВозвратаПокупки",0);
	Структура.Вставить("НомерСмены",0);
	Структура.Вставить("НомерСменыДоФискализации",0);
	Структура.Вставить("НомерОтчетаБезГашения",0);
	Структура.Вставить("НомерВнесения",0);
	Структура.Вставить("НомерВыплаты",0);
	Возврат Структура;
КонецФункции

//абстрактный метод.переопределять обязательно
//возвращает сумму денег в денежном ящике
//если произошел сбой - выставляется код ошибки
Функция СуммаНаличности() Экспорт

	Возврат 0;
КонецФункции


//абстрактный метод.переопределять обязательно
Функция ПолучитьСквознойНомерДокумента() Экспорт
	возврат 1;
КонецФункции
//абстрактный метод.переопределять обязательно
Функция ПолучитьНомерПродажи() Экспорт
	возврат 0;
КонецФункции
//абстрактный метод.переопределять обязательно
Функция ПолучитьНомерВозвратаПродажи() Экспорт
	возврат 0;
КонецФункции
//абстрактный метод.переопределять обязательно
Функция ПолучитьНомерПокупки() Экспорт
	возврат 0;
КонецФункции
//абстрактный метод.переопределять обязательно
Функция ПолучитьНомерВозвратаПокупки() Экспорт
	возврат 0;
КонецФункции

//абстрактный метод.переопределять обязательно
Функция ПолучитьНомерСмены() Экспорт
	возврат 1;
КонецФункции
//абстрактный метод.
Функция ПолучитьНомерОтчетаБезГашения() Экспорт
	возврат 0;
КонецФункции
//абстрактный метод.
Функция ПолучитьНомерВнесения() Экспорт
	возврат 0;
КонецФункции
//абстрактный метод.
Функция ПолучитьНомерВыплаты() Экспорт
	возврат 0;
КонецФункции
//абстрактный метод.
Функция ПолучитьПараметрыСмены() Экспорт
	Структура=НовыйОбъект("ПараметрыКассовойСмены");
	Возврат Структура;
КонецФункции

//максимальное количество символов в строке чека ККМ
Функция ПолучитьДлинуСтрокиЧека() Экспорт
	возврат 35;
КонецФункции

//возвращает структуру с показателями нумераторов чеков продаж, покупок, возвратов продаж, возвратов покупок,
//внесений, выплаты, номеров смен, номеров X-отчетов
Функция ПрочитатьСчетчики() Экспорт
	Сам=Сам();
	Структура=Сам.СоздатьСтруктуруСчетчиков();
	Структура.НомерПродажи=Сам.ПолучитьНомерПродажи();
	Структура.НомерВозвратаПродажи=Сам.ПолучитьНомерВозвратаПродажи();
	Структура.НомерПокупки=Сам.ПолучитьНомерПокупки();
	Структура.НомерВозвратаПокупки=Сам.ПолучитьНомерВозвратаПокупки();
	Структура.НомерСмены=Сам.ПолучитьНомерСмены();
	Структура.НомерОтчетаБезГашения=Сам.ПолучитьНомерОтчетаБезГашения();
	Структура.НомерВнесения=Сам.ПолучитьНомерВнесения();
	Структура.НомерВыплаты=Сам.ПолучитьНомерВыплаты();

	Возврат Структура;
КонецФункции



Функция ПрочитатьДенежныеСчетчики() Экспорт
	Структура=СоздатьОбъект("Структура");

	Возврат Структура;
КонецФункции


//абстрактный метод.переопределять обязательно
//открывает денежный ящик
Функция ОткрытьДенежныйЯщик() Экспорт

	Возврат 1;
КонецФункции
//абстрактный метод.переопределять обязательно
//Отрезать ленту на ККМ
//ТипОтрезки -  0 - отрезать полностью
//				1 - неполностью
//возврат
//1 - отрезали
//0 - сбой

Функция ОтрезатьЛенту(ТипОтрезки=0) Экспорт

	Возврат 1;
КонецФункции




//абстрактный метод.переопределять обязательно
//Пробивает чек по ККМ
//на входе не нужно проверять корректность чека
//проверка считается уже произведенной
//устройство в драйвере уже установлено
//реализовать только закрытие чека по ККМ

Функция ЗакрытьЧек(Чек) Экспорт

	возврат 1;
КонецФункции

//абстрактный метод.
//открывает чек заданного типа
//ТипЧека - строка
//    значения: Продажа,Возврат, Покупка, ВозвратПокупки
Функция ОткрытьЧек(ТипЧека) Экспорт

	возврат 1;
КонецФункции

//абстрактный метод.
Функция ЗакрытьСмену() Экспорт
	Возврат 0;
КонецФункции

//абстрактный метод.
Функция ОтчетБезГашения() Экспорт
	Возврат 0;
КонецФункции

//абстрактный метод.
Функция Внесение(СуммаВнесения) Экспорт
	Возврат 0;
КонецФункции
//абстрактный метод.
Функция Выплата(СуммаВыплаты) Экспорт
	Возврат 0;
КонецФункции



Функция ПолучитьНомерККМ() Экспорт
	возврат 1;
КонецФункции



Функция ИмяТаблицыБД() Экспорт
	Возврат "devkkm";
КонецФункции

Функция ВидУстройства() Экспорт
	Возврат "Устройство.ККМ";
КонецФункции

Функция ПробитьЧек(Чек,ТекстовыйРезультат="") Экспорт
	ТекстовыйРезультат="";

	Сам=Сам();
	Если Сам.ПроверитьГотовность()=0 Тогда
		Возврат 0;
	ИначеЕсли Сам.Включить()=0 Тогда
		Возврат 0;
	ИначеЕсли Чек.Проверить()=0 Тогда
		Возврат 0;
	Иначе


		Если Чек.Данные.КодОперации=0 Тогда
			Если Сам.ОткрытьЧек("Продажа")=0 Тогда
				Возврат 0;
			КонецЕсли;
		ИначеЕсли Чек.Данные.КодОперации=1 Тогда
			Если Сам.ОткрытьЧек("Возврат")=0 Тогда
				Возврат 0;
			КонецЕсли;
		Иначе
			глПредупреждение("Тип операции "+Чек.Данные.КодОперации+" не поддерживается в этой версии.");
			возврат 0;
		КонецЕсли;


		СтрокиНаПечать=Чек.ПолучитьПечатнуюФорму(Сам.Устройство);
		Если ПустоеЗначение(СтрокиНаПечать)=1 Тогда
			Возврат 0;
		КонецЕсли;  //

		Если НапечататьТекст(СтрокиНаПечать,ТекстовыйРезультат)=0 Тогда
			Возврат 0;
		КонецЕсли;


	КонецЕсли;  //

	Если Сам.ЗакрытьЧек(Чек)=0 Тогда
	    возврат 0;
	Иначе

		Если Чек.Данные.КодОперации=0 Тогда
			Чек.Данные.НомерДокумента=Сам.ПолучитьНомерПродажи();
		ИначеЕсли Чек.Данные.КодОперации=1 Тогда
			Чек.Данные.НомерДокумента=Сам.ПолучитьНомерВозвратаПродажи();
		КонецЕсли;


		Чек.Данные.НомерСмены=Сам.ПолучитьНомерСмены();
		Чек.Данные.НомерККМ=Сам.ПолучитьНомерККМ();
		Чек.Данные.Статус=1;
		Чек.Данные.НомерКассовогоЧека=Сам.ПолучитьСквознойНомерДокумента();


		Чек.Записать();

		Если Сам.Устройство.Данные.ТипАвтоотрезки>0 Тогда
			Если Сам.Устройство.Данные.ТипАвтоотрезки=1 Тогда
				Сам.ОтрезатьЛенту(0);
			ИначеЕсли Сам.Устройство.Данные.ТипАвтоотрезки=2 Тогда
				Сам.ОтрезатьЛенту(1);
			КонецЕсли;  //
		КонецЕсли;  //
	КонецЕсли;  //

	Сам.Отключить();
	Возврат 1;
КонецФункции

//абстрактный метод.переопределять обязательно
//вызывать эту функцию, если ККМ в состоянии ожидания продолжения печати. Обычно после обрыва ленты
Функция ПродолжитьПечать() Экспорт
	Возврат 1;
КонецФункции
//------------------------------------ ------------------------------------
Процедура ПриОткрытии()
//#if _NOW_PREPARE_CLASS
	Форма.Параметр._ПриОткрытии(); // для отладки класса
//#endif // _NOW_PREPARE_CLASS
КонецПроцедуры // ПриОткрытии

