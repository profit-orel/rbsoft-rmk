//Конфигурация для платформы "1С:Предприятие 7.7" РБ-Софт:Рабочее место кассира.
//Версия 4.57 от 05.06.11 23:24:52
//(c) Баинов Евгений, ООО "РБ-Софт" 2006-2011 г.Улан-Удэ, ул.Балтахинова,17Е,офис 215
//e-mail: bainov@rb-soft.ru  icq: 73718937, телефоны: (3012) 440-357, 278-228
//Сайт проекта: http://code.google.com/p/rbsoft-rmk/
//_______________________________________________________________________________________
//Класс ИнтерфейсОборудования.ПлатежнаяСистема.RBSOFT.CARDS
//_______________________________________________________________________________________
Перем _База Экспорт;
Перем НомерТекущейОперации;
Перем ТаблицаКарточек Экспорт;

Функция Этот(Конт) Возврат Конт; КонецФункции
Функция Сам() Возврат Этот(Контекст) КонецФункции



//------------------------------------ ------------------------------------
Процедура Конструктор()
	_База = Этот(Контекст).ПолучитьБазовыйКласс("ИнтерфейсОборудования.ПлатежнаяСистема");

	ТаблицаКарточек=НовыйОбъект("ТаблицаКарточекRBSOFT_CARDS");

КонецПроцедуры // Конструктор

//------------------------------------ ------------------------------------
Процедура Деструктор()

КонецПроцедуры // Деструктор


//делается один раз для каждого вида драйвера
Функция ПервичнаяНастройкаДрайвера() Экспорт
	Сам=Сам();

	Если Сам.УдалитьНастройкиДрайвера()=0 Тогда
		Возврат 0;
	КонецЕсли;
	возврат 1;
КонецФункции


//произвести соединение с сервером базы карточек
Функция УстановитьПараметрыУстройства(ОбъектУстройство=0) Экспорт
	Сам=Сам();
	IP_Порт=ОбъектУстройство.Данные.Порт.IP_Порт();
	Если ПустоеЗначение(IP_Порт)=1 Тогда
		IP_Порт=3306;
	КонецЕсли;

	IP_Адрес=ОбъектУстройство.Данные.Порт.IP_Адрес();



	Сам.Драйвер.Сервер 			= IP_Адрес;
	Сам.Драйвер.Порт 			= IP_Порт;
	Сам.Драйвер.Пользователь 	= ОбъектУстройство.Данные.Логин;
	Сам.Драйвер.Пароль 			= ОбъектУстройство.Данные.Пароль;

	Сам.Драйвер.БазаДанных 		= ОбъектУстройство.Данные.ИмяБазыДанных;


	возврат 1;
КонецФункции


Функция Инит(_Устройство) Экспорт
	Сам=Сам();
	Устройство=_Устройство;

	НомерЛУ=глДрайверы.ПолучитьНомерЛУ(Устройство.Данные.Драйвер,Устройство.Данные.ИД);
	Устройство.НомерЛУ=НомерЛУ;

	Сам.Драйвер=СоздатьОбъект("Драйвер.RBSOFT_CARDS");
	Возврат Сам.УстановитьПараметрыУстройства(Устройство);
КонецФункции


Процедура НастройкаСвойств() Экспорт
	Сам=Сам();
	Сам.Драйвер.ОткрытьФормуОбъектаМодально();
КонецПроцедуры

//возвращает номер текущей операции на сервере
Функция НомерОперации() Экспорт
	Возврат НомерТекущейОперации;
КонецФункции


//только включает оборудование
//не надо делать текущим
//переопределять
Функция ВключениеОборудования(ОбъектУстройство) Экспорт
	Сам=Сам();
	Если Сам.Драйвер.УстановитьСоединение() = 1 Тогда
		возврат 1;
	Иначе
		Сам.УстановитьКодИОшибку(11000,"Ошибка SQL: "+Сам.Драйвер.ПоследняяОшибка());
		возврат 0;
	КонецЕсли;

КонецФункции

Функция ПроверитьГотовность() Экспорт
	Сам=Сам();
	Возврат Сам.Драйвер.ПроверитьСоединение();
КонецФункции

//только отключает оборудование
//не надо делать текущим
//переопределять

Функция ОтключениеОборудования(ОбъектУстройство) Экспорт
	Сам=Сам();
	Если Сам.Драйвер.ЗакрытьСоединение() = 1 Тогда
		возврат 1;
	Иначе
		Сам.УстановитьКодИОшибку(11001,"Ошибка SQL: "+Сам.Драйвер.ПоследняяОшибка());
		возврат 0;
	КонецЕсли;
КонецФункции

//драйвер для каждого устройства свой. устройство всегда текущее
Функция СделатьТекущим(ОбъектУстройство=0) Экспорт
	возврат 1;
КонецФункции

Функция ПолучитьПлатежиПоКарте(КодКарты,_Дата,ТаблицаПлатежей) Экспорт
	Сам=Сам();
	Рез=Сам.Драйвер.ПолучитьПлатежиПоКарте(КодКарты,_Дата,ТаблицаПлатежей);
	Если Рез=0 Тогда
		Сам.УстановитьОшибку(Сам.Драйвер.ПоследняяОшибка());
	КонецЕсли;
	возврат Рез;
КонецФункции


Функция ПолучитьБаланс(КодКарты) Экспорт

	Возврат 1;
КонецФункции

//Закрывает операционный день
Функция ЗакрытьСмену() Экспорт

	Возврат 1;
КонецФункции

//Начинает на сервере новую операцию
//возвращается номер новой операции или 0
//операция - серия транзакций, которая должна завершиться или отмениться
//завершение произодить ЗавершитьОперацию()
//отмена производится ОтменитьОперацию

Функция НачатьОперацию() Экспорт
	Сам=Сам();
	НомерТекущейОперации=Сам.Драйвер.НачатьОперацию();
	Если НомерТекущейОперации=0 Тогда
		Сам.УстановитьОшибку(Сам.Драйвер.ПоследняяОшибка());
	КонецЕсли;
	возврат НомерТекущейОперации;
КонецФункции

Функция ЗавершитьОперацию(_НомерОперации=0) Экспорт
	Сам=Сам();

	Если _НомерОперации=0 Тогда
		НомерОперации=НомерТекущейОперации;
	Иначе
		НомерОперации=_НомерОперации;
	КонецЕсли;

	Если НомерОперации=0 Тогда
		//Операция не была начата
		Сам.УстановитьОшибку("Операция не была начата.");
		Возврат 0;
	КонецЕсли;


	Рез=Сам.Драйвер.ЗавершитьОперацию(НомерОперации);
	Если рез=0 Тогда
		Сам.УстановитьОшибку(Сам.Драйвер.ПоследняяОшибка());
	Иначе
		НомерТекущейОперации=0;
		ТаблицаКарточек.УдалитьСтроки();
		Сам.СброситьОшибку();
	КонецЕсли;

	возврат Рез;
КонецФункции

Функция ОтменитьОперацию(_НомерОперации=0) Экспорт

	Сам=Сам();


	Если _НомерОперации=0 Тогда
		НомерОперации=НомерТекущейОперации;
	Иначе
		НомерОперации=_НомерОперации;
	КонецЕсли;

	Если НомерОперации=0 Тогда
		//Операция не была начата
		Сам.УстановитьОшибку("Операция не была начата.");
		Возврат 0;
	КонецЕсли;


	Рез=Сам.Драйвер.ОтменитьОперацию(НомерОперации);
	Если рез=0 Тогда
		Сам.УстановитьОшибку(Сам.Драйвер.ПоследняяОшибка());
	Иначе
		НомерТекущейОперации=0;
		ТаблицаКарточек.УдалитьСтроки();
		Сам.СброситьОшибку();
	КонецЕсли;
	Возврат Рез;
КонецФункции


//до вызова должна быть уже начата операция
Функция Оплатить(_НомерОперации=0,ИДКарты="", Сумма,СуммаПрошла) Экспорт
	Сам=Сам();

	СуммаПрошла=0;

	Если _НомерОперации=0 Тогда
		НомерОперации=НомерТекущейОперации;
	Иначе
		НомерОперации=_НомерОперации;
	КонецЕсли;

	Если НомерОперации=0 Тогда
		Сам.УстановитьОшибку("Операция не была начата.");
		Возврат 0;
	КонецЕсли;

	Если ИДКарты="" Тогда
		ЗапросТранзацииПлатежнойСистемы=НовыйОбъект("ЗапросТранзацииПлатежнойСистемы");
		ЗапросТранзацииПлатежнойСистемы.Сумма=Сумма;
		ЗапросТранзацииПлатежнойСистемы.Команда="ОПЛАТА";
		ЗапросТранзацииПлатежнойСистемы.РазрешитьИзменениеСуммы=1;
		ЗапросТранзацииПлатежнойСистемы.НомерОперации=НомерОперации;

		Сам.УстановитьРежим("ОПЛАТА");

		Если Сам.ОткрытьФормуОбъектаМодально("ФормаОплаты",ЗапросТранзацииПлатежнойСистемы)=1 Тогда
			СуммаПрошла=ЗапросТранзацииПлатежнойСистемы.СуммаПрошла;
			Сам.СброситьОшибку();
			Возврат 1;
		Иначе
			Сам.УстановитьОшибку("Оплата не прошла.");
			Возврат 0;
		КонецЕсли;
	Иначе

		Рез=Сам.Драйвер.Оплатить(НомерОперации,ИДКарты, Сумма,СуммаПрошла);
		Если Рез=0 Тогда
			Сам.УстановитьОшибку(Сам.Драйвер.ПоследняяОшибка());
		Иначе
			Сам.СброситьОшибку();
		КонецЕсли;
		Возврат Рез;
	КонецЕсли;


	Возврат 0;
КонецФункции


Функция ВернутьПлатежПоКарте(_НомерОперации=0,ИД,_СуммаОплаты=0) Экспорт
	Сам=Сам();

	НомерОперации = ?(_НомерОперации=0,НомерТекущейОперации,_НомерОперации);

	Если НомерОперации =0 Тогда
		Сам.УстановитьОшибку("Операция не была начата.");
		Возврат 0;
	КонецЕсли;

	Карта=Сам.Драйвер.ПолучитьКарту(ИД);

	Если ПустоеЗначение(Карта)=1 Тогда
		//глПредупреждение("Карта не найдена на сервере RB-SOFT CARDS!
		//|ИД="+ИД);
		Возврат 0;
	Иначе

		Если Карта.Активность=0 Тогда
			глПредупреждение("Карта неактивная!
			|ИД="+ИД+"
			|Дата блокировки:"+Карта.ДатаБлокировки);
			Возврат 0;
		КонецЕсли;

		Если Карта.ЭтоПлатежнаяКарта=0 Тогда
			глПредупреждение("Карта не платежная!
			|ИД="+ИД);
			Возврат 0;
		КонецЕсли;



		Стр=0;

		СуммаОплаты=_СуммаОплаты;

		Если СуммаОплаты=0 Тогда
			Если Карта.ЭтоПлатежнаяКарта=2 Тогда
				//по купонам
				СуммаОплаты=Карта.Номинал;
				Если СуммаОплаты=0 Тогда
					глПредупреждение("У карты "+ИД+" неизвестен номинал.
					|"+Сам.Драйвер.ПоследняяОшибка());
					Возврат 0;
				ИначеЕсли Карта.ТекущийОстаток<>0 Тогда
					Если Карта.ТекущийОстаток=Карта.Номинал Тогда
						глПредупреждение("У карты "+ИД+" уже есть остаток "+глФРМ(Карта.ТекущийОстаток)+"
						|"+Сам.Драйвер.ПоследняяОшибка());
						Возврат 1;
					Иначе
						глПредупреждение("У карты "+ИД+" уже есть остаток "+глФРМ(Карта.ТекущийОстаток)+"
						|Остаток не равен номиналу.
						|Номинал : "+глФРМ(Карта.Номинал)+"
						|Обратитесь к администратору.
						|"+Сам.Драйвер.ПоследняяОшибка());
					КонецЕсли;

					Возврат 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если СуммаОплаты=0 Тогда
			глПредупреждение("Нет суммы оплаты.
			|"+Сам.Драйвер.ПоследняяОшибка());
			Возврат 0;
		КонецЕсли;

		Если Сам.Драйвер.Вернуть(НомерОперации,ИД,СуммаОплаты)=1 Тогда
			ТаблицаКарточек.НоваяСтрока();
			ТаблицаКарточек.Карта=Карта;
			ТаблицаКарточек.НомерКарты=Карта.ИД;
			ТаблицаКарточек.Сумма=СуммаОплаты;
			ТаблицаКарточек.ОплатаПроведена=1;
			Сам.СброситьОшибку();
			Возврат 1;
		Иначе
			глПредупреждение("Возврат по карте "+ИД+" на сумму "+СуммаОплаты+" НЕ ПРОШЕЛ!
			|"+Сам.Драйвер.ПоследняяОшибка());
		КонецЕсли
	КонецЕсли;
	Возврат 0;
КонецФункции



//до вызова должна быть уже начата операция
Функция Вернуть(_НомерОперации=0,ИДКарты="", Сумма,СуммаПрошла) Экспорт
	Сам=Сам();

	СуммаПрошла=0;

	Если _НомерОперации=0 Тогда
		НомерОперации=НомерТекущейОперации;
	Иначе
		НомерОперации=_НомерОперации;
	КонецЕсли;

	Если НомерОперации=0 Тогда
		Сам.УстановитьОшибку("Операция не была начата.");
		Возврат 0;
	КонецЕсли;

	Если ИДКарты="" Тогда
		ЗапросТранзацииПлатежнойСистемы=НовыйОбъект("ЗапросТранзацииПлатежнойСистемы");
		ЗапросТранзацииПлатежнойСистемы.Сумма=Сумма;
		ЗапросТранзацииПлатежнойСистемы.Команда="ВОЗВРАТ";
		ЗапросТранзацииПлатежнойСистемы.РазрешитьИзменениеСуммы=1;
		ЗапросТранзацииПлатежнойСистемы.НомерОперации=НомерОперации;

		Сам.УстановитьРежим("ВОЗВРАТ");

		Если Сам.ОткрытьФормуОбъектаМодально("ФормаВозврата",ЗапросТранзацииПлатежнойСистемы)=1 Тогда
			СуммаПрошла=ЗапросТранзацииПлатежнойСистемы.СуммаПрошла;
			Сам.СброситьОшибку();
			Возврат 1;
		Иначе
			Сам.УстановитьОшибку("Возврат не прошел.");
			Возврат 0;
		КонецЕсли;
	Иначе

		Рез=Сам.Драйвер.Вернуть(НомерОперации,ИДКарты, Сумма);
		Если Рез=0 Тогда
			Сам.УстановитьОшибку(Сам.Драйвер.ПоследняяОшибка());
		Иначе
			Сам.СброситьОшибку();
		КонецЕсли;
		Возврат Рез;
	КонецЕсли;


	Возврат 0;
КонецФункции




Функция ПровестиПлатежПоКарте(_НомерОперации=0,ИД,_СуммаОплаты=0) Экспорт
	Сам=Сам();

	НомерОперации = ?(_НомерОперации=0,НомерТекущейОперации,_НомерОперации);

	Если НомерОперации =0 Тогда
		Сам.УстановитьОшибку("Операция не была начата.");
		Возврат 0;
	КонецЕсли;


	Карта=Сам.Драйвер.ПолучитьКарту(ИД);

	Если ПустоеЗначение(Карта)=1 Тогда
		//глПредупреждение("Карта не найдена на сервере RB-SOFT CARDS!
		//|ИД="+ИД);
		Возврат 0;
	Иначе

		Если Карта.Активность=0 Тогда
			глПредупреждение("Карта неактивная!
			|ИД="+ИД+"
			|Дата блокировки:"+Карта.ДатаБлокировки);
			Возврат 0;
		КонецЕсли;

		Если Карта.ЭтоПлатежнаяКарта=0 Тогда
			глПредупреждение("Карта не платежная!
			|ИД="+ИД);
			Возврат 0;
		КонецЕсли;



		Стр=0;

		СуммаОплаты=_СуммаОплаты;


		Стр=0;
		Если ТаблицаКарточек.НайтиЗначение(Карта.ИД,Стр,"НомерКарты")=1 Тогда
			глПредупреждение("Уже проводили платеж в текущем чеке на эту карту!");
			Возврат 0;
		КонецЕсли;

		Остаток=Карта.ТекущийОстаток;

		Если Карта.ЭтоПлатежнаяКарта=2 Тогда
			СуммаОплаты=Остаток;
		Иначе
			СуммаОплаты=?(_СуммаОплаты=0,Сам.ПолучитьЛимитОплаты(),_СуммаОплаты);
		КонецЕсли;

		Если СуммаОплаты=0 Тогда
			СуммаОплаты=Остаток;
		КонецЕсли;

		Если Остаток=-1000000000 Тогда
			глПредупреждение("Невозможно получить остаток карты.");
			Возврат 0;
		ИначеЕсли Остаток<0 Тогда
			глПредупреждение("Отрицательный баланс на карте.
			|Остаток="+глФРМ(Остаток));
			Возврат 0;
		ИначеЕсли Остаток=0  Тогда
			глПредупреждение("Нет остатка на карте.");
			Возврат 0;

		ИначеЕсли СуммаОплаты>Остаток Тогда
			глПредупреждение("Недостаточно средств на карте.
			|Остаток на карте: "+глФРМ(Остаток)+"
			|Требуется: "+глФРМ(СуммаОплаты));
			Возврат 0;

		КонецЕсли;

		Если Сам.ПолучитьЛимитОплаты()>0 Тогда
			СуммаСТекущейОплатой=ТаблицаКарточек.Итог("Сумма")+СуммаОплаты;
			Если СуммаСТекущейОплатой>Сам.ПолучитьЛимитОплаты() Тогда
				глПредупреждение("Превышается разрешенный лимит платежа!
				|Лимит платежа = "+глФРМ(Сам.ПолучитьЛимитОплаты())+"
				|Сумма с текущим платежом = "+глФРМ(СуммаСТекущейОплатой));
				Возврат 0;
			КонецЕсли;
		КонецЕсли;

		СуммаПрошла=0;


		Если Сам.Драйвер.Оплатить(НомерТекущейОперации,Карта.ИД,СуммаОплаты,СуммаПрошла)=1 Тогда
			ТаблицаКарточек.НоваяСтрока();
			ТаблицаКарточек.Карта=Карта;
			ТаблицаКарточек.НомерКарты=Карта.ИД;
			ТаблицаКарточек.Сумма=СуммаПрошла;
			ТаблицаКарточек.ОплатаПроведена=1;
			Сам.СброситьОшибку();
			Возврат 1;
		Иначе
			глПредупреждение("Платеж по карте "+ИД+" на сумму "+СуммаОплаты+" НЕ ПРОШЕЛ!
			|"+Сам.Драйвер.ПоследняяОшибка());
		КонецЕсли


	КонецЕсли;
	Возврат 0;
КонецФункции


//описать действия по событию сканера
//возвращает 1- событие обработано, дальнейшая обработка в подписчиках на событие не требуется
//           0- можно продолжиь дальнейшую обработку события
Функция СобытиеСканера(Событие) Экспорт
	Сам=Сам();
	Если Событие.Источник="Сканер" Тогда

		Если ПустоеЗначение(Событие.Описатель.Объект)=1 Тогда
			ИД=Событие.Описатель.Данные;
			Если Сам.Режим="ОПЛАТА" Тогда
				Возврат Сам.ПровестиПлатежПоКарте(НомерТекущейОперации,ИД);
			ИначеЕсли Сам.Режим="ВОЗВРАТ" Тогда
				Возврат Сам.ВернутьПлатежПоКарте(НомерТекущейОперации,ИД);
			КонецЕсли;
		Иначе
			Если Событие.Описатель.ТипОбъекта="Товар" Тогда
				глПредупреждение("Это штрихкод товара!");
			ИначеЕсли Событие.Описатель.ТипОбъекта="Пользователь" Тогда
				глПраваДоступа.УстановитьПользователя(Событие.Описатель.Объект);
				глПредупреждение("Это карта сотрудника!");
			Иначе
				ИД=Событие.Описатель.Данные;
				Если Сам.Режим="ОПЛАТА" Тогда
					Возврат Сам.ПровестиПлатежПоКарте(НомерТекущейОперации,ИД);
				ИначеЕсли Сам.Режим="ВОЗВРАТ" Тогда
					Возврат Сам.ВернутьПлатежПоКарте(НомерТекущейОперации,ИД);
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат 0;
КонецФункции

//описать действия по событию ридера карточек
//возвращает 1- событие обработано, дальнейшая обработка в подписчиках на событие не требуется
//           0- можно продолжиь дальнейшую обработку события

Функция СобытиеРидера(Событие) Экспорт
	Сам=Сам();
	Если Событие.Источник="Ридер" Тогда

		Если ПустоеЗначение(Событие.Описатель.Объект)=1 Тогда
			ИД=Событие.Описатель.Дорожка2;
			Возврат ПровестиПлатежПоКарте(НомерТекущейОперации,ИД);
		Иначе

			Если Событие.Описатель.ТипОбъекта="Пользователь" Тогда
				Пользователь=Событие.Описатель.Объект;
				глПраваДоступа.УстановитьПользователя(Событие.Описатель.Объект);
				глПредупреждение("Это карта сотрудника!");

				Возврат 1;
			Иначе
				НомерДорожкиКарт=глНастройки.ПолучитьКакЧисло("CARDS/DEBETCARD_TRACK");
				Если НомерДорожкиКарт>0 Тогда
					ИД=Событие.Описатель.Дорожка1;
					Если НомерДорожкиКарт=2 Тогда
						ИД=Событие.Описатель.Дорожка2;
					ИначеЕсли НомерДорожкиКарт=3 Тогда
						ИД=Событие.Описатель.Дорожка3;
					Иначе
						глПредупреждение("Неверная настройка дорожки дебетовых карт.
						|Номер дорожки карт не может быть равен "+НомерДорожкиКарт);
						Возврат 1;
					КонецЕсли;
					Если Сам.Режим="ОПЛАТА" Тогда
						Возврат Сам.ПровестиПлатежПоКарте(НомерТекущейОперации,ИД);
					ИначеЕсли Сам.Режим="ВОЗВРАТ" Тогда
						Возврат Сам.ВернутьПлатежПоКарте(НомерТекущейОперации,ИД);
					КонецЕсли;
				КонецЕсли;
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат 0;
КонецФункции

//описать действия по событию механического ключа
//возвращает 1- событие обработано, дальнейшая обработка в подписчиках на событие не требуется
//           0- можно продолжиь дальнейшую обработку события

Функция СобытиеКлюча(Событие) Экспорт
	Сам=Сам();
	Если Событие.Источник="Ключ" Тогда

		Если Событие.Описатель.ТипОбъекта="Пользователь" Тогда
			Пользователь=Событие.Описатель.Объект;
			Если Пользователь.Активный=1 Тогда
				Кассир=Пользователь;
				глПраваДоступа.УстановитьПользователя(Пользователь);
			Иначе
				Продавец=Пользователь;
			КонецЕсли;
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	Возврат 0;
КонецФункции

//описать действия по событию радиоридера (проксимити)
//возвращает 1- событие обработано, дальнейшая обработка в подписчиках на событие не требуется
//           0- можно продолжиь дальнейшую обработку события

Функция СобытиеРадиоРидера(Событие) Экспорт
	Сам=Сам();

	СобытиеОбработано=0;

	Если СобытиеОбработано=1 Тогда
		глСобытиеОбработано(Событие);
		Сам.ТребуетсяОтображение();
		Возврат 1;
	КонецЕсли;
	Возврат 0;
КонецФункции

//описать действия по событию от клавиатуры
//возвращает 1- событие обработано, дальнейшая обработка в подписчиках на событие не требуется
//           0- можно продолжить дальнейшую обработку события

Функция СобытиеКлавиатуры(Событие) Экспорт
	Сам=Сам();
	Если Событие.Источник="Клавиатура" Тогда

		Если Событие.Обработано=0 Тогда
			Команда=глДрайверы.Клавиатура.ПолучитьКоманду(Событие.Описатель.Данные,Перечисление.РежимыРМК.ОплатаПоПлатежнойСистеме);
			Если Команда<>"" Тогда
				СобытиеКоманда=глПослатьКоманду(Сам,Команда);
				Возврат СобытиеКоманда.Обработано;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	возврат 0;
КонецФункции

Функция ОбработкаСобытий(Издатель,Событие) Экспорт
	Сам=Сам();
	Отработали=0;

	Если Событие.Источник="Клавиатура" Тогда
		Отработали = Сам.СобытиеКлавиатуры(Событие);
	ИначеЕсли Событие.Источник="Сканер" Тогда
		Отработали = Сам.СобытиеСканера(Событие);
	ИначеЕсли Событие.Источник="Ридер" Тогда
		Отработали = Сам.СобытиеРидера(Событие);
	ИначеЕсли Событие.Источник="Радиоридер" Тогда
		Отработали = Сам.СобытиеРадиоРидера(Событие);
	ИначеЕсли Событие.Источник="Ключ" Тогда
		Отработали = Сам.СобытиеКлюча(Событие);
	ИначеЕсли Событие.Источник="Команда" Тогда

		Команда=Событие.Описатель.Команда;

		Если Команда="Обновить" Тогда
			Сам.ОбновитьФорму();
			Отработали=1;
		ИначеЕсли Команда="ПРОБИТЬ_ЧЕК" Тогда
			//Сам.Результат=1;
			Сам.ЗакрытьФорму();
			глСобытиеОбработано(Событие);
			Если ТаблицаКарточек.КоличествоСтрок()>0 Тогда

			КонецЕсли;
			возврат 0;
		ИначеЕсли Команда="EDIT_ОТМЕНА" Тогда
			//Сам.Результат=0;
			Сам.ЗакрытьФорму();
			глСобытиеОбработано(Событие);
			возврат 0;
		КонецЕсли;
	КонецЕсли;

	Если Отработали = 1 Тогда
		глСобытиеОбработано(Событие);
		Сам.ОбновитьФорму();
		Возврат 0;
	КонецЕсли;
	возврат 1;
КонецФункции

//------------------------------------ ------------------------------------
Процедура ПриОткрытии()
//#if _NOW_PREPARE_CLASS
	Форма.Параметр._ПриОткрытии(); // для отладки класса
//#endif // _NOW_PREPARE_CLASS
КонецПроцедуры // ПриОткрытии

