//Конфигурация для платформы "1С:Предприятие 7.7" РБ-Софт:Рабочее место кассира.
//Версия 4.57 от 05.06.11 23:24:52
//(c) Баинов Евгений, ООО "РБ-Софт" 2006-2011 г.Улан-Удэ, ул.Балтахинова,17Е,офис 215
//e-mail: bainov@rb-soft.ru  icq: 73718937, телефоны: (3012) 440-357, 278-228
//Сайт проекта: http://code.google.com/p/rbsoft-rmk/
//_______________________________________________________________________________________
//Класс ТабличноеПолеСпискаОбъектов
//_______________________________________________________________________________________
Перем _База Экспорт;
Перем ШрифтГруппы Экспорт,
      ШрифтЭлемента Экспорт,
	  ШрифтЗаголовка Экспорт,
	  ШрифтРодительскойГруппы Экспорт,
	  ШрифтОсновной Экспорт;

Перем ЦветТекстаГруппы Экспорт,
	  ЦветТекстаЭлемента Экспорт,
	  ЦветФонаРодительскойГруппы Экспорт,
	  ЦветТекстаРодительскойГруппы Экспорт;

Перем МенеджерСобытий_ПриСменеГруппы Экспорт;

Перем ВидОбъекта;
Перем фИерархическийСписок Экспорт;
Перем фРежимВыбора Экспорт; //0 - обычная форма, 1 - выбор одного элемента, 2 - множественный выбор, (-1) - форма подбора с таблицей подбора
Перем фВыборГруппы Экспорт; //имеет смысл только при РежимВыбора > 0

Перем фЕстьГруппировки Экспорт;//1 - объекты списка можно группировать, 0 - нельзя


Перем идРодитель;

Перем ТаблицаОбъектов Экспорт;
Перем СтрокаФильтра Экспорт;
Перем СтрокаСортировки Экспорт;
Перем КоличествоОбъектовФильтра Экспорт;

Перем ИмяПоляОтбора;

Перем СписокВыбранныхОбъектов;



Функция Этот(Конт) Возврат Конт; КонецФункции
Функция Сам() Возврат Этот(Контекст) КонецФункции

//абстрактная функция. переопределять обязательно
//определяет вид справочника, который выводится в табличном поле
Функция ВидОбъектов() Экспорт
	//#err Вызов абстрактного метода ВидОбъектов
	возврат "";
КонецФункции

Функция РежимВыбора(_РежимВыбора=-1) Экспорт
	Если _РежимВыбора=-1 Тогда
		Возврат фРежимВыбора;
	Иначе
		фРежимВыбора=_РежимВыбора;
	КонецЕсли;

	Возврат фРежимВыбора;

КонецФункции

Функция ИерархическийСписок(_ИерархическийСписок=1) Экспорт
	Если _ИерархическийСписок=-1 Тогда
		Возврат фИерархическийСписок;
	Иначе
		фИерархическийСписок=_ИерархическийСписок;
	КонецЕсли;

	Возврат фИерархическийСписок;
КонецФункции

Функция ВыборГруппы(_ВыборГруппы=-1) Экспорт
	Если _ВыборГруппы=-1 Тогда
		Возврат фВыборГруппы;
	Иначе
		фВыборГруппы=_ВыборГруппы;
	КонецЕсли;
	Возврат фВыборГруппы;
КонецФункции

Процедура Конструктор()
	_База = Сам().ПолучитьБазовыйКласс("ТабличноеПолеСНастройками");
	Сам=Сам();
	ВидОбъекта=Сам.ВидОбъектов();

	фЕстьГруппировки=0;

	СтрокаФильтра="";
	СтрокаСортировки="";
	КоличествоОбъектовФильтра=100;

	ИмяПоляОтбора="name";
	СписокВыбранныхОбъектов=СоздатьОбъект("СписокЗначений");


	Сам.ВыборГруппы(0);
	Сам.ВводНовыхЭлементов(1);

КонецПроцедуры	// Конструктор

Процедура Деструктор()

КонецПроцедуры

Функция ТекущиеДанные() Экспорт
Перем ИД;

	Сам=Сам();
	Попытка
		ИД=Сам.ТекущиеДанные.ID;
	Исключение
		возврат "";
	КонецПопытки;


	Возврат глБД.ПолучитьОбъектПоИД(ВидОбъекта,ИД);
КонецФункции



//создает экземпляр текущего объекта и возвращает
Функция ПолучитьТекущийОбъект() Экспорт
Перем Объект;
	Сам=Сам();
	Данные=Сам.ТекущиеДанные();
	Если ПустоеЗначение(Данные)=1 Тогда
		Возврат 0;
	КонецЕсли;
	Объект=СоздатьОбъект(ВидОбъекта);
	Если Объект.Прочитать(Данные.ИД)=0 Тогда
		//Объект не прочитался
		Объект.ИД=Данные.ИД;
		Объект.Данные.ИД=Данные.ИД;

	КонецЕсли;
	//глОбщиеФункции.ЗаполнитьСвойства(Объект.Данные,Данные);
	Возврат Объект;
КонецФункции	// ТекущийОбъект



Процедура УстановитьТекущийОбъект(Объект) Экспорт
	Сам=Сам();

	ИД=Объект.Данные.ИД;


	Стр=0;
	Если Сам.ПоставщикДанных.ТаблицаЗначений.НайтиЗначение(ИД,Стр,"ID")=1 Тогда
		Сам.ТекущаяСтрока=Стр;
		Сам.ОбновитьСтроки();

	КонецЕсли;

КонецПроцедуры


Процедура НовыйОбъект() Экспорт
	Сам=Сам();
	Если Сам.фМожноВводитьНовыеЭлементы=1 Тогда
		Объект=СоздатьОбъект(ВидОбъекта);
		Объект.ОткрытьФормуОбъектаМодально();


		Если Объект.Данные.ЭтоНовый=0 Тогда
			Сам.Обновить();
			Сам.УстановитьТекущийОбъект(Объект);

		КонецЕсли;

	КонецЕсли;
КонецПроцедуры

Процедура УдалитьОбъект(Запрашивать=0) Экспорт
	Сам=Сам();

	ТекущийОбъект=Сам.ПолучитьТекущийОбъект();
	Если ПустоеЗначение(ТекущийОбъект)=0 Тогда
		Если Запрашивать=1 Тогда
			Если глВопрос("Удалить объект "+СокрЛП(ТекущийОбъект.Данные.Наименование)+"?
			|ИД="""+ТекущийОбъект.Данные.ИД+"""","Да+Нет")="Да" Тогда
				ТекущийОбъект.Удалить();
				Сам.Обновить();
			КонецЕсли;
		Иначе
			ТекущийОбъект.Удалить();
			Сам.Обновить();
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры

//абстрактный
//обязательно переопределяется в потомках
//должна обновлять текущие данные табличного поля из текущего объекта

Процедура ОбновитьТекущиеДанные(ТекущийОбъект) Экспорт

КонецПроцедуры


Процедура РедактироватьОбъект() Экспорт
	Сам=Сам();

	ТекущийОбъект=Сам.ПолучитьТекущийОбъект();
	Если ПустоеЗначение(ТекущийОбъект)=0 Тогда

		ТекущийОбъект.ОткрытьФормуОбъектаМодально();
		Сам.ОбновитьТекущиеДанные(ТекущийОбъект);
		Сам.Обновить();
	КонецЕсли;
КонецПроцедуры



Процедура ПриВыводеСтроки(ОформлениеСтроки, ДанныеСтроки) Экспорт

	Если Сам().Колонки.Картинка.Видимость = 1 Тогда

		Ячейка = ОформлениеСтроки.Ячейки.Получить("Картинка");
		Ячейка.ОтображатьКартинку = 1;
		Ячейка.ОтображатьТекст = 0;
		Ячейка.Текст="";

		Если ДанныеСтроки.IsFolder = 1 Тогда

			Если ДанныеСтроки.id=идРодитель Тогда
				ОформлениеСтроки.Шрифт=ШрифтРодительскойГруппы;
				ОформлениеСтроки.ЦветФона=ЦветФонаРодительскойГруппы;
				ОформлениеСтроки.ЦветТекста=ЦветТекстаРодительскойГруппы;

				Ячейка.ИндексКартинки = 2;
			Иначе
				ОформлениеСтроки.Шрифт=ШрифтГруппы;
				Ячейка.ИндексКартинки = 0;
			КонецЕсли;
		Иначе
			ОформлениеСтроки.Шрифт=ШрифтЭлемента;
			Ячейка.ИндексКартинки = 4;
		КонецЕсли;

		Если ДанныеСтроки.IsMark = 1 Тогда
			Ячейка.ИндексКартинки = Ячейка.ИндексКартинки+1;
		КонецЕсли;

	КонецЕсли;



КонецПроцедуры	// ПриВыводеСтроки


Функция ПолучитьОбъектыПоФильтру(ВидОбъекта,СтрокаФильтра,ИмяПоляОтбора,КоличествоЭлементов) Экспорт
	возврат глБД.ПолучитьОбъектыПоФильтру(ВидОбъекта,СтрокаФильтра,ИмяПоляОтбора,КоличествоЭлементов);
КонецФункции


Функция ПолучитьОбъекты(ВидОбъекта,КоличествоЭлементов) Экспорт
	возврат глБД.ПолучитьОбъекты(ВидОбъекта,КоличествоЭлементов);
КонецФункции

//устанавливает фильтр по полю, указанному при вызове функции ПолеОтбора
//пСтрокаФильтра - строка слов через пробел
//КоличествоЭлементов - количество элеиментов выборки. если 0 - то выбираются все элементы, удовлетворяющие условию фильтра

Процедура УстановитьФильтр(пСтрокаФильтра="", КоличествоЭлементов=0) Экспорт

	Сам = Сам();

	СтрокаФильтра=пСтрокаФильтра;

	НомерЭлемента=0;

	Если Сам.фЕстьГруппировки=1 Тогда
		Если СтрокаФильтра="" Тогда
			Сам.УстановитьРодителя(идРодитель,"");
			Возврат;
		Иначе
			ТаблицаОбъектов=Сам.ПолучитьОбъектыПоФильтру(ВидОбъекта,СтрокаФильтра,ИмяПоляОтбора,КоличествоЭлементов);
		КонецЕсли;
	ИначеЕсли СтрокаФильтра="" Тогда
		ТаблицаОбъектов = Сам.ПолучитьОбъекты(ВидОбъекта,КоличествоЭлементов);
	Иначе
		ТаблицаОбъектов=Сам.ПолучитьОбъектыПоФильтру(ВидОбъекта,СтрокаФильтра,ИмяПоляОтбора,КоличествоЭлементов);
	КонецЕсли;



	ТаблицаОбъектов.НоваяКолонка("IsFolder","Число");
	ТаблицаОбъектов.НоваяКолонка("IsMark","Число");


	Если ТаблицаОбъектов.КоличествоСтрок()>0 Тогда
		ТаблицаОбъектов.Заполнить(0,,,"IsFolder");
		ТаблицаОбъектов.Заполнить(0,,,"IsMark");
	КонецЕсли;


	Если ПустоеЗначение(Сам.ПоставщикДанных)=1 Тогда
		ПоставщикДанных=СоздатьОбъект("ПоставщикДанныхТЗ");
		ПоставщикДанных.УстТаблицуЗначений(ТаблицаОбъектов);
		Сам.ПоставщикДанных=ПоставщикДанных;
	КонецЕсли;




	Попытка
		//Объект может уже отсутствовать в базе на момент вызова метода
		ТекущийОбъект=Сам.ПолучитьТекущийОбъект();
	Исключение
	    ТекущийОбъект=0;
	КонецПопытки;

	НомерСтроки=0;
	Если ПустоеЗначение(Сам.ТекущаяСтрока)=0 Тогда
		НомерСтроки=Сам.ТекущаяСтрока;
	КонецЕсли;

	Сам.ПоставщикДанных.УстТаблицуЗначений(ТаблицаОбъектов);

	Если ПустоеЗначение(ТекущийОбъект)=0 Тогда

		ID=ТекущийОбъект.Данные.ИД;
		Стр=0;
		Если ТаблицаОбъектов.НайтиЗначение(ID,Стр,"ID")=1 Тогда
			НомерЭлемента=Стр;
		ИначеЕсли ТаблицаОбъектов.КоличествоСтрок()>НомерСтроки Тогда
			НомерЭлемента=НомерСтроки;
		Иначе
			НомерЭлемента=ТаблицаОбъектов.КоличествоСтрок();
		КонецЕсли;
	Иначе
		Если ТаблицаОбъектов.КоличествоСтрок()>НомерСтроки Тогда
			НомерЭлемента=НомерСтроки;
		Иначе
			НомерЭлемента=ТаблицаОбъектов.КоличествоСтрок();
		КонецЕсли;
	КонецЕсли;





	//это чтобы при выходе из группы наверх текущей была группа из которой только что мы вышли

    Если (НомерЭлемента>0)И(НомерЭлемента<=ТаблицаОбъектов.КоличествоСтрок()) Тогда
		Сам.ТекущаяСтрока=НомерЭлемента;
	КонецЕсли;


	Сам.ОбновитьСтроки();

КонецПроцедуры

//Устанавливает поле отбора, по которому затем можно ставить фильтр
//если параметр не передавали то ничего не делает
//возвращает текущее поле отбора

Функция ПолеОтбора(ИмяПоля="") Экспорт
	Если ИмяПоля<>"" Тогда
		ИмяПоляОтбора=ИмяПоля;
	КонецЕсли;
	Возврат ИмяПоляОтбора;
КонецФункции




Функция УстановитьРодителя(_идРодитель, идЭлемент) Экспорт

	Результат= 	1;
	Сам = Сам();

	идРодитель = _идРодитель;


	ТЗГрупп=глБД.ПолучитьГруппы(ВидОбъекта,идРодитель);

	ТаблицаОбъектов=глБД.ПолучитьОбъектыГруппы(ВидОбъекта,идРодитель,СтрокаСортировки);
	ТаблицаОбъектов.НоваяКолонка("IsFolder","Число");
	ТаблицаОбъектов.НоваяКолонка("IsMark","Число");


	Если ТаблицаОбъектов.КоличествоСтрок()>0 Тогда
		ТаблицаОбъектов.Заполнить(0,,,"IsFolder");
		ТаблицаОбъектов.Заполнить(0,,,"IsMark");
	КонецЕсли;

	НомерЭлемента=0;
	//вставляем ссылки на вложенные группы
	ТЗГрупп.ВыбратьСтроки();
	Пока ТЗГрупп.ПолучитьСтроку()=1 Цикл
		ТаблицаОбъектов.НоваяСтрока(ТЗГрупп.НомерСтроки);
		ТаблицаОбъектов.IsFolder=1;
		ТаблицаОбъектов.Name=ТЗГрупп.Name;
		ТаблицаОбъектов.ID=СокрП(ТЗГрупп.ID);
		ТаблицаОбъектов.IDParent=СокрП(ТЗГрупп.IDParent);
		Если СокрЛП(ТаблицаОбъектов.ID)=СокрЛП(идЭлемент) Тогда
			НомерЭлемента=ТаблицаОбъектов.НомерСтроки;
		КонецЕсли;
	КонецЦикла;

	//вставляем ссылку на родительскую группу
	//получаем ТЗ с элементами групп по ИД
	//должен быть один элемент. но при коллизиях их может быть больше
	//берем первый попавшийся
	ТЗ=глБД.ПолучитьГруппуПоИД(ВидОбъекта,идРодитель);

	Если ПустаяСтрока(идРодитель)=0 Тогда
		//Хотим сделать родителем определенную группу
		Если ТЗ.КоличествоСтрок()=0 Тогда
			//нет такой группы
			//Но товары все таки выведем

			Результат= 0;
		КонецЕсли;
	КонецЕсли;
	ТЗ.ВыбратьСтроки();
	Пока ТЗ.ПолучитьСтроку()=1 Цикл
		ТаблицаОбъектов.НоваяСтрока(1);
		ТаблицаОбъектов.IsFolder=1;
		ТаблицаОбъектов.Name=ТЗ.Name;
		ТаблицаОбъектов.ID=СокрП(ТЗ.ID);
		ТаблицаОбъектов.IDParent=СокрП(ТЗ.IDParent);

		НомерЭлемента=НомерЭлемента+1;
	КонецЦикла;


	Если ПустоеЗначение(Сам.ПоставщикДанных)=1 Тогда
		ПоставщикДанных=СоздатьОбъект("ПоставщикДанныхТЗ");
		ПоставщикДанных.УстТаблицуЗначений(ТаблицаОбъектов);
		Сам.ПоставщикДанных=ПоставщикДанных;
	КонецЕсли;


	ТекущийОбъект=Сам.ПолучитьТекущийОбъект();


	Сам.ПоставщикДанных.УстТаблицуЗначений(ТаблицаОбъектов);

	Если ПустоеЗначение(ТекущийОбъект)=0 Тогда

		ID=ТекущийОбъект.Данные.ИД;
		Стр=0;
		Если ТаблицаОбъектов.НайтиЗначение(ID,Стр,"ID")=1 Тогда
			НомерЭлемента=Стр;
		КонецЕсли;
	КонецЕсли;



	//это чтобы при выходе из группы наверх текущей была группа из которой только что мы вышли

    Если (НомерЭлемента>0)И(НомерЭлемента<=ТаблицаОбъектов.КоличествоСтрок()) Тогда
		Сам.ТекущаяСтрока=НомерЭлемента;
	КонецЕсли;

	Сам.ОбновитьСтроки();

	МенеджерСобытий_ПриСменеГруппы.ПослатьСобытие(Контекст, идРодитель);

	Возврат Результат;
КонецФункции

Функция ИДРодителя() Экспорт
	Возврат идРодитель;
КонецФункции

Процедура Обновить() Экспорт
	Сам=Сам();

	Если Сам.фЕстьГруппировки=1 Тогда
		Если ПустаяСтрока(СтрокаФильтра)=1 Тогда
			Сам.УстановитьРодителя(Сам.ИДРодителя(),"");
		Иначе
			Сам.УстановитьФильтр(СтрокаФильтра,КоличествоОбъектовФильтра);
		КонецЕсли;
	Иначе

		Сам.УстановитьФильтр(СтрокаФильтра,КоличествоОбъектовФильтра);

	КонецЕсли;

КонецПроцедуры



Функция ПерейтиВГруппу() Экспорт
	Сам = Сам();
	Если Сам.ТекущиеДанные.IsFolder = 1 Тогда
		идРодитель = Сам.ТекущиеДанные.ID;
		УстановитьРодителя(идРодитель, идРодитель);
		Возврат 1;
	КонецЕсли;
	Возврат 0;
КонецФункции



//выйти на уровень вверх

Функция Вверх() Экспорт

	Сам = Сам();
	Если ПустоеЗначение(идРодитель)=0 Тогда

		ТекущийРодитель=идРодитель;
		Если идРодитель=Сам.ТекущиеДанные.id Тогда
			идРодитель=Сам.ТекущиеДанные.idParent;
		Иначе
			ТЗ=глБД.ПолучитьГруппуПоИД(ВидОбъекта,идРодитель);
			Если ТЗ.КоличествоСтрок()>0 Тогда
				ТЗ.ПолучитьСтрокуПоНомеру(1);
				идРодитель=ТЗ.idParent;
			Иначе
				Возврат 0;
			КонецЕсли;
		КонецЕсли;

		УстановитьРодителя(идРодитель, ТекущийРодитель);


		Возврат 1;

	КонецЕсли;

	Возврат 0;
КонецФункции


Функция ЭтоГруппа() Экспорт
	Сам=Сам();


	Попытка
		ЭтоГруппа = Сам.ТекущиеДанные.IsFolder;
	Исключение
		ЭтоГруппа = 0;
	КонецПопытки;
	Возврат ЭтоГруппа ;
КонецФункции


Процедура Выбор() Экспорт

    Сам = Сам();


	Если Сам.ЭтоГруппа()=1 Тогда
		Если Сам.ТекущиеДанные.id=идРодитель Тогда
			Вверх();
		Иначе
			ПерейтиВГруппу();
		КонецЕсли;
	Иначе
		ТекОбъект=Сам.ПолучитьТекущийОбъект();


		Если Сам.РежимВыбора()=0 Тогда
			ТекОбъект.ОткрытьФормуОбъектаМодально();


			Сам.ОбновитьТекущиеДанные(ТекОбъект);

			Сам.ОбновитьСтроки();

		ИначеЕсли Сам.РежимВыбора()=1 Тогда

			Сам.ВыполнитьВыбор(ТекОбъект);
		ИначеЕсли Сам.РежимВыбора()=2 Тогда

			СписокВыбранныхОбъектов.ДобавитьЗначение(ТекОбъект);
			Сам.ВыполнитьВыбор(ТекОбъект);
		ИначеЕсли Сам.РежимВыбора()=3 Тогда
			//подбор
			Сам.ВыполнитьВыбор(ТекОбъект);
		Иначе
			Сам.ВыполнитьВыбор(ТекОбъект);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры	// Выбор

Процедура НастройкаПолей() Экспорт
	Сам=Сам();

	Сам.Колонки.Добавить("Картинка");

	Сам.ВертСкроллер=1;
	Сам.РежимВыделенияСтроки=1;
	Сам.ВертикальныеЛинии=1;
	Сам.ГоризонтальныеЛинии=1;
	Сам.СтильЗаголовков=1;
	Сам.ТаймаутБыстрогоПоиска=2;
	Сам.ТаймаутОбновления=0;
	Сам.ИзменятьПозициюКолонок=1;
	Сам.РазрешитьНачалоПеретаскивания=1;
	Сам.РазрешитьПеретаскивание=1;
	Сам.ЧередованиеЦветовСтрок=0;



	ЦветТекстаГруппы=глОбщиеФункции.ПолучитьЦвет(0,0,200);
	ЦветТекстаЭлемента=глОбщиеФункции.ПолучитьЦвет(0,0,0);

	ЦветТекстаРодительскойГруппы=глОбщиеФункции.ПолучитьЦвет(0,0,0);
	ЦветФонаРодительскойГруппы=глОбщиеФункции.ПолучитьЦвет(200,255,200);


	Сам.ЦветФонаЧередованияСтрок=глОбщиеФункции.ПолучитьЦвет(200,250,200);
	Сам.ЦветФонаВыделения=глОбщиеФункции.ПолучитьЦвет(255,255,0);
	Сам.ЦветТекстаВыделения=глОбщиеФункции.ПолучитьЦвет(0,0,200);
	Сам.ЦветЛиний=глОбщиеФункции.ПолучитьЦвет(200,200,200);


	Сам.Колонки.Картинка.Ширина=3;

	КартинкаПапок=СоздатьОбъект("Картинка");


	КартинкаПапок.Загрузить("СостоянияСправочника");

	Сам.Колонки.Картинка.УстановитьКартинкиСтрок(КартинкаПапок,23);

КонецПроцедуры	// НастройкаПолей


Процедура НастройкаШрифтов() Экспорт
	ШрифтГруппы   = глФабрикаОбъектов.Шрифт("Arial", 10, 1,0);
	ШрифтЭлемента =глФабрикаОбъектов.Шрифт("Arial", 9, 0);
	ШрифтЗаголовка=глФабрикаОбъектов.Шрифт("Arial", 10, 0);
	ШрифтРодительскойГруппы=глФабрикаОбъектов.Шрифт("Arial", 10, 1);
	ШрифтОсновной =глФабрикаОбъектов.Шрифт("Arial", 10, 0);

КонецПроцедуры	//




Функция Инит(КонтекстФормы, ИдентификаторРеквизита,пРежимВыбора=0) Экспорт

	_База.Инит(КонтекстФормы, ИдентификаторРеквизита);
	Сам=Сам();
	Сам.НастройкаШрифтов();
	Сам.НастройкаПолей();

	идРодитель="";

	Сам.РежимВыбора(пРежимВыбора);
	Сам.ВыборГруппы(0);
	Сам.ИерархическийСписок(1);
	Сам.ВводНовыхЭлементов(1);

	МенеджерСобытий_ПриСменеГруппы = СоздатьОбъект("МенеджерСобытий");
	Возврат 1;
КонецФункции

Процедура Очистить() Экспорт
	ТаблицаОбъектов.УдалитьСтроки();
КонецПроцедуры


Процедура ПриОткрытии()
	//#if _NOW_PREPARE_CLASS
	Форма.Параметр._ПриОткрытии(); // для отладки класса
	//#endif // _NOW_PREPARE_CLASS
КонецПроцедуры	// ПриОткрытии


