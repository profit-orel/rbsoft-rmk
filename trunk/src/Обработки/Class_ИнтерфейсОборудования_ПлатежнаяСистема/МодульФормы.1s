//Конфигурация для платформы "1С:Предприятие 7.7" РБ-Софт:Рабочее место кассира.
//Версия 4.43 от 19.07.10 20:54:19
//Назначение: Автоматизация POS-узлов в магазинах (Point of sale).
//(c) Баинов Евгений, ООО "РБ-Софт" 2006, г.Улан-Удэ, проспект 50-летия Октября,21А,офис 110 
//e-mail: bainov@rb-soft.ru  icq: 73718937, телефоны: (3012) 44-03-57, 44-76-42, 44-86-58
//---------------------------------------------------------------------------------------
//Данная программа является свободным программным обеспечением.
//Вы вправе распространять ее и/или модифицировать в соответствии с условиями версии 2 
//либо по вашему выбору с условиями более поздней версии Стандартной Общественной Лицензии GNU,
//опубликованной Free Software Foundation. 
//Мы распространяем данную программу в надежде на то, что она будет вам полезной, 
//однако НЕ ПРЕДОСТАВЛЯЕМ НА НЕЕ НИКАКИХ ГАРАНТИЙ, 
//в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
//и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ.
//Для получения более подробной информации ознакомьтесь со Стандартной Общественной Лицензией GNU.
//Вместе с данной программой вы должны были получить экземпляр Стандартной Общественной Лицензии GNU.
//Если вы его не получили, сообщите об этом в Free Software Foundation, Inc.,
//59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//_______________________________________________________________________________________
//Имя модуля:
// <Вставить имя модуля>
//_______________________________________________________________________________________
//Разработчик: Баинов Евгений, e-mail: bainov@rb-soft.ru , icq: 73718937
//_______________________________________________________________________________________
//Назначение модуля:
// <Вставить описание модуля>
//
//_______________________________________________________________________________________
Перем _База Экспорт;
Перем ЛимитОплаты ;
Перем Результат Экспорт;
Перем Режим Экспорт; //Строка. ОПЛАТА,ВОЗВРАТ,ОЖИДАНИЕ

Функция Этот(Конт) Возврат Конт; КонецФункции
Функция Сам() Возврат Этот(Контекст) КонецФункции




Функция Вид() Экспорт
	возврат "ИнтерфейсОборудования.ПлатежнаяСистема";
КонецФункции	// Вид

Функция ВидУстройства() Экспорт
	Возврат "ПлатежнаяСистема";
КонецФункции


//Устанавливает разрешенныу к оплате предельную сумму
Процедура УстановитьЛимитОплаты(Сумма) Экспорт
	Сам=Сам();
	ЛимитОплаты=Сумма;
КонецПроцедуры

Функция ПолучитьЛимитОплаты() Экспорт
	Возврат ЛимитОплаты;
КонецФункции

Процедура УстановитьРежим(_Режим) Экспорт
	Режим=_Режим;
КонецПроцедуры


Функция НормализоватьВремя(_Дата) Экспорт
	возврат СтрЗаменить(Формат(_Дата,"ДГГГГММДД"),".","");
КонецФункции

Процедура СоздатьСтруктуруПараметров() Экспорт
	Сам=Сам();

//	Сам.Параметры.Вставить("",20);


КонецПроцедуры

//------------------------------------ ------------------------------------
Процедура Конструктор()
	_База = Этот(Контекст).ПолучитьБазовыйКласс("ИнтерфейсОборудования");
	Результат=0;
	ЛимитОплаты=0;
	Сам=Сам();
	Сам.УстановитьРежим("ОЖИДАНИЕ");
КонецПроцедуры // Конструктор

//------------------------------------ ------------------------------------
Процедура Деструктор()
КонецПроцедуры // Деструктор

Функция ИмяТаблицыБД() Экспорт
	Возврат "devpays";
КонецФункции

Функция Оплатить(ИДКарты,НомерЧека,СуммаОплаты) Экспорт
	Сам=Сам();
	Пользователь=глПраваДоступа.ТекущийПользователь;
	_КодПользователя="";
	_ИмяПользователя="";

	Попытка
		Если ПустоеЗначение(Пользователь)=0 Тогда
			_КодПользователя=глПраваДоступа.ТекущийПользователь.Наименование;
			_ИмяПользователя=глПраваДоступа.ТекущийПользователь.ИД;
		КонецЕсли;
	Исключение
	КонецПопытки;

	НомерОперации=Сам.Драйвер.НачатьОперацию();
	Если НомерОперации>0 Тогда
		Если Сам.Драйвер.Оплатить(ИДКарты,СуммаОплаты)=1 Тогда
			Если Сам.Драйвер.ЗавершитьОперацию(НомерОперации)=1 Тогда
				возврат 1;
			КонецЕсли;
		Иначе
			Если Сам.Драйвер.ОтменитьОперацию(НомерОперации)=1 Тогда
				возврат 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат 0;
КонецФункции

Функция ВернутьОплату(ИДКарты,СуммаОплаты) Экспорт
	Сам=Сам();
	Пользователь=глПраваДоступа.ТекущийПользователь;
	_КодПользователя="";
	_ИмяПользователя="";

	Попытка
		Если ПустоеЗначение(Пользователь)=0 Тогда
			_КодПользователя=глПраваДоступа.ТекущийПользователь.Наименование;
			_ИмяПользователя=глПраваДоступа.ТекущийПользователь.ИД;
		КонецЕсли;
	Исключение
	КонецПопытки;

	НомерОперации=Сам.Драйвер.НачатьОперацию();
	Если НомерОперации>0 Тогда
		Если Сам.Драйвер.Вернуть(ИДКарты,СуммаОплаты)=1 Тогда
			Если Сам.Драйвер.ЗавершитьОперацию(НомерОперации)=1 Тогда
				возврат 1;
			КонецЕсли;
		Иначе
			Если Сам.Драйвер.ОтменитьОперацию(НомерОперации)=1 Тогда
				возврат 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат 0;

КонецФункции

//1- запрос выполнен
//0- не выполнен
Функция ПолучитьСтатусКарты(КодКарты,СтатусПлатежнойКарты="") Экспорт
	Сам=Сам();
	СтатусПлатежнойКарты=НовыйОбъект("СтатусПлатежнойКарты");
	Клиент=Сам.Драйвер.ДрайверSQL;

	ТекстЗапроса="SELECT rbsoft_cards.GetCardStatus("""+КодКарты+""");";

	Если Клиент.ВыполнитьЗапрос(ТекстЗапроса) = 1 Тогда

		ТабРез = Клиент.ПолучитьВсе();
		Если ТабРез.КоличествоСтрок()=0 Тогда
			Возврат 0;
		Иначе
			ТабРез.ПолучитьСтрокуПоНомеру(1);

			////////////////
			//вставить анализ полученных данных
			//СтатусПлатежнойКарты.Статус
			//СтатусПлатежнойКарты.Сумма
			//СтатусПлатежнойКарты.ДатаАктивации
			//СтатусПлатежнойКарты.ДатаБлокировки
			////////////////

			Возврат 1;
		КонецЕсли;

    Иначе
  		Сам.УстановитьОшибку(Клиент.ПоследняяОшибка());
  	КонецЕсли;
	Возврат 0;
КонецФункции
//
//возвращает остаток на карте
//ЗапросВыполнен=1 - Запрос был выполнен успешно, 0 - были ошибки
//СтатусПлатежнойКарты. - статус карты
Функция ОстатокНаКарте(КодКарты,ЗапросВыполнен,СтатусПлатежнойКарты="") Экспорт
Перем _Статус;
	_ЗапросВыполнен=ПолучитьСтатусКарты(КодКарты,_Статус);
	ЗапросВыполнен=_ЗапросВыполнен;
	СтатусПлатежнойКарты=_Статус;
	Если _ЗапросВыполнен=1 Тогда
		возврат _Статус.Сумма;
	КонецЕсли;
	Возврат 0;
КонецФункции


//возвращает 	-1- не удалось соединиться с сервером
//				 1 - если карта активна
//				 0 - по карте нельзя проводить операции
//ОписаниеСтатуса - структура СтатусПлатежнойКарты


Функция КартаАктивна(КодКарты,СтатусПлатежнойКарты="") Экспорт
Перем _Статус;
	_ЗапросВыполнен=ПолучитьСтатусКарты(КодКарты,_Статус);

	ЗапросВыполнен=_ЗапросВыполнен;
	СтатусПлатежнойКарты=_Статус;

	Если _ЗапросВыполнен=1 Тогда
		Если _Статус.Статус=-1 Тогда
			Возврат -1;
		ИначеЕсли _Статус.Статус=1 Тогда
			Возврат 1;
		Иначе
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	Возврат -1;
КонецФункции


//возврашщает 1- карта была успешно активирована
//0 - были ошибки
//-1- не удалось соединиться с сервером
//-2- карта уже была активирована

//СтатусПлатежнойКарты - после активации запрашивается статус карты

Функция Активировать(КодКарты,СтатусПлатежнойКарты="") Экспорт
Перем _Статус;
	Сам=Сам();

	Клиент=Сам.Драйвер.ДрайверSQL;

	юзер=Строка(глПраваДоступа.ТекущийПользователь);
	датанасервер=НормализоватьВремя(ТекущаяДата());
	времянасервер=Строка(ТекущееВремя());

	ТекстЗапроса="SELECT rbsoft_cards.ChangeCardActivity("""+КодКарты+""",1,"""+датанасервер+""","""+времянасервер+""","""+юзер+""","""+глИмяPOS+""");";

	Если Клиент.ВыполнитьЗапрос(ТекстЗапроса) = 1 Тогда

		ТабРез = Клиент.ПолучитьВсе();
		Если ТабРез.КоличествоСтрок()=0 Тогда
			Возврат 0;
		Иначе
			ТабРез.ПолучитьСтрокуПоНомеру(1);

			////////////////
			//вставить анализ полученных данных


			////////////////

			Возврат 1;
		КонецЕсли;

    Иначе
  		Сам.УстановитьОшибку(Клиент.ПоследняяОшибка());
  	КонецЕсли;
	Возврат 0;

КонецФункции



//Закрывает операционный день
Функция ЗакрытьСмену() Экспорт

	Возврат 1;
КонецФункции



Функция ПолучитьКарту(НомерКарты) Экспорт
	Сам=Сам();
	Рез=Сам.Драйвер.ПолучитьКарту(НомерКарты);
	Если ПустоеЗначение(рез)=1 Тогда
		Сам.УстановитьОшибку(Сам.Драйвер.ПоследняяОшибка());
	Иначе
		Сам.СброситьОшибку();
	КонецЕсли;
	возврат Рез;
КонецФункции

//------------------------------------ ------------------------------------
Процедура ПриОткрытии()
//#if _NOW_PREPARE_CLASS
	Форма.Параметр._ПриОткрытии(); // для отладки класса
//#endif // _NOW_PREPARE_CLASS
КонецПроцедуры // ПриОткрытии

