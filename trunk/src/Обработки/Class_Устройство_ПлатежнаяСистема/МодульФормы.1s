//Конфигурация для платформы "1С:Предприятие 7.7" РБ-Софт:Рабочее место кассира.
//Версия 4.43 от 19.07.10 20:54:20
//Назначение: Автоматизация POS-узлов в магазинах (Point of sale).
//(c) Баинов Евгений, ООО "РБ-Софт" 2006, г.Улан-Удэ, проспект 50-летия Октября,21А,офис 110 
//e-mail: bainov@rb-soft.ru  icq: 73718937, телефоны: (3012) 44-03-57, 44-76-42, 44-86-58
//---------------------------------------------------------------------------------------
//Данная программа является свободным программным обеспечением.
//Вы вправе распространять ее и/или модифицировать в соответствии с условиями версии 2 
//либо по вашему выбору с условиями более поздней версии Стандартной Общественной Лицензии GNU,
//опубликованной Free Software Foundation. 
//Мы распространяем данную программу в надежде на то, что она будет вам полезной, 
//однако НЕ ПРЕДОСТАВЛЯЕМ НА НЕЕ НИКАКИХ ГАРАНТИЙ, 
//в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
//и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ.
//Для получения более подробной информации ознакомьтесь со Стандартной Общественной Лицензией GNU.
//Вместе с данной программой вы должны были получить экземпляр Стандартной Общественной Лицензии GNU.
//Если вы его не получили, сообщите об этом в Free Software Foundation, Inc.,
//59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//_______________________________________________________________________________________
//Имя модуля:
// <Вставить имя модуля>
//_______________________________________________________________________________________
//Разработчик: Баинов Евгений, e-mail: bainov@rb-soft.ru , icq: 73718937
//_______________________________________________________________________________________
//Назначение модуля:
// <Вставить описание модуля>
//
//_______________________________________________________________________________________
Перем _База Экспорт;
Перем РедакторСтроки Экспорт;//Класс-редактор текста. Отрабатывает клавиатурный ввод в режиме товары
Перем ЛимитОплаты Экспорт;


Функция Этот(Конт) Возврат Конт; КонецФункции
Функция Сам() Возврат Этот(Контекст) КонецФункции



Функция Вид() Экспорт
	возврат "Устройство.ПлатежнаяСистема";
КонецФункции	// Вид


Функция ТипУстройства() Экспорт
	возврат "ПлатежнаяСистема";
КонецФункции	// ТипУстройства


//------------------------------------ ------------------------------------
Процедура Конструктор()
	_База = Этот(Контекст).ПолучитьБазовыйКласс("Устройство");
	Сам=Сам();
	Сам.Данные.Порт.ТипПорта="IP";
	ЛимитОплаты=0;

	РедакторСтроки=СоздатьОбъект("РедакторСтроки");
КонецПроцедуры // Конструктор

//------------------------------------ ------------------------------------
Процедура Деструктор()

КонецПроцедуры // Деструктор


//описать действия по событию сканера
//возвращает 1- событие обработано, дальнейшая обработка в подписчиках на событие не требуется
//           0- можно продолжиь дальнейшую обработку события
Функция СобытиеСканера(Событие) Экспорт
	Сам=Сам();
	Если Событие.Источник="Сканер" Тогда

		Если ПустоеЗначение(Событие.Описатель.Объект)=1 Тогда
			//глПредупреждение("Не найдена карта по штрихкоду "+Событие.Описатель.Данные+"
			//|Платежная система.");
		Иначе

			Если Событие.Описатель.ТипОбъекта="Товар" Тогда
				глПредупреждение("Прочитали штрихкод товара.",2);
				Возврат 1;
			ИначеЕсли Событие.Описатель.ТипОбъекта="Пользователь" Тогда
				Пользователь=Событие.Описатель.Объект;
				глПраваДоступа.УстановитьПользователя(Пользователь);
				Возврат 1;
			ИначеЕсли Событие.Описатель.ТипОбъекта="ИДКарта" Тогда
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат 0;
КонецФункции

//описать действия по событию ридера карточек
//возвращает 1- событие обработано, дальнейшая обработка в подписчиках на событие не требуется
//           0- можно продолжиь дальнейшую обработку события

Функция СобытиеРидера(Событие) Экспорт
	Сам=Сам();
	Если Событие.Источник="Ридер" Тогда

		Если ПустоеЗначение(Событие.Описатель.Объект)=1 Тогда

			Если глНастройки.ПолучитькакЧисло("CARDS/ShowMagneticReaderData")=1 Тогда
				глПредупреждение("Не найдена карта  по данным ридера.
				|"+Событие.Описатель.Данные+"
				|Платежная система.");
			Иначе
				глПредупреждение("Не найдена карта по данным ридера.
				|Платежная система.");
			КонецЕсли;

		Иначе

			Если Событие.Описатель.ТипОбъекта="Пользователь" Тогда
				Пользователь=Событие.Описатель.Объект;
				глПраваДоступа.УстановитьПользователя(Пользователь);
				Возврат 1;
			ИначеЕсли Событие.Описатель.ТипОбъекта="ИДКарта" Тогда
				глПредупреждение("Прочитали дисконтную карту.",2);
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат 0;
КонецФункции


//описать действия по событию радиоридера (проксимити)
//возвращает 1- событие обработано, дальнейшая обработка в подписчиках на событие не требуется
//           0- можно продолжиь дальнейшую обработку события

Функция СобытиеРадиоРидера(Событие) Экспорт
	Сам=Сам();
	Если Событие.Источник="Радиоридер" Тогда

		Если ПустоеЗначение(Событие.Описатель.Объект)=1 Тогда

			Если глНастройки.ПолучитькакЧисло("CARDS/ShowMagneticReaderData")=1 Тогда
				глПредупреждение("Не найдена карта по данным радиоридера.
				|"+Событие.Описатель.Данные+"
				|Платежная система.");
			Иначе
				глПредупреждение("Не найдена карта по данным ридера.
				|Платежная система.");
			КонецЕсли;

		Иначе

			Если Событие.Описатель.ТипОбъекта="Пользователь" Тогда
				Пользователь=Событие.Описатель.Объект;
				глПраваДоступа.УстановитьПользователя(Пользователь);
				Возврат 1;
			ИначеЕсли Событие.Описатель.ТипОбъекта="ИДКарта" Тогда
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат 0;
КонецФункции

//описать действия по событию от клавиатуры
//возвращает 1- событие обработано, дальнейшая обработка в подписчиках на событие не требуется
//           0- можно продолжиь дальнейшую обработку события

Функция СобытиеКлавиатуры(Событие) Экспорт
	Сам=Сам();
	Если Событие.Источник="Клавиатура" Тогда

		Если Событие.Обработано=0 Тогда

			РедакторСтроки.ВнешнееСобытие(Сам,Событие);

			Если Событие.Обработано=0 Тогда
				Команда=глДрайверы.Клавиатура.ПолучитьКоманду(Событие.Описатель.Данные);
				Если Команда<>"" Тогда
					глСобытиеОбработано(Событие);
					глПослатьКоманду(Сам,Команда);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если Событие.Обработано=1 Тогда
			Сам.ТребуетсяОтображение();
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	возврат 0;
КонецФункции






Функция Оплатить(НомерОперации=0,ИДКарты="",Сумма,СуммаПрошла) Экспорт
	Сам=Сам();

	Сам.УстановитьЛимитОплаты(Сумма);


	Рез=Сам.ИнтерфейсОборудования.Оплатить(НомерОперации,ИДКарты,Сумма,СуммаПрошла);
	Если Рез=0 Тогда
		Сам.УстановитьОшибку(Сам.ИнтерфейсОборудования.ПоследняяОшибка());
	Иначе
		Сам.СброситьОшибку();
	КонецЕсли;
	Возврат Рез
КонецФункции

Функция Вернуть(НомерОперации=0,ИДКарты="",Сумма,СуммаПрошла) Экспорт
	Сам=Сам();

	Рез=Сам.ИнтерфейсОборудования.Вернуть(НомерОперации,ИДКарты,Сумма,СуммаПрошла);
	Если Рез=0 Тогда
		Сам.УстановитьОшибку(Сам.ИнтерфейсОборудования.ПоследняяОшибка());
	Иначе
		Сам.СброситьОшибку();
	КонецЕсли;
	Возврат Рез
КонецФункции

Функция НачатьОперацию() Экспорт
	Сам=Сам();
	НомерОперации=Сам.ИнтерфейсОборудования.НачатьОперацию();
	Если НомерОперации=0 Тогда
		Сам.УстановитьОшибку(Сам.ИнтерфейсОборудования.ПоследняяОшибка());
	Иначе
		Сам.СброситьОшибку();
	КонецЕсли;
	Возврат НомерОперации;
КонецФункции

Функция ЗавершитьОперацию(НомерОперации=0) Экспорт
	Сам=Сам();
	Рез=Сам.ИнтерфейсОборудования.ЗавершитьОперацию(НомерОперации);
	Если Рез=0 Тогда
		Сам.УстановитьОшибку(Сам.ИнтерфейсОборудования.ПоследняяОшибка());
	Иначе
		Сам.СброситьОшибку();
	КонецЕсли;
	Возврат Рез;
КонецФункции

Функция ОтменитьОперацию(НомерОперации=0) Экспорт
	Сам=Сам();
	Рез=Сам.ИнтерфейсОборудования.ОтменитьОперацию(НомерОперации);
	Если Рез=0 Тогда
		Сам.УстановитьОшибку(Сам.ИнтерфейсОборудования.ПоследняяОшибка());
	Иначе
		Сам.СброситьОшибку();
	КонецЕсли;
	Возврат Рез;
КонецФункции

//Больше этой суммы нельзя проводить по текущей платежной системе

Процедура УстановитьЛимитОплаты(Сумма) Экспорт
	Сам=Сам();
	ЛимитОплаты=Сумма;
	Сам.ИнтерфейсОборудования.УстановитьЛимитОплаты(ЛимитОплаты);
КонецПроцедуры

Функция ПолучитьЛимитОплаты() Экспорт
	Возврат ЛимитОплаты;
КонецФункции

Функция ВнешнееСобытие(Издатель,Событие) Экспорт
	Сам=Сам();

	Отработали=0;
	Если Событие.Источник="Клавиатура" Тогда
		Отработали = Сам.СобытиеКлавиатуры(Событие);
	ИначеЕсли Событие.Источник="Сканер" Тогда
		Отработали = Сам.СобытиеСканера(Событие);
	ИначеЕсли Событие.Источник="Ридер" Тогда
		Отработали = Сам.СобытиеРидера(Событие);
	ИначеЕсли Событие.Источник="Радиоридер" Тогда
		Отработали = Сам.СобытиеРадиоРидера(Событие);
	ИначеЕсли Событие.Источник="Ключ" Тогда
		Отработали = Сам.СобытиеКлюча(Событие);
	ИначеЕсли Событие.Источник="Команда" Тогда
		Команда=Событие.Описатель.Команда;
		Если Команда="Обновить" Тогда
			Сам.ОбновитьФорму();
			Отработали=1;
		ИначеЕсли Команда="ПРОБИТЬ_ЧЕК" Тогда
			//Сам.ЗакрытьФорму();
			//Отработали=1;
		ИначеЕсли Команда="ОТМЕНА" Тогда
			//Сам.ЗакрытьФорму();
			//Отработали=1;
		ИначеЕсли Команда="ПолучитьКарту" Тогда

			ИД=Событие.Описатель.Данные;
			Карта=Сам.ПолучитьКарту(СокрЛП(ИД));

			Если ПустоеЗначение(Карта)=1 Тогда
				Событие.Описатель.Ответ=0;
				Событие.Описатель.Ошибка=Сам.ПоследняяОшибка();
			Иначе
				Событие.Описатель.Ответ=1;
				Событие.Описатель.Ответ1=Карта;
			КонецЕсли;
			Отработали=1;



		КонецЕсли
	КонецЕсли;

	Если Отработали = 1 Тогда

		глСобытиеОбработано(Событие);
		Сам.ОбновитьФорму();
		Возврат 0;

	КонецЕсли;

	Возврат 1;
КонецФункции



Процедура Сброс() Экспорт
	Сам=Сам();
	ЛимитОплаты=0;
	Результат=0;
	Сам.ИнтерфейсОборудования.УстановитьЛимитОплаты(0);
	РедакторСтроки.Сброс();
КонецПроцедуры


Функция ПолучитьКарту(НомерКарты) Экспорт
	Сам=Сам();
	Рез=0;
	Если НомерКарты<>"" Тогда
		Рез = Сам.ИнтерфейсОборудования.ПолучитьКарту(НомерКарты);

		Если ПустоеЗначение(Рез)=1 Тогда
			Сам.УстановитьОшибку(Сам.ИнтерфейсОборудования.ПоследняяОшибка());
		Иначе
			Сам.СброситьОшибку();
		КонецЕсли;
	КонецЕсли;
	возврат Рез;
КонецФункции

Функция ПолучитьПлатежиПоКарте(НомерКарты,_Дата,ТаблицаПлатежей) Экспорт
	Сам=Сам();
	Рез=0;
	Если НомерКарты<>"" Тогда
		Рез = Сам.ИнтерфейсОборудования.ПолучитьПлатежиПоКарте(НомерКарты,_Дата,ТаблицаПлатежей);
		Если ПустоеЗначение(Рез)=1 Тогда
			Сам.УстановитьОшибку(Сам.ИнтерфейсОборудования.ПоследняяОшибка());
		Иначе
			Сам.СброситьОшибку();
		КонецЕсли;
	КонецЕсли;
	возврат Рез;
КонецФункции


//------------------------------------ ------------------------------------
Процедура ПриОткрытии()
//#if _NOW_PREPARE_CLASS
	Форма.Параметр._ПриОткрытии(); // для отладки класса
//#endif // _NOW_PREPARE_CLASS
КонецПроцедуры // ПриОткрытии

