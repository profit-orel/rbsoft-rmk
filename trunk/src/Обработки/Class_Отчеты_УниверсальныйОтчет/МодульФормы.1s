//Конфигурация для платформы "1С:Предприятие 7.7" РБ-Софт:Рабочее место кассира.
//Версия 4.57 от 05.06.11 23:24:52
//(c) Баинов Евгений, ООО "РБ-Софт" 2006-2011 г.Улан-Удэ, ул.Балтахинова,17Е,офис 215
//e-mail: bainov@rb-soft.ru  icq: 73718937, телефоны: (3012) 440-357, 278-228
//Сайт проекта: http://code.google.com/p/rbsoft-rmk/
//_______________________________________________________________________________________
//Класс Отчеты.УниверсальныйОтчет
//_______________________________________________________________________________________
Перем _База Экспорт;

Перем ТекстЗапроса Экспорт;
Перем ТаблицаВыборки Экспорт;
Перем ТаблицаРезультат Экспорт;

Перем СтруктураОтбора Экспорт;
Перем СтруктураГруппировок Экспорт;
Перем СтруктураПоказателей Экспорт;

Перем ЗаголовокГруппировок Экспорт;

Функция Этот(Конт) Возврат Конт; КонецФункции
Функция Сам() Возврат Этот(Контекст) КонецФункции



Функция СоздатьСтруктуруПоляОтбора(Имя,ИмяПоляТаблицы,Представление="",Использовать=0,ТипСравнения="=",Значение="",_ТипЗначения="",_Длина=10,_Точность=0) Экспорт

	Структура=НовыйОбъект("СтруктураПоляОтбора");
	Структура.Имя=Имя;
	Структура.ИмяПоляТаблицы=ИмяПоляТаблицы;
	Структура.Представление=?(Представление="",ИмяПоляТаблицы,Представление);
	Структура.Значение=Значение;
	Структура.ТипСравнения=ТипСравнения;
	Структура.ПредставлениеСравнения=глОбщиеФункции.ПредставлениеСравнения(ТипСравнения);


	Структура.ТипЗначения=нрег(?(_ТипЗначения="",ТипЗначенияСтр(Значение),_ТипЗначения));
	Структура.Длина=_Длина;
	Структура.Точность=_Точность;
	Структура.Использовать=Использовать;
	Возврат Структура;
КонецФункции

Функция СоздатьСтруктуруПоляГруппировки(Имя,ИмяПоляТаблицы,Представление="",Использовать=1) Экспорт

	Структура=НовыйОбъект("СтруктураПоляГруппировки");
	Структура.Имя=Имя;
	Структура.ИмяПоляТаблицы=ИмяПоляТаблицы;
	Структура.Представление=?(Представление="",ИмяПоляТаблицы,Представление);
	Структура.Использовать=Использовать;
	Возврат Структура;
КонецФункции


Функция СоздатьСтруктуруПоляПоказателя(Имя,ИмяПоляТаблицы,Представление="",Использовать=1) Экспорт

	Структура=НовыйОбъект("СтруктураПоляПоказателя");
	Структура.Имя=Имя;
	Структура.ИмяПоляТаблицы=ИмяПоляТаблицы;
	Структура.Представление=?(Представление="",ИмяПоляТаблицы,Представление);
	Структура.Использовать=Использовать;
	Возврат Структура;
КонецФункции


Процедура ДобавитьПолеОтбора(Имя,ИмяПоляТаблицы,Представление="",Использовать=0,ТипСравнения="=",Значение="",_ТипЗначения="",_Длина=10,_Точность=0) Экспорт
	СтруктураОтбора.Вставить(Имя,СоздатьСтруктуруПоляОтбора(Имя,ИмяПоляТаблицы,Представление,Использовать,ТипСравнения,Значение,_ТипЗначения,_Длина,_Точность));
КонецПроцедуры

Процедура ДобавитьПолеГруппировки(Имя,ИмяПоляТаблицы,Представление="",Использовать=1) Экспорт
	СтруктураГруппировок.Вставить(Имя,СоздатьСтруктуруПоляГруппировки(Имя,ИмяПоляТаблицы,Представление,Использовать));
КонецПроцедуры


Функция ПолучитьПолеГруппировки(Уровень) Экспорт
	Номер=0;
	
	Для Инд=1 По СтруктураГруппировок.Количество() Цикл
		Поле=СтруктураГруппировок.Получить(Инд);
		Если Поле.Использовать=1 Тогда
			Номер=Номер+1;
			Если Номер=Уровень Тогда
				возврат Поле;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;	
	возврат "";
КонецФункции


Процедура ДобавитьПолеПоказателя(Имя,ИмяПоляТаблицы,Представление="",Использовать=1) Экспорт
	СтруктураПоказателей.Вставить(Имя,СоздатьСтруктуруПоляПоказателя(Имя,ИмяПоляТаблицы,Представление,Использовать));
КонецПроцедуры

//------------------------------------ ------------------------------------
Процедура Конструктор()
	_База = Этот(Контекст).ПолучитьБазовыйКласс("Объект");

	СтруктураОтбора=СоздатьОбъект("Структура");
	СтруктураГруппировок=СоздатьОбъект("Структура");
	СтруктураПоказателей=СоздатьОбъект("Структура");
	ЗаголовокГруппировок="";

КонецПроцедуры // Конструктор


//абстрактный. вызывается каждый раз при вызове метода Выполнить
//должен формировать текст запроса с учетом текущих настроек отчета
Функция СформироватьТекстЗапроса() Экспорт
	возврат "";
КонецФункции


Функция ВыполнитьЗапрос(_ТекстЗапроса) Экспорт
	возврат глБД.ВыполнитьЗапрос(_ТекстЗапроса);
КонецФункции

//возвращает результат запроса

Функция Выполнить() Экспорт
	Сам=Сам();
	Сам.СброситьОшибку();
	
	СтрокаГруппировок="";
	ЗаголовокГруппировок="";
	
	Для Инд=1 По СтруктураГруппировок.Количество() Цикл
		Поле=СтруктураГруппировок.Получить(Инд);
		Если Поле.Использовать=1 Тогда
			СтрокаГруппировок=?(СтрокаГруппировок="","",СтрокаГруппировок+";")+Поле.Имя+":"+Поле.ИмяПоляТаблицы;
			ЗаголовокГруппировок=?(ЗаголовокГруппировок="","",ЗаголовокГруппировок+"/")+Поле.Представление;
		КонецЕсли; 
	КонецЦикла;	
	
	СтрокаПоказателей="";
	
	Для Инд=1 По СтруктураПоказателей.Количество() Цикл
		Поле=СтруктураПоказателей.Получить(Инд);
		Если Поле.Использовать=1 Тогда
			СтрокаПоказателей=?(СтрокаПоказателей="","",СтрокаПоказателей+",")+Поле.ИмяПоляТаблицы;
		КонецЕсли; 
	КонецЦикла;	
	
	Если СтрокаПоказателей="" Тогда
		Сам.УстановитьОшибку("Не выбран ни один показатель отчета");
	КонецЕсли;
	
	Если СтрокаГруппировок="" Тогда
		Сам.УстановитьОшибку("Не выбрана ни одна группировка отчета");
	КонецЕсли;
	
	
	Если Сам.КодОшибки()=0 Тогда
		
		ТекстЗапроса=Сам.СформироватьТекстЗапроса();
		ТЗ=Сам.ВыполнитьЗапрос(ТекстЗапроса);
		
		ТЗРезультат=СоздатьОбъект("ИндексированнаяТаблица");
		ТЗРезультат.Загрузить(ТЗ);
		
		ТЗРезультат.ВыбратьСтроки();
		Пока ТЗРезультат.ПолучитьСтроку()=1 Цикл
			Если ПустоеЗначение(ТЗРезультат.SellerID)=1 Тогда
				ТЗРезультат.SellerID=ТЗРезультат.UserID;
				ТЗРезультат.SellerName=ТЗРезультат.UserName;
			КонецЕсли;
		
			Если ТЗРезультат.Operation=1 Тогда
		
				ТЗРезультат.TotalCount=-ТЗРезультат.TotalCount;
				ТЗРезультат.Count=-ТЗРезультат.Count;
				ТЗРезультат.Summ=-ТЗРезультат.Summ;
				ТЗРезультат.Discount=-ТЗРезультат.Discount;
				ТЗРезультат.Total=-ТЗРезультат.Total;
			КонецЕсли;
		КонецЦикла;
		
		
		ТЗРезультат.Группировать(СтрокаГруппировок,СтрокаПоказателей);
	Иначе
		Предупреждение(Сам.ПоследняяОшибка());
	КонецЕсли; 
	
	Возврат ТЗРезультат;
КонецФункции

//------------------------------------ ------------------------------------
Процедура Деструктор()

КонецПроцедуры // Деструктор

Процедура ПриОткрытии()
//#if _NOW_PREPARE_CLASS
	Форма.Параметр._ПриОткрытии(); // для отладки класса
//#endif // _NOW_PREPARE_CLASS
КонецПроцедуры // ПриОткрытии

