//Конфигурация для платформы "1С:Предприятие 7.7" РБ-Софт:Рабочее место кассира.
//Версия 4.57 от 05.06.11 23:24:51
//(c) Баинов Евгений, ООО "РБ-Софт" 2006-2011 г.Улан-Удэ, ул.Балтахинова,17Е,офис 215
//e-mail: bainov@rb-soft.ru  icq: 73718937, телефоны: (3012) 440-357, 278-228
//Сайт проекта: http://code.google.com/p/rbsoft-rmk/
//_______________________________________________________________________________________
//Класс ВидОплаты
//_______________________________________________________________________________________
Перем _База Экспорт;

Перем РедакторСтроки Экспорт;
Перем ТабличноеПоле Экспорт;
Перем РМК;


Функция Этот(Конт) Возврат Конт; КонецФункции
Функция Сам() Возврат Этот(Контекст) КонецФункции



//------------------------------------ ------------------------------------
Процедура Конструктор()
	_База = Этот(Контекст).ПолучитьБазовыйКласс("ОбъектБД");

	РедакторСтроки=СоздатьОбъект("РедакторСтроки");

КонецПроцедуры // Конструктор

//------------------------------------ ------------------------------------
Процедура Деструктор()
КонецПроцедуры // Деструктор


Процедура Инит(_Контекст,_Форма,_РМК) Экспорт
	Сам=Сам();
	Сам.УстановитьКонтекст(_Контекст);
	РМК=_РМК;
КонецПроцедуры


//описать действия по событию сканера
//возвращает 1- событие обработано, дальнейшая обработка в подписчиках на событие не требуется
//           0- можно продолжиь дальнейшую обработку события
Функция СобытиеСканера(Событие) Экспорт
	Сам=Сам();
	глСобытиеОбработано(Событие);
	Возврат 1;
КонецФункции

//описать действия по событию ридера карточек
//возвращает 1- событие обработано, дальнейшая обработка в подписчиках на событие не требуется
//           0- можно продолжиь дальнейшую обработку события

Функция СобытиеРидера(Событие) Экспорт
	Сам=Сам();
	глСобытиеОбработано(Событие);
	Сам.ТребуетсяОтображение();
	Возврат 1;
КонецФункции

//описать действия по событию механического ключа
//возвращает 1- событие обработано, дальнейшая обработка в подписчиках на событие не требуется
//           0- можно продолжиь дальнейшую обработку события

Функция СобытиеКлюча(Событие) Экспорт
	Сам=Сам();
	глСобытиеОбработано(Событие);
	Сам.ТребуетсяОтображение();
	Возврат 1;
КонецФункции

//описать действия по событию радиоридера (проксимити)
//возвращает 1- событие обработано, дальнейшая обработка в подписчиках на событие не требуется
//           0- можно продолжиь дальнейшую обработку события

Функция СобытиеРадиоРидера(Событие) Экспорт
	Сам=Сам();
	глСобытиеОбработано(Событие);
	Сам.ТребуетсяОтображение();
	Возврат 1;
КонецФункции

//описать действия по событию от клавиатуры
//возвращает 1- событие обработано, дальнейшая обработка в подписчиках на событие не требуется
//           0- можно продолжиь дальнейшую обработку события

Функция СобытиеКлавиатуры(Событие) Экспорт
	Сам=Сам();
	Если Событие.Источник="Клавиатура" Тогда
		Если Событие.Обработано=0 Тогда
			РедакторСтроки.ОбработкаСобытий(Сам,Событие);
			Если Событие.Обработано=0 Тогда
				Команда=глДрайверы.Клавиатура.ПолучитьКоманду(Событие.Описатель.Данные);
				Если Команда<>"" Тогда
					глСобытиеОбработано(Событие);
					глПослатьКоманду(Сам,Команда);
				КонецЕсли;
			Иначе
				глПослатьКоманду(Сам,"ОбновитьОплату");
			КонецЕсли;
		КонецЕсли;
		Если Событие.Обработано=1 Тогда
			Сам.ТребуетсяОтображение();
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	возврат 0;
КонецФункции

//функция для отработки внешних событий.
//если объект должен обрабатывать события то надо регистрировать в менеджере событий объекта Драйверы
//возвращает 1 - событие может дальше обрабатываться другими обработчиками
// 0 - дальнейшую обработку события  другими обработчиками прекратить
Функция ОбработкаСобытий(Издатель,Событие) Экспорт
	Сам=Сам();
	Отработали=0;
	
	Если Событие.Источник="Клавиатура" Тогда
		Отработали = Сам.СобытиеКлавиатуры(Событие);
	ИначеЕсли Событие.Источник="Сканер" Тогда
		Отработали = Сам.СобытиеСканера(Событие);
	ИначеЕсли Событие.Источник="Ридер" Тогда
		Отработали = Сам.СобытиеРидера(Событие);
	ИначеЕсли Событие.Источник="Радиоридер" Тогда
		Отработали = Сам.СобытиеРадиоРидера(Событие);
	ИначеЕсли Событие.Источник="Ключ" Тогда
		Отработали = Сам.СобытиеКлюча(Событие);
	ИначеЕсли Событие.Источник="Команда" Тогда

		Команда=Событие.Описатель.Команда;

		Если Команда="Обновить" Тогда
			Сам.ОбновитьФорму();

			//Отработали=1;

		ИначеЕсли Команда="ВЫБОР_ОПЛАТЫ" Тогда

			Попытка
				Сам.ОткрытаяФорма.Закрыть();
			Исключение
			КонецПопытки;


			Отработали=1;
		ИначеЕсли Команда="БЛОКИРОВКА" Тогда

			глПраваДоступа.Авторизация(1);
			Отработали=1;
		ИначеЕсли Команда="ВПРАВО" Тогда

			Отработали=1;

		ИначеЕсли Команда="ВЛЕВО" Тогда

			Отработали=1;
		ИначеЕсли Команда="ОБРАТНАЯ_ТАБУЛЯЦИЯ" Тогда
			глПослатьКоманду(Сам,"ВЛЕВО");
			Отработали=1;

		ИначеЕсли Команда="ТАБУЛЯЦИЯ" Тогда
			глПослатьКоманду(Сам,"ВПРАВО");
			Отработали=1;
		ИначеЕсли Команда="КАЛЬКУЛЯТОР" Тогда

		Иначе
			//Предупреждение("Команда "+Команда);


		КонецЕсли;

	КонецЕсли;



	Если Отработали = 1 Тогда

		глСобытиеОбработано(Событие);
		Сам.ОбновитьФорму();
		Возврат 0;
	КонецЕсли;
	Возврат 1;
КонецФункции

//------------------------------------ ------------------------------------
Процедура ПриОткрытии()
//#if _NOW_PREPARE_CLASS
	Форма.Параметр._ПриОткрытии(); // для отладки класса
//#endif // _NOW_PREPARE_CLASS
КонецПроцедуры // ПриОткрытии

