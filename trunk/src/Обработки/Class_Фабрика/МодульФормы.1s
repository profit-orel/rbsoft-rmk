//Конфигурация для платформы "1С:Предприятие 7.7" РБ-Софт:Рабочее место кассира.
//Версия 4.43 от 19.07.10 20:54:20
//Назначение: Автоматизация POS-узлов в магазинах (Point of sale).
//(c) Баинов Евгений, ООО "РБ-Софт" 2006, г.Улан-Удэ, проспект 50-летия Октября,21А,офис 110 
//e-mail: bainov@rb-soft.ru  icq: 73718937, телефоны: (3012) 44-03-57, 44-76-42, 44-86-58
//---------------------------------------------------------------------------------------
//Данная программа является свободным программным обеспечением.
//Вы вправе распространять ее и/или модифицировать в соответствии с условиями версии 2 
//либо по вашему выбору с условиями более поздней версии Стандартной Общественной Лицензии GNU,
//опубликованной Free Software Foundation. 
//Мы распространяем данную программу в надежде на то, что она будет вам полезной, 
//однако НЕ ПРЕДОСТАВЛЯЕМ НА НЕЕ НИКАКИХ ГАРАНТИЙ, 
//в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
//и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ.
//Для получения более подробной информации ознакомьтесь со Стандартной Общественной Лицензией GNU.
//Вместе с данной программой вы должны были получить экземпляр Стандартной Общественной Лицензии GNU.
//Если вы его не получили, сообщите об этом в Free Software Foundation, Inc.,
//59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//_______________________________________________________________________________________
//Имя модуля:
// <Вставить имя модуля>
//_______________________________________________________________________________________
//Разработчик: Баинов Евгений, e-mail: bainov@rb-soft.ru , icq: 73718937
//_______________________________________________________________________________________
//Назначение модуля:
// <Вставить описание модуля>
//
//_______________________________________________________________________________________
Перем _База Экспорт;
Перем ТаблицаТипов Экспорт;

Функция Этот(Конт) 		Возврат Конт; 			КонецФункции
Функция Сам() 			Возврат Этот(Контекст) 	КонецФункции
Функция Вид() Экспорт 	Возврат "Фабрика"; 		КонецФункции




//Создает структуру данных заданного типа
//
Функция Новый(ИмяТипа) Экспорт
	Имя=ВРЕГ(ИмяТипа);


	Если Имя="СОБЫТИЕКОМАНДА" Тогда
		Объект=Новый("Событие");
		Объект.Описатель=Новый("ОписательКоманды");
		Возврат Объект;
	ИначеЕсли  Имя="СОБЫТИЕКЛАВИАТУРЫ" Тогда
		Объект=Новый("Событие");
		Объект.Описатель=Новый("ОписательСобытияКлавиатуры");
		Возврат Объект;
	ИначеЕсли  Имя="СОБЫТИЕСКАНЕР" Тогда
		Объект=Новый("Событие");
		Объект.Описатель=Новый("ОписательСобытияСканера");
		Возврат Объект;
	ИначеЕсли  Имя="СОБЫТИЕРИДЕР" Тогда
		Объект=Новый("Событие");
		Объект.Описатель=Новый("ОписательСобытияРидера");
		Возврат Объект;
	ИначеЕсли  Имя="СОБЫТИЕКЛЮЧ" Тогда
		Объект=Новый("Событие");
		Объект.Описатель=Новый("ОписательСобытияКлюча");
		Возврат Объект;
	ИначеЕсли  Имя="СОБЫТИЕРАДИОРИДЕР" Тогда
		Объект=Новый("Событие");
		Объект.Описатель=Новый("ОписательСобытияРадиоРидера");
		Возврат Объект;
	ИначеЕсли ТаблицаТипов.НайтиСтроку("Имя",Имя,,1)>0 Тогда
		Объект = СоздатьОбъект(ТаблицаТипов.БазовыйТип);


		Если ТаблицаТипов.БазовыйТип="СТРУКТУРА" Тогда

			Поля=ТаблицаТипов.Поля;

			Поля.ВыбратьСвойства();
			Описатель="";ИмяПоля="";
			Пока Поля.ПолучитьСвойство(Описатель,ИмяПоля)=1 Цикл
				ЗначениеПоУмолчанию=Описатель.ЗначениеПоУмолчанию;

				Тип= ВРЕГ(СокрЛП(Описатель.Тип));
				Если Тип="ЧИСЛО" Тогда
					Объект.Вставить(ИмяПоля,Число(ЗначениеПоУмолчанию));
				ИначеЕсли Тип="СТРОКА" Тогда
					Объект.Вставить(ИмяПоля,ЗначениеПоУмолчанию);
				ИначеЕсли Тип="" Тогда
					Объект.Вставить(ИмяПоля);
				ИначеЕсли ТаблицаТипов.НайтиСтроку("Имя",ТИП,,1)>0 Тогда
					Объект.Вставить(ИмяПоля,Новый(Тип));
				Иначе
					Объект.Вставить(ИмяПоля);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТаблицаТипов.БазовыйТип="ИНДЕКСИРОВАННАЯТАБЛИЦА" Тогда
			Поля=ТаблицаТипов.Поля;

			Поля.ВыбратьСвойства();

			Описатель="";ИмяПоля="";
			Пока Поля.ПолучитьСвойство(Описатель,ИмяПоля)=1 Цикл
				ЗначениеПоУмолчанию=Описатель.ЗначениеПоУмолчанию;
				Объект.НоваяКолонка(ИмяПоля);
			КонецЦикла;
		ИначеЕсли ТаблицаТипов.БазовыйТип="ТАБЛИЦАЗНАЧЕНИЙ" Тогда
			Поля=ТаблицаТипов.Поля;

			Поля.ВыбратьСвойства();

			Описатель="";ИмяПоля="";
			Пока Поля.ПолучитьСвойство(Описатель,ИмяПоля)=1 Цикл
				ЗначениеПоУмолчанию=Описатель.ЗначениеПоУмолчанию;
				Тип= ВРЕГ(Описатель.Тип);
				Если Тип="ЧИСЛО" Тогда
					Объект.НоваяКолонка(ИмяПоля,Тип);
				ИначеЕсли Тип="СТРОКА" Тогда
					Объект.НоваяКолонка(ИмяПоля,Тип);
				ИначеЕсли Тип="ДАТА" Тогда
					Объект.НоваяКолонка(ИмяПоля,Тип);

				Иначе
					Объект.НоваяКолонка(ИмяПоля);
				КонецЕсли;

			КонецЦикла;
		КонецЕсли;
	Иначе
		Объект=СоздатьОбъект(ИмяТипа);
	КонецЕсли;

	возврат Объект;
КонецФункции	//

Функция СоздатьОписательПоля() Экспорт
	ОписательПоля=СоздатьОбъект("Структура");
	ОписательПоля.Вставить("Тип","");
	ОписательПоля.Вставить("Длина",0);
	ОписательПоля.Вставить("Точность",0);
	ОписательПоля.Вставить("ЗначениеПоУмолчанию","");
	ОписательПоля.Вставить("ВозможныеЗначения","");
	ОписательПоля.Вставить("Комментарий","");
	Возврат ОписательПоля;
КонецФункции

//считывает описание типов из  определенным образом заполненной таблицы
//ИмяТаблицы - идентификатор общей таблицы или имя файла
//возвращает 1 в случае успешной инициализации типов
Функция ЗаполнитьТипыИзТаблицы(ИмяТаблицы) Экспорт
Перем  Таблица,ЗакончилиЧитать,НомерСтроки,ПустыхСтрок,ЧитаемОписаниеТипа,ТекущийТип,Область,Рез,БазовыйТип;
	Таблица=СоздатьОбъект("Таблица");
	Таблица.ИсходнаяТаблица(ИмяТаблицы);
	Таблица.Вывести();

	Область=Таблица.Область(5,2,5,2);
	БазовыйТип=ВРЕГ(СокрЛП(Область.Текст));

	Если СокрЛП(БазовыйТип)="" Тогда
		Сообщить("Не указан базовый тип в таблице "+ИмяТаблицы);
		возврат 0;
	Иначе
		Попытка
			Тест=СоздатьОбъект(БазовыйТип);
		Исключение
			Сообщить("Невозможно создать базовый тип "+БазовыйТип+", указанный в таблице "+ИмяТаблицы+". "+ОписаниеОшибки());
			возврат 0;
		КонецПопытки;
	КонецЕсли;

	ЗакончилиЧитать=0;
	НомерСтроки=7;  // с 7-ой строки начинается описание типов
	ПустыхСтрок=0;
	ЧитаемОписаниеТипа=0;
	ТекущийТип=СоздатьОбъект("DynaValue");
	ТекущийТип.ДобавитьСвойство("Имя","");
	ТекущийТип.ДобавитьСвойство("Представление","");
	ТекущийТип.ДобавитьСвойство("БазовыйТип",БазовыйТип);
	ТекущийТип.ДобавитьСвойство("Поля",СоздатьОбъект("DynaValue"));


	Пока (ЗакончилиЧитать=0) Цикл
		Область=Таблица.Область(НомерСтроки,1,НомерСтроки,1);
		СтрТип		=	ВРЕГ(СокрЛП(Область.Текст));

		СтрПредставление = СокрЛП(Область.Текст);
		
		Область=Таблица.Область(НомерСтроки,2,НомерСтроки,2);
		СтрИмяПоля	=	СокрЛП(Область.Текст);


		Если ПустаяСтрока(СтрИмяПоля)=0 Тогда

			ОписательПоля=СоздатьОписательПоля();

			Область=Таблица.Область(НомерСтроки,3,НомерСтроки,3);
			ОписательПоля.Тип	=	СокрЛП(Область.Текст);

			Область=Таблица.Область(НомерСтроки,6,НомерСтроки,6);
			ЗначениеПоУмолчанию = СокрЛП(Область.Текст);

			Если ОписательПоля.Тип="ЧИСЛО" Тогда
				Область=Таблица.Область(НомерСтроки,4,НомерСтроки,4);
				ОписательПоля.Длина =	Число(СокрЛП(Область.Текст));

				Область=Таблица.Область(НомерСтроки,5,НомерСтроки,5);
				ОписательПоля.Точность =	Число(СокрЛП(Область.Текст));
				Если ЗначениеПоУмолчанию<>"" Тогда
					ЗначениеПоУмолчанию=Число(ЗначениеПоУмолчанию);
				КонецЕсли;

			ИначеЕсли ОписательПоля.Тип="СТРОКА" Тогда
				Область=Таблица.Область(НомерСтроки,4,НомерСтроки,4);
				ОписательПоля.Длина =	Число(СокрЛП(Область.Текст));
			КонецЕсли;

			Область=Таблица.Область(НомерСтроки,7,НомерСтроки,7);
			ОписательПоля.ВозможныеЗначения = СокрЛП(Область.Текст);

			Область=Таблица.Область(НомерСтроки,8,НомерСтроки,8);
			ОписательПоля.Комментарий = СокрЛП(Область.Текст);

			ОписательПоля.ЗначениеПоУмолчанию=ЗначениеПоУмолчанию;
			ПустыхСтрок=0;
		Иначе
			ОписательПоля="";
			ПустыхСтрок=ПустыхСтрок+1;
		КонецЕсли;

		НомерСтроки=НомерСтроки+1;

		Если ПустаяСтрока(СтрТип)=0 Тогда
			Если СтрИмяПоля="" Тогда //имя типа есть имени поля нет
				Если ЧитаемОписаниеТипа=0 Тогда
					ЧитаемОписаниеТипа=1;
					ТекущийТип.Имя=СтрТип;
				КонецЕсли;
			Иначе  //имя типа есть имя поля есть
				Если ЧитаемОписаниеТипа=0 Тогда
					//только начали читать тип
					ЧитаемОписаниеТипа=1;
					ТекущийТип.Имя=СтрТип;
					ТекущийТип.Представление=СтрПредставление;
					ТекущийТип.Поля.ДобавитьСвойство(СтрИмяПоля,ОписательПоля);
				Иначе
					//закончили чтение описания типа
					//Записать все описание в таблицу типов
					ТаблицаТипов.НоваяСтрока();
					ТаблицаТипов.Имя = ТекущийТип.Имя;
					ТаблицаТипов.Представление=ТекущийТип.Представление;
					ТаблицаТипов.БазовыйТип = ТекущийТип.БазовыйТип;
					ТаблицаТипов.Поля = ТекущийТип.Поля;
					//Начинаем чтение следующего типа с текущей строки

					ТекущийТип=СоздатьОбъект("DynaValue");
					ТекущийТип.ДобавитьСвойство("Имя",СтрТип);
					ТекущийТип.ДобавитьСвойство("Представление",СтрПредставление);
					ТекущийТип.ДобавитьСвойство("БазовыйТип",БазовыйТип);
					ТекущийТип.ДобавитьСвойство("Поля",СоздатьОбъект("DynaValue"));
					ТекущийТип.Поля.ДобавитьСвойство(СтрИмяПоля,ОписательПоля);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрИмяПоля="" Тогда
			Если ЧитаемОписаниеТипа=1 Тогда
				//Закончили описание типа
				ТаблицаТипов.НоваяСтрока();
				ТаблицаТипов.Имя = ТекущийТип.Имя;
				ТаблицаТипов.Представление=ТекущийТип.Представление;
				ТаблицаТипов.БазовыйТип = ТекущийТип.БазовыйТип;
				
				ТаблицаТипов.Поля = ТекущийТип.Поля;

				ТекущийТип=СоздатьОбъект("DynaValue");
				ТекущийТип.ДобавитьСвойство("Имя",СтрТип);
				ТекущийТип.ДобавитьСвойство("Представление",СтрПредставление);
				ТекущийТип.ДобавитьСвойство("БазовыйТип",БазовыйТип);
				ТекущийТип.ДобавитьСвойство("Поля",СоздатьОбъект("DynaValue"));
			КонецЕсли;
			ЧитаемОписаниеТипа=0;
		Иначе
			Если ЧитаемОписаниеТипа=1 Тогда
				//продолжаем читать описание типа
				ТекущийТип.Поля.ДобавитьСвойство(СтрИмяПоля,ОписательПоля);
			Иначе
			    //появилось поле без типа. Ошибка формата исходной таблицы
				сообщить("Обнаружено описание поля без типа. Ошибка формата исходной таблицы. Имя поля: "+СтрИмяПоля);
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
		Если ПустыхСтрок=10 Тогда
			ЗакончилиЧитать=1;
		КонецЕсли;
	КонецЦикла;
	Возврат 1;
КонецФункции

//------------------------------------ ------------------------------------
Процедура Конструктор()
	_База = Этот(Контекст).ПолучитьБазовыйКласс("ФабрикаОбъектов");

	//Инициализируем описания типов

	ТаблицаТипов=СоздатьОбъект("ИндексированнаяТаблица");
	ТаблицаТипов.НоваяКолонка("Имя"); //строка. ИмяТипа в верхнем регистре
	ТаблицаТипов.НоваяКолонка("Представление");//Строка. ИмяТипа как оно задано в описании  
	ТаблицаТипов.НоваяКолонка("БазовыйТип");//строка. Имя базоваго типа. Например: "Структура", "ТаблицаЗначений", "ИндексированнаяТаблица"
	ТаблицаТипов.НоваяКолонка("Поля");//DynaValue. Описания полей

	ТаблицаТипов.ДобавитьИндекс("Имя","^Имя");

	ЗаполнитьТипыИзТаблицы("Структуры");
	ЗаполнитьТипыИзТаблицы("ИндексированныеТаблицы");
	ЗаполнитьТипыИзТаблицы("ТаблицыЗначений");

КонецПроцедуры // Конструктор

//------------------------------------ ------------------------------------
Процедура Деструктор()

КонецПроцедуры // Деструктор

//------------------------------------ ------------------------------------
Процедура ПриОткрытии()
//#if _NOW_PREPARE_CLASS
//	Форма.Параметр._ПриОткрытии(); // для отладки класса
//#endif // _NOW_PREPARE_CLASS
КонецПроцедуры // ПриОткрытии

 // завершение класса Wizard1C++ !!
