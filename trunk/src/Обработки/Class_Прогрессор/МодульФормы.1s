//Конфигурация для платформы "1С:Предприятие 7.7" РБ-Софт:Рабочее место кассира.
//Версия 4.43 от 19.07.10 20:54:19
//Назначение: Автоматизация POS-узлов в магазинах (Point of sale).
//(c) Баинов Евгений, ООО "РБ-Софт" 2006, г.Улан-Удэ, проспект 50-летия Октября,21А,офис 110 
//e-mail: bainov@rb-soft.ru  icq: 73718937, телефоны: (3012) 44-03-57, 44-76-42, 44-86-58
//---------------------------------------------------------------------------------------
//Данная программа является свободным программным обеспечением.
//Вы вправе распространять ее и/или модифицировать в соответствии с условиями версии 2 
//либо по вашему выбору с условиями более поздней версии Стандартной Общественной Лицензии GNU,
//опубликованной Free Software Foundation. 
//Мы распространяем данную программу в надежде на то, что она будет вам полезной, 
//однако НЕ ПРЕДОСТАВЛЯЕМ НА НЕЕ НИКАКИХ ГАРАНТИЙ, 
//в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
//и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ.
//Для получения более подробной информации ознакомьтесь со Стандартной Общественной Лицензией GNU.
//Вместе с данной программой вы должны были получить экземпляр Стандартной Общественной Лицензии GNU.
//Если вы его не получили, сообщите об этом в Free Software Foundation, Inc.,
//59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//_______________________________________________________________________________________
//Имя модуля:
// <Вставить имя модуля>
//_______________________________________________________________________________________
//Разработчик: Баинов Евгений, e-mail: bainov@rb-soft.ru , icq: 73718937
//_______________________________________________________________________________________
//Назначение модуля:
// <Вставить описание модуля>
//
//_______________________________________________________________________________________
Перем _База Экспорт;

Перем ТекущееЗначение Экспорт;
Перем Минимум  Экспорт;
Перем Максимум Экспорт;

Перем ТекстКомментария;

Перем НазваниеПроцесса;

Перем ПроцессЗавершен Экспорт;

Перем ВремяПоследнегоОбновления;
Перем ИнтервалОбновления Экспорт;


Функция Этот(Конт) Возврат Конт; КонецФункции
Функция Сам() Возврат Этот(Контекст) КонецФункции



Функция Вид() Экспорт
	возврат "Прогрессор";
КонецФункции	// Вид

Функция ТекущееЗначение(Значение=-1) Экспорт
	Если Значение<>-1 Тогда
		Сам=Сам();
		ТекущееЗначение=Значение;
		Попытка
			ВремяПоследнегоОбновления=_GetPerformanceCounter();
			Сам.АктивИкс.Объект.ProgressBarValue=Значение;
		
			Если ТипЗначенияСтр(Сам.АктивИкс.Объект.ProgressBarValue)="Число" Тогда
				Возврат Сам.АктивИкс.Объект.ProgressBarValue;
			КонецЕсли;
			
		Исключение
			Сообщить(""+ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	Возврат ТекущееЗначение;

КонецФункции

Функция Минимум(Значение=-1) Экспорт
	Сам=Сам();
	
	Попытка
		Если Значение<>-1 Тогда
			Минимум=Значение;
			Сам.АктивИкс.Объект.ProgressBarMin=Значение;
		КонецЕсли;
		Если ТипЗначенияСтр(Сам.АктивИкс.Объект.ProgressBarMin)="Число" Тогда
			Возврат Сам.АктивИкс.Объект.ProgressBarMin;
		КонецЕсли;
	Исключение
	КонецПопытки;
	Возврат Минимум;
КонецФункции

Функция Максимум(Значение=-1) Экспорт
	Сам=Сам();
	Попытка
		Если Значение<>-1 Тогда
			Максимум=Значение;
			Сам.АктивИкс.Объект.ProgressBarMax=Значение;
		КонецЕсли;
		Если ТипЗначенияСтр(Сам.АктивИкс.Объект.ProgressBarMax)="Число" Тогда
			Возврат Сам.АктивИкс.Объект.ProgressBarMax;
		КонецЕсли;
	Исключение
	КонецПопытки;
	Возврат Максимум;
КонецФункции



Функция УстановитьТекстПрогрессора(_ТекстПрогреccора=0,Обновлять=0) Экспорт
	Сам=Сам();
	Если ТипЗначенияСтр(_ТекстПрогреccора)="Строка" Тогда
		ТекстПрогреccора=_ТекстПрогреccора;
	КонецЕсли;
	Если Обновлять=1 Тогда
		Попытка
			Сам.АктивИкс.Объект.Caption=ТекстПрогреccора;
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	возврат ТекстКомментария;
КонецФункции


Функция УстановитьКомментарий(_ТекстКомментария=0,Обновлять=0) Экспорт
	Сам=Сам();
	Если ТипЗначенияСтр(_ТекстКомментария)="Строка" Тогда
		ТекстКомментария=_ТекстКомментария;
		Если Обновлять=1 Тогда
			Если Сам.ФормаОткрыта()=1 Тогда
				Сам.ОбновитьФорму();
			КонецЕсли;	
			
		КонецЕсли;
		
		
	КонецЕсли;
	
	возврат ТекстКомментария;
КонецФункции


Функция Инит(_Мин=0,_Макс=100) Экспорт
	Сам=Сам();
	
	Минимум(_Мин);
	Максимум(_Макс);
	Если ТекущееЗначение()<Минимум() Тогда
		ТекущееЗначение(Минимум());
	КонецЕсли;
	Если ТекущееЗначение()>Максимум() Тогда
		ТекущееЗначение(Максимум());
	КонецЕсли;
КонецФункции


Функция Сброс() Экспорт
	ТекстКомментария="";
	НазваниеПроцесса="";
	ВремяПоследнегоОбновления=0;
	ПроцессЗавершен=0;
	ТекущееЗначение(0);
	Минимум(0);
	Максимум(100);
КонецФункции


//------------------------------------ ------------------------------------
Процедура Конструктор()
	_База = Этот(Контекст).ПолучитьБазовыйКласс("КнопкаActiveButton");
	
	
	ТекстКомментария="";
	НазваниеПроцесса="";
	ВремяПоследнегоОбновления=0;
	
	ТекущееЗначение=0;
	Минимум=0;
	Максимум=100;
	ИнтервалОбновления=500;//500 мсек

КонецПроцедуры // Конструктор

//------------------------------------ ------------------------------------
Процедура Деструктор()

КонецПроцедуры // Деструктор

Функция Комментарий() Экспорт
	возврат ТекстКомментария;
КонецФункции

Функция ПроцентВыполнения() Экспорт
	Попытка
		ПроцентВыполнения=Окр((ТекущееЗначение-Минимум)/(Максимум-Минимум)*100,0,1);
	Исключение
		ПроцентВыполнения=0;
	КонецПопытки;


	Возврат ПроцентВыполнения;
КонецФункции

Функция НазваниеПроцесса() Экспорт
	Возврат НазваниеПроцесса;
КонецФункции

Процедура НачатьПроцесс(_НазваниеПроцесса="",_Мин=0,_Макс=100) Экспорт
	Сам=Сам();
	Сам.Сброс();
	Сам.Инит(_Мин,_Макс);

	НазваниеПроцесса=_НазваниеПроцесса;
КонецПроцедуры


Процедура ЗавершитьПроцесс() Экспорт
	Сам=Сам();
	Сам.Сброс();
	ПроцессЗавершен=1;
	Сам.ЗакрытьФорму();
КонецПроцедуры

Функция ПроцессЗавершен() Экспорт
	Возврат ПроцессЗавершен;
КонецФункции

Функция ПолучитьЦвет(ЗначениеПараметра) Экспорт
	Если Найти(ЗначениеПараметра,",")>0 Тогда
		ЗначениеПараметра=СтрЗаменить(ЗначениеПараметра,",",РазделительСтрок);
		Красный=Число(СтрПолучитьСтроку(ЗначениеПараметра,1));
		Зеленый=Число(СтрПолучитьСтроку(ЗначениеПараметра,2));
		Синий  =Число(СтрПолучитьСтроку(ЗначениеПараметра,3));
		возврат глОбщиеФункции.ПолучитьЦвет(Красный,Зеленый,Синий);
	Иначе
		возврат Число(ЗначениеПараметра);
	КонецЕсли;
КонецФункции

Функция НадоОбновить() Экспорт
	Сам=Сам();
	Если _GetPerformanceCounter()-ВремяПоследнегоОбновления>ИнтервалОбновления Тогда
		Возврат 1;
	КонецЕсли;
	Возврат 0;
КонецФункции



Процедура УстановитьАтрибут(пКонтекстФормы,Идент) Экспорт
	_База.УстановитьАтрибут(пКонтекстФормы,Идент);
	Инит(Минимум,Максимум);
	ТекущееЗначение(Минимум);
	ВремяПоследнегоОбновления=0;
КонецПроцедуры


Процедура УстановитьПоказательВыполнения(_Значение,Обновлять=1) Экспорт
	Сам=Сам();
	ТекущееЗначение=Число(_Значение);
	Если (Обновлять=1) Тогда
		ТекущееЗначение(ТекущееЗначение);
	КонецЕсли;
КонецПроцедуры

Процедура ПоказатьПрогресс(_Значение=-1,_ТекстНаПрогрессоре=0,_Комментарий=0,_НазваниеПроцесса=0) Экспорт
	
	Если _Значение<>-1 Тогда
		ТекущееЗначение=_Значение;
	КонецЕсли;
	ЗначениеКПоказу=ТекущееЗначение;
	
	Если ЗначениеКПоказу=Максимум() Тогда
		Обновлять=1;
	Иначе
		Обновлять=НадоОбновить();
	КонецЕсли;
	
	Если ТипЗначенияСтр(_НазваниеПроцесса)="Строка" Тогда
		НазваниеПроцесса=_НазваниеПроцесса;
	КонецЕсли;
	
	УстановитьПоказательВыполнения(ЗначениеКПоказу,Обновлять);
	УстановитьТекстПрогрессора(_ТекстНаПрогрессоре,Обновлять);
	УстановитьКомментарий(_Комментарий,Обновлять);
	
КонецПроцедуры

Функция Процент(_ЗначениеПрогрессора=-1) Экспорт
	
	Если _ЗначениеПрогрессора=-1 Тогда
		ЗначениеПрогрессора=ТекущееЗначение;
	Иначе
		ЗначениеПрогрессора=_ЗначениеПрогрессора;
	КонецЕсли;	
	
	Дельта=Максимум-Минимум;
	Если Дельта<=0 Тогда
		Возврат 0;
	ИначеЕсли ЗначениеПрогрессора<=Минимум Тогда	
		Возврат 0;
	ИначеЕсли ЗначениеПрогрессора=Максимум Тогда	
		Возврат 100;
	КонецЕсли;
	
	возврат Цел((ЗначениеПрогрессора-Минимум)/Дельта*100);
КонецФункции


Процедура ПриОткрытии()
//#if _NOW_PREPARE_CLASS
	Форма.Параметр._ПриОткрытии(); // для отладки класса
//#endif // _NOW_PREPARE_CLASS
КонецПроцедуры // ПриОткрытии

 // завершение класса Wizard1C++ !!
