//Конфигурация для платформы "1С:Предприятие 7.7" РБ-Софт:Рабочее место кассира.
//Версия 4.57 от 05.06.11 23:24:52
//(c) Баинов Евгений, ООО "РБ-Софт" 2006-2011 г.Улан-Удэ, ул.Балтахинова,17Е,офис 215
//e-mail: bainov@rb-soft.ru  icq: 73718937, телефоны: (3012) 440-357, 278-228
//Сайт проекта: http://code.google.com/p/rbsoft-rmk/
//_______________________________________________________________________________________
//Класс ПраваДоступа
//_______________________________________________________________________________________
Перем _База Экспорт;
Перем МастерКод Экспорт;
Перем ТаблицаПолномочий;//Таблица значений с описанием прав доступа

Перем ТекущийПользователь Экспорт; //Структура Пользователь
Перем ТекущаяРоль Экспорт;         //Класс Роль

Функция Этот(Конт) 		Возврат Конт; 			КонецФункции
Функция Сам() 			Возврат Этот(Контекст) 	КонецФункции

Процедура ЗаполнитьТаблицуПолномочий() Экспорт

	ТаблицаПолномочий=глФабрикаОбъектов.Новый("ТаблицаПолномочий");


	Таблица=СоздатьОбъект("Таблица");
	Таблица.ИсходнаяТаблица("Полномочия");
	Таблица.Вывести();

	ЗакончилиЧитать=0;
	НомерСтроки=7;  // с 7-ой строки начинается описание прав
	ПустыхСтрок=0;


	Пока ЗакончилиЧитать=0 Цикл

		Область=Таблица.Область(НомерСтроки,2,НомерСтроки,2);

		ИД_Права		=	ВРЕГ(СокрЛП(Область.Текст));

		Область=Таблица.Область(НомерСтроки,3,НомерСтроки,3);
		ИД_ПраваСтр		=	СокрЛ(Область.Текст);

		Область=Таблица.Область(НомерСтроки,4,НомерСтроки,4);
		Описание_Права		=	СокрЛ(Область.Текст);

		Если ИД_Права="" Тогда
			ПустыхСтрок=ПустыхСтрок+1;
		ИначеЕсли (Лев(ИД_Права,1)="#")или(Лев(ИД_Права,2)="//") Тогда
			//Комментарии пропускаем
		Иначе

			ПустыхСтрок=0;
			ТаблицаПолномочий.НоваяСтрока();
			ТаблицаПолномочий.ИД = ИД_Права;
			ТаблицаПолномочий.ИДСтр = ИД_ПраваСтр;
			ТаблицаПолномочий.Описание = Описание_Права;
		КонецЕсли;

		Если ПустыхСтрок=10 Тогда
			ЗакончилиЧитать=1;
		КонецЕсли;
		НомерСтроки=НомерСтроки+1;
	КонецЦикла;
КонецПроцедуры

Процедура Конструктор()
    _База = Этот(Контекст).ПолучитьБазовыйКласс("Объект");
	МастерКод="BDDFD6A1F257F97118B4EBEA262F00DF5E5B9B09";



	ЗаполнитьТаблицуПолномочий();

КонецПроцедуры

Процедура Деструктор()

КонецПроцедуры

Функция ПолучитьТаблицуПолномочий() Экспорт
	ТЗ=СоздатьОбъект("ТаблицаЗначений");
	ТЗ.Загрузить(ТаблицаПолномочий);
	Возврат ТЗ;
КонецФункции


//Парсим ИДПолномочия - разбиваем на подстроки по разделителю "."
//Добавляем необходимую ветку в дерево
//Пример:
//Устройство.ККМ.ОтчетХ.Использование
//Создается новая строка в ДеревоПолномочий с ИД=Устройство
//В поле подДерево записывается ТаблицаЗначений типа "ДеревоПолномочий"
//В поддереве создается строка с ИД=ККМ
//В его поддереве создается поддерево со строкой ИД=ОтчетХ и т.д.

Процедура ДобавитьВДеревоПолномочий(ДеревоПолномочий,ИДПолномочия,Представление,Значение=0,КоординатыУзла)
	Стр=0;
	Поз=Найти(ИДПолномочия,".");
	ИДПодДерево="";
	ПредставлениеПодДерева="";
	ИДУзла=ВРЕГ(ИДПолномочия);
	ПредставлениеУзла=Представление;
	Если Поз>0  Тогда
		ИДПодДерево=Сред(ИДПолномочия,Поз+1);
		ИДУзла=Лев(ИДУзла,Поз-1);
	КонецЕсли;

	Поз=Найти(Представление,".");
	Если Поз>0  Тогда

		ПредставлениеПодДерева=Сред(Представление,Поз+1);
		ПредставлениеУзла=Лев(Представление,Поз-1);
	ИначеЕсли ИДПодДерево<>"" Тогда
		ПредставлениеПодДерева=ИДПодДерево;
		ПредставлениеУзла=ИДУзла;
	КонецЕсли;



	Если ДеревоПолномочий.НайтиЗначение(ИДУзла,Стр,"ИД")=1 Тогда
		ДеревоПолномочий.ПолучитьСтрокуПоНомеру(Стр);

		Если ИДПодДерево="" Тогда
			ДеревоПолномочий.Значение=Значение;
			ДеревоПолномочий.НомерПиктограммы=?(Значение=0,1,2);
		ИначеЕсли ПустоеЗначение(ДеревоПолномочий.ПодДерево)=1 Тогда
			ДеревоПолномочий.ПодДерево=глФабрикаОбъектов.Новый("ДеревоПолномочий");
		КонецЕсли;

	Иначе
		ДеревоПолномочий.НоваяСтрока();
		ДеревоПолномочий.ИД=ИДУзла;
		ДеревоПолномочий.Наименование=ПредставлениеУзла;
		ДеревоПолномочий.ПолныйПуть=?(КоординатыУзла="","",КоординатыУзла+"/")+ДеревоПолномочий.НомерСтроки;

		Если ИДПодДерево="" Тогда
			ДеревоПолномочий.Значение=Значение;
			ДеревоПолномочий.НомерПиктограммы=?(Значение=0,1,2);
		Иначе
			ДеревоПолномочий.ПодДерево=глФабрикаОбъектов.Новый("ДеревоПолномочий");
		КонецЕсли;


	КонецЕсли;

	Если ИДПодДерево<>"" Тогда
		ДобавитьВДеревоПолномочий(ДеревоПолномочий.ПодДерево,ИДПодДерево,ПредставлениеПодДерева,Значение,?(КоординатыУзла="","",КоординатыУзла+"/")+ДеревоПолномочий.НомерСтроки);
	КонецЕсли;

КонецПроцедуры


Функция ПолучитьДеревоПолномочий(пТаблицаПолномочий) Экспорт
	ДеревоПолномочий=глФабрикаОбъектов.Новый("ДеревоПолномочий");

	пТаблицаПолномочий.ВыбратьСтроки();
	Пока пТаблицаПолномочий.ПолучитьСтроку()=1 Цикл
		ДобавитьВДеревоПолномочий(ДеревоПолномочий,пТаблицаПолномочий.ИД,пТаблицаПолномочий.ИДСтр,пТаблицаПолномочий.Значение,"");
	КонецЦикла;

	Возврат ДеревоПолномочий;
КонецФункции


//Возвращает 1 - если у текущего пользователя есть право с идентификатором ИмяПрава
//           0 - нет права. Также возвращает 0 если текущий пользователь не выбран
Функция ЕстьПраво(ИмяПрава) Экспорт

	Если ПустоеЗначение(ТекущаяРоль)=0 Тогда
		возврат ТекущаяРоль.ЕстьПраво(ИмяПрава);
	КонецЕсли;

	возврат 0;
КонецФункции


Процедура ПоказатьОкноЗапрета(Текст="",Таймаут=10) Экспорт
	Если Текст="" Тогда
		глПредупреждение("Операция недоступна.
		|Недостаточно прав.",Таймаут,5);
	Иначе
		глПредупреждение(Текст,Таймаут,5);
	КонецЕсли;

КонецПроцедуры

//Функция ЗапросПользователя
//Назначение:
//Параметры:
//
//Режим 0-один запрос 1-бесконечный запрос пока не будет сделан выбран
//Возвращает:
// 1-выбор сделан 0-не выбран
// 2-произведена авторизация по карте без ввода пароля
//Пользователь-выбранный пользователь
Функция ЗапросПользователя(Пользователь,Режим=0) экспорт
	Сам=Сам();


	Структура=СоздатьОбъект("Структура");
	Структура.Вставить("Режим",?(Режим=1,"БесконечныйЗапрос","ПростойЗапрос"));
	Структура.Вставить("Пользователь",Пользователь);
	Результат=Сам.ОткрытьФормуОбъектаМодально("ФормаЗапросПользователя",Структура);

	Если Результат<>0 Тогда
		Пользователь=Структура;
	КонецЕсли;  //Результат=1
	возврат Результат;
КонецФункции //ЗапросПользователя

//_____________________________________________________________________________
//Функция ЗапросПароля
//Назначение:
//Параметры:
//Пользователь - сируктура-пользователь для ввода пароля
//Режим 0-один запрос 1-бескончный запрос пока не будет сделан выбран
//Возвращает:
// 1-пароль нормальный 0-не совпадает
Функция ЗапросПароля(Пользователь,Режим=0,Заголовок="Запрос пароля") экспорт
	Сам=Сам();


	СтруктураПараметров=НовыйОбъект("ПараметрыФормыОбъекта");
	СтруктураПараметров.Объект=Сам;
	СтруктураПараметров.Данные=Пользователь;



	ОткрытьФормуМодально("Обработка.Class_ПраваДоступа_ФормаЗапросПароля",СтруктураПараметров);


	возврат СтруктураПараметров.Результат;
КонецФункции //ЗапросПароля

//_____________________________________________________________________________
//Функция ЗашифроватьПароль
//Назначение:
//зашифровать пароль в соответствии с настройками прогрммы.
//пароль также может быть зашифровн по произвольному ключу
//Параметры:
//Пароль
//Ключ - ключ для шифрования пароля
//		необязательный. Если отсутствует или пустой, то пароль шифруется в соответствии с настройкой Settings/PasswordSecurityKey
//Возвращает:
//шифровнный пароль
Функция ЗашифроватьПароль(Пароль,Ключ="") экспорт
	Перем PasswdKey;
	Если Ключ="" Тогда
		PasswdKey=глНастройки.Получить(Врег("Settings/PasswordSecurityKey"));
	Иначе
		PasswdKey=Ключ;
	КонецЕсли;

	Если ПустоеЗначение(PasswdKey)=0 Тогда
		Шифратор=СоздатьОбъект("DynaCrypt");
		КодПароля=Шифратор.ЗашифроватьСтроку(Пароль,PasswdKey);
	Иначе
		КодПароля=Пароль;
	КонецЕсли;

	возврат КодПароля;
КонецФункции //глЗашифроватьПароль

//_____________________________________________________________________________
//Функция РасшифроватьПароль
//Назначение:
//Параметры:
//
//
//Возвращает:
//
Функция РасшифроватьПароль(КодПароля,Ключ="") экспорт
	Перем PasswdKey;
	Если Ключ="" Тогда
		PasswdKey=глНастройки.Получить(Врег("Settings/PasswordSecurityKey"));
	Иначе
		PasswdKey=Ключ;
	КонецЕсли;

	Если ПустоеЗначение(PasswdKey)=0 Тогда
		Шифратор=СоздатьОбъект("DynaCrypt");
		Пароль=КодПароля;
		Рез=Шифратор.ДешифроватьСтроку(Пароль,PasswdKey);
		Если Рез=1 Тогда
			Рез=Пароль;
		Иначе
			Рез="";
		КонецЕсли;
	Иначе
		//пароль нешифрованный
		Рез=КодПароля;
	КонецЕсли;

	возврат Рез;
КонецФункции //ЗашифроватьПароль

//_____________________________________________________________________________
//Функция СравнитьПароль
//Назначение:
//Параметры:
// Пароль строка
// КодПароля шифрованная строка
// Ключ - необязательный. ключ шифрования
//Возвращает:
// 1-шифрованный пароль совпадает со строкой КодПароля
Функция СравнитьПароль(Пароль,КодПароля,Ключ="") экспорт
	Сам=Сам();
	КодПароля1=Сам.ЗашифроватьПароль(СокрЛП(Пароль),Ключ);
	Если КодПароля1=СокрЛП(КодПароля) Тогда
		возврат 1;
	Иначе
		возврат 0;
	КонецЕсли;  //
КонецФункции //СравнитьПароль

Процедура УстановитьПользователя(Пользователь) Экспорт
	Если ТипЗначенияСтр(Пользователь)="Структура" Тогда
		ТекущийПользователь=Пользователь;
	Иначе
		ТекущийПользователь=Пользователь.Данные;
	КонецЕсли;

	Сам=Сам();
	Сам.ЗаполнитьТаблицуПолномочий();

	ТекущаяРоль=СоздатьОбъект("Роль");
	ТекущаяРоль.Прочитать(ТекущийПользователь.Полномочия);

	глПослатьКоманду(Сам,"УстановкаПользователя",ТекущийПользователь);
КонецПроцедуры

//Функция Авторизация
//Назначение:
//Параметры:
//Режим=0 - запрос 1 раз
//Режим=1 - бесконечный запрос
//Возвращает:
//
Функция Авторизация(Режим=0) экспорт
	Перем лПользователь;

	глЗаписатьСобытие("ПраваДоступа","Начало авторизации");

	Сам=Сам();
	Результат=0;
	Если Режим=1 Тогда
		Пока Результат=0 Цикл
			Результат=Сам.ЗапросПользователя(лПользователь,1);
		КонецЦикла;
	Иначе
		Результат=Сам.ЗапросПользователя(лПользователь,1);
	КонецЕсли;  //

	Попытка
		Имя=лПользователь.Наименование;
	Исключение
		Имя="";
	КонецПопытки;


	Если Результат=1 Тогда
		глЗаписатьСобытие("ПраваДоступа","Авторизация пройдена по паролю",Имя);

		Сам.УстановитьПользователя(лПользователь);
		возврат 1;
	ИначеЕсли Результат=2 Тогда
		//по карте или штрихкоду

		глЗаписатьСобытие("ПраваДоступа","Авторизация по идентификационной карте",Имя);

		Сам.УстановитьПользователя(лПользователь);
		возврат 1;
	Иначе

		глЗаписатьСобытие("ПраваДоступа","Авторизация НЕ ПРОЙДЕНА",Имя);
	КонецЕсли;  //

	возврат 0;
КонецФункции //Авторизация



//описать действия по событию сканера
//возвращает 1- событие обработано, дальнейшая обработка в подписчиках на событие не требуется
//           0- можно продолжиь дальнейшую обработку события
Функция СобытиеСканера(Событие) Экспорт
	Сам=Сам();
	Если Событие.Источник="Сканер" Тогда

		Если ПустоеЗначение(Событие.Описатель.Объект)=1 Тогда
			глПредупреждение("Не найден объект по штрихкоду "+Событие.Описатель.Данные);
		Иначе
			Если Событие.Описатель.ТипОбъекта="Пользователь" Тогда
				Пользователь=Событие.Описатель.Объект;
				Если Пользователь.Активный=1 Тогда
					Сам.УстановитьПользователя(Пользователь);
				КонецЕсли;
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат 0;
КонецФункции

//описать действия по событию ридера карточек
//возвращает 1- событие обработано, дальнейшая обработка в подписчиках на событие не требуется
//           0- можно продолжиь дальнейшую обработку события

Функция СобытиеРидера(Событие) Экспорт
	Сам=Сам();
	Если Событие.Источник="Ридер" Тогда

		Если ПустоеЗначение(Событие.Описатель.Объект)=1 Тогда

			Если глНастройки.ПолучитькакЧисло("CARDS/ShowMagneticReaderData")=1 Тогда
				глПредупреждение("Не найден объект по данным ридера.
				|"+Событие.Описатель.Данные);
			Иначе
				глПредупреждение("Не найден объект по данным ридера.");
			КонецЕсли;

		Иначе

			Если Событие.Описатель.ТипОбъекта="Пользователь" Тогда
				Пользователь=Событие.Описатель.Объект;
				Если Пользователь.Активный=1 Тогда
					глПраваДоступа.УстановитьПользователя(Пользователь);
				КонецЕсли;
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат 0;
КонецФункции

//описать действия по событию механического ключа
//возвращает 1- событие обработано, дальнейшая обработка в подписчиках на событие не требуется
//           0- можно продолжиь дальнейшую обработку события

Функция СобытиеКлюча(Событие) Экспорт
	Сам=Сам();
	Если Событие.Источник="Ключ" Тогда
		Если Событие.Описатель.ТипОбъекта="Пользователь" Тогда
			Пользователь=Событие.Описатель.Объект;
			Если Пользователь.Активный=1 Тогда
				глПраваДоступа.УстановитьПользователя(Пользователь);
			КонецЕсли;
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	Возврат 0;
КонецФункции

//описать действия по событию радиоридера (проксимити)
//возвращает 1- событие обработано, дальнейшая обработка в подписчиках на событие не требуется
//           0- можно продолжиь дальнейшую обработку события

Функция СобытиеРадиоРидера(Событие) Экспорт
	Сам=Сам();

	СобытиеОбработано=0;

	Если СобытиеОбработано=1 Тогда
		глСобытиеОбработано(Событие);
		Сам.ТребуетсяОтображение();
		Возврат 1;
	КонецЕсли;
	Возврат 0;
КонецФункции



Функция ОбработкаСобытий(Издатель,Событие) Экспорт
	Сам=Сам();

	Отработали=0;



	Если Событие.Источник="Сканер" Тогда
		Отработали = Сам.СобытиеСканера(Событие);
	ИначеЕсли Событие.Источник="Ридер" Тогда
		Отработали = Сам.СобытиеРидера(Событие);
	ИначеЕсли Событие.Источник="Радиоридер" Тогда
		Отработали = Сам.СобытиеРадиоРидера(Событие);
	ИначеЕсли Событие.Источник="Ключ" Тогда
		Отработали = Сам.СобытиеКлюча(Событие);

	ИначеЕсли Событие.Источник="Команда" Тогда

		Команда=Событие.Описатель.Команда;

		Если Команда="Обновить" Тогда
			Сам.ОбновитьФорму();
			//Отработали = 1;
		ИначеЕсли Команда="УстановкаПользователя" Тогда

			Сам.ЗакрытьФорму();
			Отработали = 1;

		ИначеЕсли Команда="ЗаписанПользователь" Тогда

			//проверяем не является ли он текущим

			ЗаписанныйПользователь=Событие.Описатель.Данные;
			Если ПустоеЗначение(ЗаписанныйПользователь)=0 Тогда
				Если ПустоеЗначение(ТекущийПользователь)=0 Тогда
					Если ЗаписанныйПользователь.Данные.ИД=ТекущийПользователь.ИД Тогда
						УстановитьПользователя(ЗаписанныйПользователь);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			Отработали = 1;

		ИначеЕсли Команда="ЗаписанаРоль" Тогда
			ЗаписаннаяРоль=Событие.Описатель.Данные;
			Если ПустоеЗначение(ЗаписаннаяРоль)=0 Тогда
				Если ПустоеЗначение(ТекущаяРоль)=0 Тогда
					Если ЗаписаннаяРоль.Сравнить(ТекущаяРоль)=1 Тогда
						ТекущаяРоль=ЗаписаннаяРоль;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			Отработали = 1;

		КонецЕсли;


	КонецЕсли;


	Если Отработали = 1 Тогда
		глСобытиеОбработано(Событие);
	//	глПослатьКоманду(Сам,"Обновить");
		Возврат 0;
    КонецЕсли;
	Возврат 1;
КонецФункции