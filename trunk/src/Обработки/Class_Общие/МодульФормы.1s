//Конфигурация для платформы "1С:Предприятие 7.7" РБ-Софт:Рабочее место кассира.
//Версия 4.43 от 19.07.10 20:54:19
//Назначение: Автоматизация POS-узлов в магазинах (Point of sale).
//(c) Баинов Евгений, ООО "РБ-Софт" 2006, г.Улан-Удэ, проспект 50-летия Октября,21А,офис 110 
//e-mail: bainov@rb-soft.ru  icq: 73718937, телефоны: (3012) 44-03-57, 44-76-42, 44-86-58
//---------------------------------------------------------------------------------------
//Данная программа является свободным программным обеспечением.
//Вы вправе распространять ее и/или модифицировать в соответствии с условиями версии 2 
//либо по вашему выбору с условиями более поздней версии Стандартной Общественной Лицензии GNU,
//опубликованной Free Software Foundation. 
//Мы распространяем данную программу в надежде на то, что она будет вам полезной, 
//однако НЕ ПРЕДОСТАВЛЯЕМ НА НЕЕ НИКАКИХ ГАРАНТИЙ, 
//в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
//и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ.
//Для получения более подробной информации ознакомьтесь со Стандартной Общественной Лицензией GNU.
//Вместе с данной программой вы должны были получить экземпляр Стандартной Общественной Лицензии GNU.
//Если вы его не получили, сообщите об этом в Free Software Foundation, Inc.,
//59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//_______________________________________________________________________________________
//Имя модуля:
// <Вставить имя модуля>
//_______________________________________________________________________________________
//Разработчик: Баинов Евгений, e-mail: bainov@rb-soft.ru , icq: 73718937
//_______________________________________________________________________________________
//Назначение модуля:
// <Вставить описание модуля>
//
//_______________________________________________________________________________________
Перем ВремяНачалаТаймера;
Перем ТаймерВключен;
Перем ВремяТаймера;
Перем УправлениеКомпьютером экспорт;
Перем Меню;



Функция Этот(Конт) 		Возврат Конт; 			КонецФункции
Функция Сам() 			Возврат Этот(Контекст) 	КонецФункции

//*******************************************
Функция Вид() Экспорт
	Возврат "Общие";
КонецФункции	// гл


Процедура Конструктор() Экспорт
	ВремяНачалаТаймера=0;
	ТаймерВключен=0;
	ВремяТаймера=0;

	Окна=СоздатьОбъект("Окна");

	Меню=Окна.ПолучитьМеню();

	УправлениеКомпьютером=СоздатьОбъект("УправлениеКомпьютером");

	Если УправлениеКомпьютером.СервисДоступен()=0 Тогда
		Месага1="";
		Рез=УправлениеКомпьютером.УстановитьВСистему();
		Если Рез=0 Тогда
			глПредупреждение(Месага1+разделительстрок+
			"Если при повторном запуске сообщение повторяется, обратитесь к администратору.");
			Если Debug=0 Тогда
				СтатусВозврата(0);
			КонецЕсли;

			возврат;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура Деструктор() Экспорт

КонецПроцедуры


Функция ПредставлениеСравнения(ТипСравнения) Экспорт
	Стр=нрег(сокрЛП(ТипСравнения));
	Если Стр="=" Тогда
		возврат "равно";
	ИначеЕсли Стр="<>" Тогда
		возврат "не равно";
	ИначеЕсли Стр=">=" Тогда
		возврат "больше или равно";
	ИначеЕсли Стр="<=" Тогда
		возврат "меньше или равно";
	ИначеЕсли Стр=">" Тогда
		возврат "больше";
	ИначеЕсли Стр="<" Тогда
		возврат "меньше";
	ИначеЕсли Стр="contains" Тогда
		возврат "содержит";
	ИначеЕсли Стр="not contains" Тогда
		возврат "не содержит";
	ИначеЕсли Стр="in group" Тогда
		возврат "в группе";
	ИначеЕсли Стр="not in group" Тогда
		возврат "не в группе";
	ИначеЕсли Стр="in list" Тогда
		возврат "в списке";
	ИначеЕсли Стр="not in list" Тогда
		возврат "не в списке";
	ИначеЕсли Стр="in groups" Тогда
		возврат "в группе из списка";
	ИначеЕсли Стр="not in groups" Тогда
		возврат "не в группе из списка";
	КонецЕсли;
	возврат "неизвестно";
КонецФункции

//присваивает всем полям пустое значение того же типа что и текущее значение поля
Процедура ОчиститьСтруктуру(Структура) Экспорт
Перем ИмяПоля,Инд,ЗначениеПоля;
	Для Инд=1 По Структура.Количество() Цикл
	    ИмяПоля="";
		ЗначениеПоля=Структура.Получить(Инд,ИмяПоля);
		Попытка
			Структура.Вставить(ИмяПоля,ПолучитьПустоеЗначение(ТипЗначенияСтр(ЗначениеПоля)));
		Исключение
			Структура.Вставить(ИмяПоля,"");
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры


//
Функция СоздатьТЗДерева(ТЗ="") Экспорт
	
	Если ТипЗначенияСтр(ТЗ)<>"ТаблицаЗначений" Тогда
		ТЗ=СоздатьОбъект("ТаблицаЗначений");
	КонецЕсли;
	
	ТЗ.НоваяКолонка("Подуровень"); //ТЗ с подчинением
	ТЗ.НоваяКолонка("Картинка","Число");
	ТЗ.НоваяКолонка("Представление","Строка",,,"",50);
	ТЗ.НоваяКолонка("ИД"); //идентификатор объекта
	
	ТЗ.НоваяКолонка("Описание","Строка");
	ТЗ.НоваяКолонка("Объект");//сюда пишем описание объекта в виде структуры
	ТЗ.НоваяКолонка("Слои","Строка");
	
	ТЗ.ВидимостьКолонки("ИД,Описание,Объект,Слои",0);
	возврат ТЗ;
КонецФункции	// СоздатьТЗДерева

Процедура ДобавитьСтрокуДерева(ТЗ,ИД,Представление="",Описание="",ТЗПодуровень="",Картинка=0,Объект="",Слои="") Экспорт
	ТЗ.НоваяСтрока();
	ТЗ.Картинка=Картинка;
	ТЗ.ИД = ИД;
	ТЗ.Представление = ?(Представление="",ИД,Представление);
	ТЗ.Описание=Описание;
	ТЗ.Подуровень=ТЗПодуровень;
	ТЗ.Объект=Объект; //сюда пишем ссылку на объект
	ТЗ.Слои=Слои;
КонецПроцедуры	// ДобавитьСтрокуДерева


// функция для формирования значения цвета из составляющих (RGB)
Функция ПолучитьЦвет(Красный = 0,Зеленый = 0,Синий = 0) Экспорт
	Возврат Макс(0,Мин(255,Синий))*65536+Макс(0,Мин(255,Зеленый))*256+Макс(0,Мин(255,Красный));
КонецФункции
//_____________________________________________________________________________
//возврат параметров раскраски колонки при использовании компоненты 1CPP
Функция ЦветТаблицы(ЦветФона=-1,ЦветТекста=-1,Количество=2) Экспорт
	возврат ?(ЦветТекста=-1,"", "FONT["+Строка(ЦветТекста)+"]")+?(ЦветФона=-1  ,"","BRUSH["+Строка(ЦветФона)  +"]")+"COUNT["+Строка(Количество)+"]";
КонецФункции //глЦветТаблицы

//обеспечение просмотра списка значний или таблица значений
//используется при отладке
//если элементами ТЗ или СЗ являются в свою очередь тоже объекты ТЗ или СЗ,
//то обработка также обеспечивает просмотр этих объектов



Функция ВыключитьТаймер() Экспорт
	ТаймерВключен=0;
	ВремяТаймера=_GetPerformanceCounter()-ВремяНачалаТаймера;
КонецФункции

Функция ВключитьТаймер() Экспорт
	ВремяНачалаТаймера=_GetPerformanceCounter();
	ТаймерВключен=1;
КонецФункции

Функция ВремяТаймера(Режим=0) Экспорт
	Рез=0;
	Если ТаймерВключен=1 Тогда
		Рез=_GetPerformanceCounter()-ВремяНачалаТаймера;
	Иначе
		Рез=ВремяТаймера;
	КонецЕсли;

	Если Режим=1 Тогда
		Ч=0;М=0;С=0;мСек=0;
		Ч=Цел(Рез/3600000);
		Рез=Рез-Ч*3600000;
		М=Цел(Рез/60000);
		Рез=Рез-М*60000;
		Сек=Цел(Рез/1000);
		Рез=Рез-Сек*1000;
		мСек=Рез;
		Возврат Строка(Ч)+":"+Строка(М)+":"+Строка(Сек)+":"+Строка(мСек);
	КонецЕсли;

	Возврат Рез;
КонецФункции

//_____________________________________________________________________________
//Процедура Пауза
//Назначение:
//  Делает паузу на столько то миллисекунд
//Параметры:
//МиллиСек
//
Процедура Пауза(МиллиСек)  экспорт

	Попытка
		Система=СоздатьОбъект("Система");
		Система.Уснуть(МиллиСек);
			
	Исключение
		Нач=_GetPerformanceCounter();
		Пока _GetPerformanceCounter()-Нач<МиллиСек Цикл
		КонецЦикла;
	КонецПопытки;
КонецПроцедуры //Пауза

//_____________________________________________________________________________
//Функция ВыбратьИзМеню
//Назначение:
//Параметры:
//
//
//Возвращает:
//
Функция ВыбратьИзМеню(СЗ,Выбор,Поз=0,Таймаут=30) экспорт
Перем Зн;
    Зн=Выбор;
    Если СЗ.ВыбратьЗначение(Зн,"",Поз,Таймаут,1)=1 Тогда
        Выбор=Зн;
		возврат 1;
	КонецЕсли;  //
	возврат 0;
КонецФункции //ВыбратьИзМеню


Функция ПолучитьКлюч()
	Возврат "Crypto";
КонецФункции

Функция РасшифроватьМодуль (_ИмяФайла,ТекстМодуля,Причина)  Экспорт

	//модуль расшифровки
	ИмяФайла=глОбработатьМакроСтроку(_ИмяФайла);
	ТекстМодуля="";

	ФайлМодуля=глОбработатьМакроСтроку("%ETC%\"+ИмяФайла);
	Попытка
		Текст=СоздатьОбъект("Текст");
		Текст.Открыть(ФайлМодуля);
	Исключение
		Причина="Нет файла "+ФайлМодуля;
		возврат 0;
	КонецПопытки;
	Шифратор=СоздатьОбъект("DynaCrypt");
	Ключ=ПолучитьКлюч();

	Для Инд=1 По Текст.КоличествоСтрок() Цикл
		Стр=Текст.ПолучитьСтроку(Инд);
		Рез=Шифратор.ДешифроватьСтроку(Стр,Ключ);
		Если Рез=-2 Тогда
			Причина="Испорчен внешний модуль. Или неверный ключ регистрации.";
			возврат 0;
		ИначеЕсли Рез=-3 Тогда
			Причина="Испорчен внешний модуль. Ошибка в CRC.";
			возврат 0;
		Иначе
			ТекстМодуля=ТекстМодуля+Стр+"
			|";
		КонецЕсли;

	КонецЦикла;

	возврат 1;
КонецФункции

Процедура ВидимостьМеню(Флаг) Экспорт
	Окна=СоздатьОбъект("Окна");
	Попытка


		Если Флаг=0 Тогда
			Если Меню.РазмерСписка()=0 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;

		Если Флаг=1 Тогда
			Для Инд=1 По Меню.РазмерСписка() Цикл
				СтрИД="";
				ПодМеню=Меню.ПолучитьЗначение(Инд,СтрИД);
				Окна.ВидимостьМеню(СтрИД,Флаг);

			КонецЦикла;
		Иначе
			Для Инд=1 По Меню.РазмерСписка() Цикл
				СтрИД="";
				ПодМеню=Меню.ПолучитьЗначение(Инд,СтрИД);
				Окна.ВидимостьМеню(СтрИД,Флаг);

			КонецЦикла;
		КонецЕсли;

	Исключение
		глДебаг(ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры	// глОтключитьМеню

//копирует поля из одной структуры в другую
Процедура ЗаполнитьСвойства(Цель,Источник) Экспорт

	Для Инд=1 По Источник.Количество() Цикл

		ИмяПоля="";
		ЗначениеПоля=Источник.Получить(Инд,ИмяПоля);
		Если Цель.Свойство(ИмяПоля)=1 Тогда
			Цель.Вставить(ИмяПоля,ЗначениеПоля,1);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


//открывает диалог для выбора значения из таблицы значений ТабВыбора
//КолонкаВыбора - имя колонки, в которой находятся выбираемые значения,
//ТекЭлемент- возвращается выбранный элемент, если на входе в параметре указан элемент,
//то он становится текущим при открытии
//СпособВыбора - (необязателен - по умолчанию 0)
//0-выбор одного элемента 1 - выбор нескольких
//  если 0 то возврат выбранного элемента
//  если 1 то возврат выбранного списка значений
//  в процессе выбора выбранные значения отмечаются галочками
//возврат 1 - в случае выбора
//0- в случае отказа от выбора
//Цвета - список значений с цветами
//     Строка=Имя колонки
//     Значение=Таблица значений со значениями и соответствующими цветами
//             если значение пустое, то цвета выбираются программой автоматически
Функция ВыбратьИзТаблицы(ТабВыбора,КолонкаВыбора="",ТекЭлемент,Подсказка="",СпособВыбора=0,Цвета="",СкрытьКолонки="") экспорт
Перем Рез;
    Рез=0;

	Параметры=СоздатьОбъект("СписокЗначений");
	Параметры.Установить("Колонка",КолонкаВыбора);
	Параметры.Установить("ТекущийЭлемент",ТекЭлемент);
	Параметры.Установить("Подсказка",Подсказка);
	Параметры.Установить("СпособВыбора",СпособВыбора);
	Параметры.Установить("Таблица",ТабВыбора);
	Параметры.Установить("СтатусВозврата",0);
	Параметры.Установить("Цвета",Цвета);
	Параметры.Установить("СкрытьКолонки",СкрытьКолонки);


	ОткрытьФормуМодально("Обработка.ВыборИзТаблицы",Параметры);
	Рез=Параметры.Получить("СтатусВозврата");
	Если Рез=1 Тогда
	   ТекЭлемент=Параметры.Получить("Выбор");
	КонецЕсли;
	возврат Рез;
КонецФункции


Процедура ЗакрытьОкноСообщений() Экспорт
	УправлениеКомпьютером.ЗакрытьОкноСообщений();
КонецПроцедуры

Процедура ВыключитьКомпьютер() экспорт
	УправлениеКомпьютером.ВыключитьКомпьютер();
КонецПроцедуры

//_____________________________________________________________________________
Функция РазницаДат(Дата1, Дата2, Лет, Мес, Дней) Экспорт
	Перем Д1, Д2, Д;

	Лет = 0; Мес = 0; Дней = 0;
	Если ПустоеЗначение(Дата1) = 1 Тогда Возврат 0; КонецЕсли;
	Если ПустоеЗначение(Дата2) = 1 Тогда Возврат 0; КонецЕсли;
	Если Дата1 <= Дата2 Тогда
		Д1 = Дата1; Д2 = Дата2;
	Иначе
		Д1 = Дата2; Д2 = Дата1;
	КонецЕсли;

	Д = Д1;
	Пока 1 = 1 Цикл
		Если ДобавитьМесяц(Д, 12) <= Д2 Тогда
			Лет = Лет + 1;
			Д = ДобавитьМесяц(Д, 12);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Пока 1 = 1 Цикл
		Если ДобавитьМесяц(Д, 1) <= Д2 Тогда
			Мес = Мес + 1;
			Д = ДобавитьМесяц(Д, 1);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Пока 1 = 1 Цикл
		Если (Д + 1) <= Д2 Тогда
			Дней = Дней + 1;
			Д = Д + 1;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат (Лет * 12) + Мес;
КонецФункции

//_____________________________________________________________________________
//Вычисляет границы пересечения двух периодов. Периоды могут быть открытыми (т.е. одна из дат пустая. Или обе.)
//Возвращает 1 если периоды пересекаются, и 0 - в противном случае.
Функция ПересечениеПериодов(НП1, КП1, НП2, КП2, ПересечениеНач = "", ПересечениеКон = "") Экспорт
	Перем Д1, Д2;

	Если (ПустоеЗначение(НП1) = 1) И (ПустоеЗначение(НП2) = 1) Тогда
		Д1 = '';
	ИначеЕсли ПустоеЗначение(НП1) = 1 Тогда
		Д1 = НП2;
	ИначеЕсли ПустоеЗначение(НП2) = 1 Тогда
		Д1 = НП1;
	Иначе
		Д1 = Макс(НП1, НП2);
	КонецЕсли;

	Если (ПустоеЗначение(КП1) = 1) И (ПустоеЗначение(КП2) = 1) Тогда
		Д2 = '';
	ИначеЕсли ПустоеЗначение(КП1) = 1 Тогда
		Д2 = КП2;
	ИначеЕсли ПустоеЗначение(КП2) = 1 Тогда
		Д2 = КП1;
	Иначе
		Д2 = Мин(КП1, КП2);
	КонецЕсли;

	Если (ПустоеЗначение(Д1) = 0) И (ПустоеЗначение(Д2) = 0) Тогда
		Если Д1 > Д2 Тогда
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	ПересечениеНач = Д1;
	ПересечениеКон = Д2;
	Возврат 1;
КонецФункции

//_____________________________________________________________________________
Функция НайтиФайлВнешнегоОтчета(ИмяОтчета, сзПути)
	Перем н, Путь;

	Для н = 1 По сзПути.РазмерСписка() Цикл
		Путь = сзПути.ПолучитьЗначение(н);
		Если ПустаяСтрока(Путь) = 1 Тогда Продолжить; КонецЕсли;

		Если ФС.СуществуетФайл(Путь + ИмяОтчета + ".ert") = 1 Тогда
			Возврат Путь + ИмяОтчета + ".ert";
		КонецЕсли;
	КонецЦикла;

	Если ФС.СуществуетФайл(КаталогИБ() + ИмяОтчета + ".ert") = 1 Тогда
		Возврат КаталогИБ() + ИмяОтчета + ".ert";
	ИначеЕсли ФС.СуществуетФайл(КаталогИБ() + "ExtForms\" + ИмяОтчета + ".ert") = 1 Тогда
		Возврат КаталогИБ() + "ExtForms\" + ИмяОтчета + ".ert";
	Иначе
		Возврат "" ;
	КонецЕсли;
КонецФункции

Процедура ЗаписатьСтатистикуИсходныхТекстов(Показывать=0) Экспорт
	
	
	Сам=Сам();
	Структура=0;
	КоличествоСтрок=глФайловаяСистема.КоличествоСтрокВФайлах(КаталогИБ()+"SRC", "*.1s", 1,Структура);
	Текст=СоздатьОбъект("Текст");
	Текст.ДобавитьСтроку(""+ТекущаяДата()+" "+ТекущееВремя());
	Текст.ДобавитьСтроку("Строк всего             = "+Структура.КоличествоСтрок);
	Текст.ДобавитьСтроку("Непустых строк          = "+Структура.КоличествоНепустыхСтрок);
	Текст.ДобавитьСтроку("Строк программного кода = "+Структура.КоличествоСтрокКода);
	Текст.ДобавитьСтроку("Строк комментария       = "+Структура.КоличествоСтрокКомментария);
	Текст.ДобавитьСтроку("Количество процедур = "+Структура.КоличествоПроцедур);
	Текст.ДобавитьСтроку("Количество функций  = "+Структура.КоличествоФункций);

	Текст.ДобавитьСтроку("Путь к файлу
		|КоличествоСтрок	КоличествоНепустыхСтрок	КоличествоСтрокКода	КоличествоСтрокКомментария	КоличествоПроцедур	КоличествоФункций");


	ТаблицаФайлов=Структура.ТаблицаФайлов;
	ТаблицаФайлов.ВыбратьСтроки();
	Пока ТаблицаФайлов.ПолучитьСтроку()=1 Цикл

		Текст.ДобавитьСтроку(ТаблицаФайлов.Путь+"
		|"+ТаблицаФайлов.КоличествоСтрок+"	"+ТаблицаФайлов.КоличествоНепустыхСтрок+"	"+ТаблицаФайлов.КоличествоСтрокКода+"	"+ТаблицаФайлов.КоличествоСтрокКомментария+"	"+ТаблицаФайлов.КоличествоПроцедур+"	"+ТаблицаФайлов.КоличествоФункций);

	КонецЦикла;

	ИмяФайла=КаталогИБ()+"SYSLOG\"+СтрЗаменить(СтрЗаменить("CodeStat"+Формат(ТекущаяДата(),"ДГГГГММДД")+ТекущееВремя(),".",""),":","")+".txt";

	Текст.Записать(ИмяФайла);

	Если Показывать=1 Тогда
		глБраузер(Структура);
	КонецЕсли;
КонецПроцедуры


//вставляет в начало файла комментарий
//Заменить=1 - существующий комментарий заменяется на новый
//         0 - добавляется в начало файла
Процедура УстановитьКомментарийФайла(Путь,Комментарий,Заменить=1) Экспорт

	Текст=СоздатьОбъект("Текст");
	Текст.Открыть(Путь);


	Если Заменить=1 Тогда
		Текст1=СоздатьОбъект("Текст");

		НачалоФайла=1;
		КоличествоСтрок=Текст.КоличествоСтрок();
		Для ИндСтр=1 По КоличествоСтрок Цикл
			СтрТекста=СокрП(Текст.ПолучитьСтроку(ИндСтр));
			Стр=СокрЛ(СтрТекста);


			Если (ПустаяСтрока(Стр)=0)И(НачалоФайла=1) Тогда
				Если (Лев(Стр,2)="//") Тогда
					НачалоМодуля="//________________";
					Если (Лев(Стр,СтрДлина(НачалоМодуля))=НачалоМодуля) Тогда
						НачалоФайла=0;
						Продолжить;
					Иначе
						Продолжить;
					КонецЕсли;
				ИначеЕсли (Лев(Стр,2)<>"//") Тогда
					НачалоФайла=0;
				КонецЕсли;
			КонецЕсли;

			Текст1.ДобавитьСтроку(СтрТекста);
		КонецЦикла;

		Текст1.ВставитьСтроку(1,Комментарий);
		Текст1.Записать(Путь);
	Иначе
		Текст.ВставитьСтроку(1,Комментарий);
		Текст.Записать(Путь);
	КонецЕсли;

КонецПроцедуры



