//Конфигурация для платформы "1С:Предприятие 7.7" РБ-Софт:Рабочее место кассира.
//Версия 4.57 от 05.06.11 23:24:52
//(c) Баинов Евгений, ООО "РБ-Софт" 2006-2011 г.Улан-Удэ, ул.Балтахинова,17Е,офис 215
//e-mail: bainov@rb-soft.ru  icq: 73718937, телефоны: (3012) 440-357, 278-228
//Сайт проекта: http://code.google.com/p/rbsoft-rmk/
//_______________________________________________________________________________________
//Экранная форма класса НастройкиРМК
//Имя формы : ОсновнаяФорма
//_______________________________________________________________________________________
Перем Объект;
Перем SettingsPasswordSecurityKeyInfo;

Перем ЗакладкиОбмен;
Перем ТекущаяЗакладкаФормы;

Перем ТабличноеПолеАвтоскидок;
Перем ТабличноеПолеИДКарт;


Перем ПолеЛицензии;


//показывает картинку - пример скина
//в объекте ДемоКартинкаСкина
Процедура ПоказатьПримерСкина(Режим)
	ИмяФайла=глОбработатьМакроСтроку("%Skins%\"+СокрЛП(SettingsSkin)+"\Пример"+Режим+".bmp");
	Картинка=СоздатьОбъект("Картинка");
	Если ФС.СуществуетФайл(ИмяФайла)=1 Тогда
		Картинка.Загрузить(ИмяФайла);
	Иначе
		Картинка.Загрузить("Белый");
	КонецЕсли;
	ДемоКартинкаСкина.УстановитьКартинку(Картинка);
	Форма.Обновить();
КонецПроцедуры


Процедура УстановитьДоступность()
	Если EXCHANGECopyChecksToServer=1 Тогда


	Иначе

	КонецЕсли;
КонецПроцедуры

Процедура ИнициализироватьДиалог()

	DataBaseStructureFileType.ДобавитьЗначение("mxl","Табличный документ 1С");
	DataBaseStructureFileType.ДобавитьЗначение("txt","Текстовый документ");
	DataBaseStructureFileType.ДобавитьЗначение("htm","Файл HTM");
	DataBaseStructureFileType.ДобавитьЗначение("xls","Файл Exсel");

	Поз=DataBaseStructureFileType.НайтиЗначение(нрег(Объект.Получить("PROGRAMMING/DataBaseStructureFileType")));
	Если Поз>0 Тогда
	    DataBaseStructureFileType.ТекущаяСтрока(Поз);
	Иначе
		DataBaseStructureFileType.ТекущаяСтрока(1);
	КонецЕсли;  //Поз>0

	DataBaseStructureFile=Объект.Получить("PROGRAMMING/DataBaseStructureFile");

	DataBaseStructureShowFlag=Объект.ПолучитьКакЧисло("PROGRAMMING/DataBaseStructureShowFlag");

	Debug=Объект.ПолучитьКакЧисло("PROGRAMMING/Debug");
	DebugLog=Объект.ПолучитьКакЧисло("PROGRAMMING/DebugLog");

	SaveCodeStatistics=Объект.ПолучитьКакЧисло("PROGRAMMING/SaveCodeStatistics");


	ScanCodesWeightPrefix=Объект.Получить("ScanCodes/WeightPrefix");
	ScanCodesOurPrefix=Объект.Получить("ScanCodes/OurPrefix");



	SettingsModalMode=Объект.ПолучитьКакЧисло("Settings/ModalMode");


	РежимГруппировки=Объект.ПолучитьКакЧисло("Settings/GroupGoods");
	Если (РежимГруппировки>2)Или(РежимГруппировки<0) Тогда
		РежимГруппировки=0;
	КонецЕсли;
	РежимГруппировки=РежимГруппировки+1;
	SettingsGroupGoods.ТекущаяСтрока(РежимГруппировки);

	SettingsDefaultGoodsGroup=	Объект.Получить("Settings/DefaultGoodsGroup");

	SettingsPOSNumber=Объект.Получить("Settings/POSNumber");

	SettingsSkin=Объект.Получить("Settings/Skin");
	ПоказатьПримерСкина("Регистрация");



	SettingsDataBaseType.ДобавитьЗначение("DBF","База данных DBF");

	//Добавлять постепенно, с прибавлением интерфейсов к базам

	//SettingsDataBaseType.ДобавитьЗначение("MYSQL");
	//SettingsDataBaseType.ДобавитьЗначение("SQLITE");
	//SettingsDataBaseType.ДобавитьЗначение("PGSQL","Postgre SQL");
	//SettingsDataBaseType.ДобавитьЗначение("MSSQL","Microsoft SQL");


	ТипБазы=Врег(Объект.Получить("SETTINGS/DataBaseType"));
	Поз=SettingsDataBaseType.НайтиЗначение(ТипБазы);
	Если Поз>0 Тогда
	    SettingsDataBaseType.ТекущаяСтрока(Поз);
	Иначе
		SettingsDataBaseType.ДобавитьЗначение(ТипБазы);
		SettingsDataBaseType.ТекущаяСтрока(SettingsDataBaseType.РазмерСписка());
	КонецЕсли;  //Поз>0

	MaxPaySumm=Объект.ПолучитьКакЧисло("Settings/MaxPaySumm");

	SettingsPasswordSecurityKey	=	Объект.Получить("Settings/PasswordSecurityKey");

	//Регистрировать данные для постпродажного сервиса (Доставка,Сборка и т.п.)
	RegisterService=Объект.ПолучитьКакЧисло("Settings/RegisterService");
	//Регистрировать продавцов
	RegisterSeller=Объект.ПолучитьКакЧисло("Settings/RegisterSeller");

	//ShowMenu1C=1    Показывать меню 1С
	ShowMenu1C=Объект.ПолучитьКакЧисло("Settings/ShowMenu1C");
	//ShowPanel1C=1   Показывать панели 1С
	ShowPanel1C=Объект.ПолучитьКакЧисло("Settings/ShowPanel1C");
	//ShowStatus1C=1  Показывать статусную строку 1С
	ShowStatus1C=Объект.ПолучитьКакЧисло("Settings/ShowStatus1C");
	//WindowMenu=1    Показывать меню окна. Одновременно регулируется реакция на иконки окна:
	//развернуть,свернуть, восстановить, закрыть
	//WindowMenu=0    Окно не реагирует на иконку закрытия, нет иконок свернуть. восстановить
	WindowMenu=Объект.ПолучитьКакЧисло("Settings/WindowMenu");




	ТипОбмена=Врег(Объект.Получить("EXCHANGE/Type"));
	Поз=EXCHANGEType.НайтиЗначение(ТипОбмена);
	Если Поз>0 Тогда
	    EXCHANGEType.ТекущаяСтрока(Поз);
	Иначе
		EXCHANGEType.ДобавитьЗначение(ТипОбмена);
		EXCHANGEType.ТекущаяСтрока(EXCHANGEType.РазмерСписка());
	КонецЕсли;  //Поз>0



	EXCHANGEInData=Объект.Получить("EXCHANGE/InData");

	EXCHANGEInDataFileName=Объект.Получить("EXCHANGE/InDataFileName");

	EXCHANGEArh_InData=Объект.Получить("EXCHANGE/Arh_InData");
	EXCHANGEINDATA_PASSWORD=Объект.Получить("EXCHANGE/INDATA_PASSWORD");

	EXCHANGEOutData=Объект.Получить("EXCHANGE/OutData");
	EXCHANGEArh_OutData=Объект.Получить("EXCHANGE/Arh_OutData");
	EXCHANGEOUTDATA_PASSWORD=Объект.Получить("EXCHANGE/OUTDATA_PASSWORD");



	EXCHANGETestOfData=Объект.Получить("EXCHANGE/TestOfData");
	EXCHANGECheckImport=Объект.Получить("EXCHANGE/CheckImport");

	EXCHANGECheckClose = Объект.Получить("EXCHANGE/CheckClose");

	CARDSUpdateCardsFromCheckServer= Объект.ПолучитьКакЧисло("CARDS/UpdateCardsFromCheckServer");

	EXCHANGECopyChecksToServer= Объект.Получить("EXCHANGE/CopyChecksToServer");
	EXCHANGECheckServerDriver= Объект.Получить("EXCHANGE/CheckServerDriver");

	EXCHANGETARGET= Объект.Получить("EXCHANGE/TARGET");

	RBSoftCheckServerAddres=Объект.Получить("RBSoftCheckServer/Addres");
	RBSoftCheckServerPort=Объект.Получить("RBSoftCheckServer/Port");
	RBSoftCheckServerDatabase=Объект.Получить("RBSoftCheckServer/Database");
	RBSoftCheckServerLogin=Объект.Получить("RBSoftCheckServer/Login");
	//PasswordCrypted - 1 - пароль зашифрован 0- не зашифрован
	RBSoftCheckServerPasswordCrypted=Объект.Получить("RBSoftCheckServer/PasswordCrypted");

	Пароль=СокрЛП(Объект.Получить("RBSoftCheckServer/Password"));
	Если RBSoftCheckServerPasswordCrypted=1 Тогда
		Пароль=глПраваДоступа.РасшифроватьПароль(Пароль);
	КонецЕсли;
	RBSoftCheckServerPassword=Пароль;


	УстановитьДоступность();

КонецПроцедуры

Процедура ПриОткрытии()

	Если ПустоеЗначение(Форма.Параметр)=1 Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;

	СтруктураПараметров=Форма.Параметр;
	Объект=СтруктураПараметров.Объект;

	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Общие,Кнопки,Применить","Общие");
	Форма.Закладки.ДобавитьЗначение("Регистрация,Кнопки,Применить","Регистрация");
	Форма.Закладки.ДобавитьЗначение("Штрихкоды,Кнопки,Применить","Штрихкоды");
	Форма.Закладки.ДобавитьЗначение("Скидки,Кнопки","Скидки");
	Форма.Закладки.ДобавитьЗначение("Карты,Кнопки","Карты");
	Форма.Закладки.ДобавитьЗначение("Отладка,Кнопки,Применить","Отладка");
	Форма.Закладки.ДобавитьЗначение("Оформление,Кнопки,Применить","Оформление");
	Форма.Закладки.ДобавитьЗначение("Обмен","Обмен");
	Форма.Закладки.ДобавитьЗначение("БазаДанных,Кнопки,Применить","База данных");
	Форма.Закладки.ДобавитьЗначение("Безопасность,Кнопки,Применить","Безопасность");

	Форма.Закладки.ДобавитьЗначение("Лицензия,Кнопки","Лицензия");

	SettingsGroupGoods.ДобавитьЗначение(0,"Нет группировки. Всегда новая строка.");
	SettingsGroupGoods.ДобавитьЗначение(1,"Группировать по штрихкоду.");
	SettingsGroupGoods.ДобавитьЗначение(2,"Группировать по товару.");


	EXCHANGEType.ДобавитьЗначение("РБСОФТDBF","РБ-Софт:DBF v5.0");

	ИнициализироватьДиалог();

	Форма.ИспользоватьСлой("Общие,Кнопки,Применить",2);
КонецПроцедуры	// ПриОткрытии

Процедура ПослеСозданияФормы()

	СписокЗакладокОбмен=СоздатьОбъект("СписокЗначений");
	СписокЗакладокОбмен.ДобавитьЗначение("Обмен,ОбменЗагрузка,Кнопки,Применить","Параметры загрузки");
	СписокЗакладокОбмен.ДобавитьЗначение("Обмен,ОбменВыгрузка,Кнопки,Применить","Параметры выгрузки");
	СписокЗакладокОбмен.ДобавитьЗначение("Обмен,ОбменВнешниеЧеки,Кнопки,Применить","Внешние чеки");
	СписокЗакладокОбмен.ДобавитьЗначение("Обмен,ОбменСерверЧеков,Кнопки,Применить","Сервер чеков");

	ЗакладкиОбмен=СоздатьОбъект("Закладки");
	ЗакладкиОбмен.Инит(Контекст,"тпЗакладкиОбмен",СписокЗакладокОбмен);

	оФорма = СоздатьОбъект("Форма");
	оФорма.УстановитьФорму(Форма);


	ПолеЛицензии=оФорма.СоздатьЭлементУправления("ПолеТабличногоДокумента",Форма.кнЛицензия);

	ПолеЛицензии.Таблица.ИсходнаяТаблица("Лицензия");
	ПолеЛицензии.Таблица.Вывести();

	ПолеЛицензии.Таблица.ТолькоПросмотр(1);
	ПолеЛицензии.Таблица.ПараметрыСтраницы(1,,,10,0,0,0,0,0,1);
	ПолеЛицензии.Таблица.Опции(0,0,0,0);



	//СКИДКИ
	ТабличноеПолеАвтоскидок=СоздатьОбъект("ТабличноеПолеАвтоскидок");
	ТабличноеПолеАвтоскидок.Инит(Контекст,"кнТаблицаСкидок");

	ТабличноеПолеАвтоскидок.Обновить();


	КодРодителя="";

	ТабличноеПолеИДКарт=СоздатьОбъект("ТабличноеПолеСпискаИДКарт");
	ТабличноеПолеИДКарт.Инит(Контекст,"кнТабличноеПолеИДКарт",0);


	ТабличноеПолеИДКарт.ВводНовыхЭлементов(1);

	ТабличноеПолеИДКарт.Обновить();

КонецПроцедуры

Процедура ПриПовторномОткрытии()
	ПриОткрытии();
КонецПроцедуры	// ПриПовторномОткрытии

Процедура ПараметрыОбмена(_ПараметрыОбмена)
	ЗакладкиОбмен.УстановитьЗакладку("Обмен,"+_ПараметрыОбмена+",Кнопки");
КонецПроцедуры



Процедура ПриВыбореЗакладки(НомерЗакладки,ЗначениеЗакладки)


	ТекущаяЗакладкаФормы=ЗначениеЗакладки;
	Если ЗначениеЗакладки="Обмен" Тогда
		ЗакладкиОбмен.УстановитьЗакладку("Обмен,ОбменЗагрузка,Кнопки,Применить");
	Иначе
		Форма.ИспользоватьСлой(ЗначениеЗакладки,2);
	КонецЕсли;
КонецПроцедуры

Процедура тпЗакладкиОбмен_ВыборЗакладки(ЗначениеЗакладки,Представление)
	Если (ТекущаяЗакладкаФормы="Обмен") Тогда
		Форма.ИспользоватьСлой(ЗначениеЗакладки,2);
	КонецЕсли;
КонецПроцедуры

Процедура ПоУмолчанию(Режим)
	Если Режим="НастройкиСтруктурыБазыДанных" Тогда
	    DataBaseStructureFile="%DOC%\Структура базы данных РМК.mxl";
		DataBaseStructureShowFlag=0;
		DataBaseStructureFileType.ТекущаяСтрока(1);

	КонецЕсли;  //Режим="НастройкиСтруктурыБазыДанных"
КонецПроцедуры

Процедура ОткрытьОписание()
	Попытка

		ТипФайла=DataBaseStructureFileType.ПолучитьЗначение(DataBaseStructureFileType.ТекущаяСтрока());
		ИмяФайла=глОбработатьМакроСтроку(DataBaseStructureFile);
		Если ФС.СуществуетФайл(ИмяФайла)=0 Тогда
			Предупреждение("Нет файла-описания:
			|"+ИмяФайла);
			возврат;
		КонецЕсли;  //ФС.С
		Если ТипФайла="mxl"  Тогда
			Таб=СоздатьОбъект("Таблица");
			Таб.Открыть(ИмяФайла);

			Таб.Показать();
		Иначе
			ЗапуститьПриложение(ИмяФайла);
		КонецЕсли;  //ТипФ
	Исключение
		глПредупреждение(ОписаниеОшибки());
	КонецПопытки;


КонецПроцедуры

Процедура НеСоздаватьОписание()
	Если глВопрос("Прекратить создание описания структуры базы данных при старте программы?","Да+Нет") ="Да" Тогда
	    DataBaseStructureFile="";
		DataBaseStructureShowFlag=0;
	КонецЕсли;  //Вопрос
КонецПроцедуры

Процедура SettingsDataBaseStructureShowFlagПриИзменении()
	Если ПустаяСтрока(DataBaseStructureFile)=1 Тогда
		Если DataBaseStructureShowFlag=1 Тогда
		    DataBaseStructureShowFlag=0;
			глПредупреждение("Не задано имя файла-описания. Параметр нельзя включать.",1);
		КонецЕсли;  //
	КонецЕсли;
КонецПроцедуры

Процедура SettingsDataBaseStructureFileTypeПриИзменении()
	ТипФайла=DataBaseStructureFileType.ПолучитьЗначение(DataBaseStructureFileType.ТекущаяСтрока());
	Если ПустаяСтрока(DataBaseStructureFile )=0 Тогда
		Стр=DataBaseStructureFile;
		НашлиРазделитель=0;
		Пока НашлиРазделитель=0 Цикл
			Если (Прав(Стр,1)=".") Тогда
			    НашлиРазделитель=1;

			ИначеЕсли (Прав(Стр,1)="\")Или(Прав(Стр,1)="/")	Тогда
				НашлиРазделитель=1;
				Стр=СокрЛП(DataBaseStructureFile);
				Прервать;
			КонецЕсли;  //
			Стр=Лев(Стр,СтрДлина(Стр)-1)
		КонецЦикла;
		DataBaseStructureFile=Стр+"."+ТипФайла;
	КонецЕсли;  //

КонецПроцедуры

Процедура Применить()




	РежимГруппировки=SettingsGroupGoods.ПолучитьЗначение(SettingsGroupGoods.ТекущаяСтрока());


	Объект.Установить("Settings/ModalMode",SettingsModalMode);
	Объект.Установить("Settings/GroupGoods",РежимГруппировки);
	Объект.Установить("Settings/DefaultGoodsGroup",СокрЛП(SettingsDefaultGoodsGroup));
	Объект.Установить("Settings/POSNumber",СокрЛП(SettingsPOSNumber));

	Объект.Установить("Settings/Skin",СокрЛП(SettingsSkin));





	ТипБазы=SettingsDataBaseType.ПолучитьЗначение(SettingsDataBaseType.ТекущаяСтрока());
	Объект.Установить("Settings/DataBaseType",ТипБазы);

	Объект.Установить("Settings/PasswordSecurityKey",SettingsPasswordSecurityKey);




	Объект.Установить("Settings/RegisterService",RegisterService);
	Объект.Установить("Settings/RegisterSeller",RegisterSeller);

	Объект.Установить("Settings/ShowMenu1C",ShowMenu1C);
	Объект.Установить("Settings/ShowPanel1C",ShowPanel1C);
	Объект.Установить("Settings/ShowStatus1C",ShowStatus1C);
	Объект.Установить("Settings/WindowMenu",WindowMenu);



	Объект.Установить("ScanCodes/WeightPrefix",СокрЛП(ScanCodesWeightPrefix));
	Объект.Установить("ScanCodes/OurPrefix",СокрЛП(ScanCodesOurPrefix));



	ТипФайла=DataBaseStructureFileType.ПолучитьЗначение(DataBaseStructureFileType.ТекущаяСтрока());
	Объект.Установить("PROGRAMMING/DataBaseStructureFileType",ТипФайла);

	Объект.Установить("PROGRAMMING/DataBaseStructureFile",СокрЛП(DataBaseStructureFile));
	Объект.Установить("PROGRAMMING/DataBaseStructureShowFlag",DataBaseStructureShowFlag);


	Объект.Установить("PROGRAMMING/Debug",Debug);
	Объект.Установить("PROGRAMMING/DebugLog",DebugLog);

	Объект.Установить("PROGRAMMING/SaveCodeStatistics",SaveCodeStatistics);


	Объект.Установить("EXCHANGE/Type",EXCHANGEType.ПолучитьЗначение(EXCHANGEType.ТекущаяСтрока()));
	Объект.Установить("EXCHANGE/InData",СокрЛП(EXCHANGEInData));
	Объект.Установить("EXCHANGE/InDataFileName",СокрЛП(EXCHANGEInDataFileName));

	Объект.Установить("EXCHANGE/OutData",СокрЛП(EXCHANGEOutData));
	Объект.Установить("EXCHANGE/TestOfData",СокрЛП(EXCHANGETestOfData));

	Объект.Установить("EXCHANGE/Arh_OutData",СокрЛП(EXCHANGEArh_OutData));
	Объект.Установить("EXCHANGE/OutData_PASSWORD",СокрЛП(EXCHANGEOUTDATA_PASSWORD));
	Объект.Установить("EXCHANGE/Arh_InData",СокрЛП(EXCHANGEArh_InData));
	Объект.Установить("EXCHANGE/InData_PASSWORD",СокрЛП(EXCHANGEInData_PASSWORD));

	Объект.Установить("EXCHANGE/CheckImport",СокрЛП(EXCHANGECheckImport));
	Объект.Установить("EXCHANGE/CheckClose" ,СокрЛП(EXCHANGECheckClose));


	//Обновлять информацию о карте с сервера при выборе дисконтной карты

	Объект.Установить("CARDS/UpdateCardsFromCheckServer",CARDSUpdateCardsFromCheckServer);

	Объект.Установить("EXCHANGE/CopyChecksToServer",EXCHANGECopyChecksToServer);

	Объект.Установить("EXCHANGE/CheckServerDriver",СокрЛП(EXCHANGECheckServerDriver));

	Объект.Установить("EXCHANGE/TARGET",СокрЛП(EXCHANGETARGET));

	Объект.Установить("RBSoftCheckServer/Addres",СокрЛП(RBSoftCheckServerAddres));

	Объект.Установить("RBSoftCheckServer/Port",СокрЛП(RBSoftCheckServerPort));
	Объект.Установить("RBSoftCheckServer/Database",СокрЛП(RBSoftCheckServerDatabase));
	Объект.Установить("RBSoftCheckServer/Login",СокрЛП(RBSoftCheckServerLogin));
	Объект.Установить("RBSoftCheckServer/PasswordCrypted",RBSoftCheckServerPasswordCrypted);

	Если RBSoftCheckServerPasswordCrypted=0 Тогда
		Объект.Установить("RBSoftCheckServer/Password",СокрЛП(RBSoftCheckServerPassword));
	Иначе
		Пароль=глПраваДоступа.ЗашифроватьПароль(СокрЛП(RBSoftCheckServerPassword));
		Объект.Установить("RBSoftCheckServer/Password",Пароль);
	КонецЕсли;

	Если Объект.Записать()=0 Тогда
		глПредупреждение("Не удалось записать настройки.
		|"+Объект.ПоследняяОшибка());
	КонецЕсли;


КонецПроцедуры

Процедура ПриНачалеВыбораЗначения(ИД,ФСО)
	Если ИД="SettingsSkin" Тогда

		СЗ=СоздатьОбъект("СписокЗначений");
		ФС.УстТекКаталог(глОбработатьМакроСтроку("%Skins%"));

		ИмяФайла=ФС.НайтиПервыйФайл("*.*");


		Пока ИмяФайла<>"" Цикл
			Если ИмяФайла="." Тогда
			ИначеЕсли ИмяФайла=".." Тогда
			ИначеЕсли ФС.СуществуетФайл(ИмяФайла+"\skin.ini") =1 Тогда
				СЗ.ДобавитьЗначение(ИмяФайла);
			КонецЕсли;  //

			ИмяФайла=ФС.НайтиСледующийФайл();
		КонецЦикла;

		Зн=SettingsSkin;
		Поз=0;
		Если СЗ.ВыбратьЗначение(Зн,"Выберите скин",Поз)=1 Тогда
		    SettingsSkin=Зн;
		КонецЕсли;  //
	ИначеЕсли ИД="SettingsDefaultGoodsGroup" Тогда


	ИначеЕсли ИД="EXCHANGECheckImport" Тогда
		ИмяКаталога=СокрЛП(EXCHANGECheckImport);
		Если ФС.ВыбратьКаталог(ИмяКаталога,"Выберите каталог импорта чеков")=1 Тогда
		    EXCHANGECheckImport=СокрЛП(ИмяКаталога);
		КонецЕсли;  //

	ИначеЕсли ИД="EXCHANGECheckClose" Тогда

		ИмяКаталога=СокрЛП(EXCHANGECheckClose);
		Если ФС.ВыбратьКаталог(ИмяКаталога,"Выберите каталог закрытых чеков")=1 Тогда
		    EXCHANGECheckClose=СокрЛП(ИмяКаталога);
		КонецЕсли;  //

	ИначеЕсли ИД="EXCHANGEOutData" Тогда

		ИмяКаталога=СокрЛП(EXCHANGEOutData);
		Если ФС.ВыбратьКаталог(ИмяКаталога,"Выберите каталог выгрузки данных")=1 Тогда
		    EXCHANGEOutData=СокрЛП(ИмяКаталога);
		КонецЕсли;  //

	ИначеЕсли ИД="EXCHANGEInData" Тогда

		ИмяКаталога=СокрЛП(EXCHANGEInData);
		Если ФС.ВыбратьКаталог(ИмяКаталога,"Выберите каталог загрузки данных")=1 Тогда
		    EXCHANGEInData=СокрЛП(ИмяКаталога);
		КонецЕсли;  //
	ИначеЕсли ИД="EXCHANGEArh_InData" Тогда

		ИмяФайла=СокрЛП(EXCHANGEArh_InData);

		ИмяКаталога=глФайловаяСистема.КаталогФайла(ИмяФайла);
		ИмяФайла=глФайловаяСистема.ИмяФайла(ИмяФайла);

		Если ПустаяСтрока(ИмяКаталога)=1 Тогда
			ИмяКаталога=СокрЛП(EXCHANGEInData);
		КонецЕсли;

		Если ФС.ВыбратьФайл(1,ИмяФайла,ИмяКаталога,"Выберите архивный файл для загрузки данных из бакофиса",
		"Архивы(*.zip)|*.zip","zip")=1 Тогда
		    EXCHANGEArh_InData=ИмяКаталога+ИмяФайла;
		КонецЕсли;  //
	ИначеЕсли ИД="EXCHANGEArh_OutData" Тогда

		ИмяФайла=СокрЛП(EXCHANGEArh_OutData);

		ИмяКаталога=глФайловаяСистема.КаталогФайла(ИмяФайла);
		ИмяФайла=глФайловаяСистема.ИмяФайла(ИмяФайла);

		Если ПустаяСтрока(ИмяКаталога)=1 Тогда
			ИмяКаталога=СокрЛП(EXCHANGEOutData);
		КонецЕсли;


		Если ФС.ВыбратьФайл(1,ИмяФайла,ИмяКаталога,"Выберите архивный файл для выгрузки данных в бакофис","Архивы(*.zip)|*.zip","zip")=1 Тогда
		    EXCHANGEArh_OutData=ИмяКаталога+ИмяФайла;
		КонецЕсли;  //
	ИначеЕсли ИД="EXCHANGETARGET" Тогда

		ИмяКаталога=СокрЛП(EXCHANGETARGET);

		Если ФС.ВыбратьКаталог(ИмяКаталога,"Выберите каталог для пересылкаи архива")=1 Тогда
		    EXCHANGETARGET=СокрЛП(ИмяКаталога);
		КонецЕсли;  //
	ИначеЕсли ИД="EXCHANGECheckServerDriver" Тогда

	ИначеЕсли ИД="DataBaseStructureFile" Тогда
		ИмяФайлаDataBaseStructureFile=глОбработатьМакроСтроку(СокрЛП(DataBaseStructureFile));

		ИмяФайла_DBStructureFile=глФайловаяСистема.ИмяФайла(ИмяФайлаDataBaseStructureFile);
		Каталог_DBStructureFile=глФайловаяСистема.КаталогФайла(ИмяФайлаDataBaseStructureFile);

		Если ИмяФайла_DBStructureFile="" Тогда
			ИмяФайла_DBStructureFile="Структура базы данных РМК "+НомерВерсии+".xls";
		КонецЕсли;

		Если Каталог_DBStructureFile="" Тогда
			Каталог_DBStructureFile=глОбработатьМакроСтроку("%DOC%");
		КонецЕсли;

		Расширение=глФайловаяСистема.РасширениеФайла(ИмяФайла_DBStructureFile);
		Если Найти("XLS/TXT/HTM/MXL",ВРЕГ(Расширение))=0 Тогда
			Расширение="xls";
		КонецЕсли;

		Если ФС.ВыбратьФайл(1,ИмяФайла_DBStructureFile,Каталог_DBStructureFile,
		"Имя файла структуры БД","Таблица Excel|*.xls|Таблица 1С|*.mxl|Текстовый файл|*.txt|HTML|*.htm",нрег(Расширение))=1 Тогда
			Если ВРЕГ(Каталог_DBStructureFile)=ВРЕГ(глОбработатьМакроСтроку("%DOC%\")) Тогда
				Каталог_DBStructureFile="%DOC%\";
			КонецЕсли;
			DataBaseStructureFile=Каталог_DBStructureFile+ИмяФайла_DBStructureFile;

			Расширение=нрег(глФайловаяСистема.РасширениеФайла(ИмяФайла_DBStructureFile));
			Поз=DataBaseStructureFileType.НайтиЗначение(Расширение);
			Если Поз>0 Тогда
				DataBaseStructureFileType.ТекущаяСтрока(Поз);
			КонецЕсли;



		КонецЕсли;
	КонецЕсли;  //ИД



КонецПроцедуры


Процедура НастроитьСкин()
	Скин=СоздатьОбъект("Скин");
	Скин.ПрочитатьФайл(глОбработатьМакроСтроку("%Skins%\"+СокрЛП(SettingsSkin)+"\skin.ini"));
	Скин.ОткрытьФормуОбъектаМодально();
	//ОткрытьФормуМодально("Обработка.Class_Файл_INI_ОсновнаяФорма",Скин);

КонецПроцедуры



Процедура НастройкаБазыДанных()
	Попытка
		глБД.ОткрытьФормуОбъекта();
	Исключение
		глПредупреждение("Не удалось открыть форму:
		|"+ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

Процедура СохранитьЛицензиюВФайл()

	ФайлЛицензииHTML=глОбработатьМакроСтроку("%DOC%\RBSoft_RMK_License.HTM");
	ФайлЛицензииTXT=глОбработатьМакроСтроку("%DOC%\RBSoft_RMK_License.TXT");
	Попытка
		ПолеЛицензии.Таблица.Записать(ФайлЛицензииHTML,"HTM");
		ПолеЛицензии.Таблица.Записать(ФайлЛицензииTXT,"TXT");
		глПредупреждение("Текст лицензии записан в файл:
		|Формат HTML: "+ФайлЛицензииHTML+"
		|Формат Text: "+ФайлЛицензииTXT);
	Исключение
		глПредупреждение("Ошибка: "+ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

Процедура ПечатьЛицензии()
	ПолеЛицензии.Таблица.Напечатать(1);
КонецПроцедуры

Процедура НастройкаДисконтнойСистемы()
	ДисконтнаяСистема=СоздатьОбъект("ДисконтнаяСистема");
	ДисконтнаяСистема.ОткрытьФормуОбъектаМодально();

КонецПроцедуры

Процедура ДисконтныеКарты()
	Карты=СоздатьОбъект("ИДКарта");
	Карты.ОткрытьФормуОбъектаМодально("ФормаСписка");
КонецПроцедуры

Процедура ПросмотрСтруктурыБазыДанных()
	глБраузер(глБД.СтруктураБазы);
КонецПроцедуры


Процедура ДобавитьКарту()
	ТабличноеПолеИДКарт.НовыйОбъект();
КонецПроцедуры

Процедура УдалитьКарту()
	ТабличноеПолеИДКарт.УдалитьОбъект(1);
КонецПроцедуры

Процедура РедактироватьКарту()
	ТабличноеПолеИДКарт.РедактироватьОбъект();
КонецПроцедуры

Процедура ОбновитьКарты()
	ТабличноеПолеИДКарт.Обновить();
КонецПроцедуры

Процедура ДобавитьСкидку()
	ТабличноеПолеАвтоскидок.НовыйОбъект();
КонецПроцедуры

Процедура УдалитьСкидку()
	ТабличноеПолеАвтоскидок.УдалитьОбъект(1);
КонецПроцедуры

Процедура РедактироватьСкидку()
	ТабличноеПолеАвтоскидок.РедактироватьОбъект();
КонецПроцедуры

Процедура ОбновитьСкидки()
	ТабличноеПолеАвтоскидок.Обновить();
КонецПроцедуры

DefaultGoodsGroup="";


SettingsPasswordSecurityKeyInfo="Если ключ расшифровки пустой, то пароли хранятся незашифрованными
|при загрузке данных из бакофиса пароль в файле загрузки идет нешифрованным.
|при записи таблицы пользовательский пароль шифруется с заданным ключом
|и в дальнейшем используется при авторизации пользователей.";


ТекущаяЗакладкаФормы="";